// This file was generated by stencil2.py on Sunday, 11. February 2018 04:15PM

#include <PNSystem.h>

void stencil_p1_2d_sg(PNSystem::Stencil::Context& ctx)
{
	V3i vi = ctx.getVoxelCoord();
	V3d vd = vi.cast<double>();
	const Domain& domain = ctx.getDomain();
	const PNVolume& problem = ctx.getProblem();
	V3d h_inv( 1.0/(1*domain.getVoxelSize()[0]), 1.0/(1*domain.getVoxelSize()[1]), 1.0/(1*domain.getVoxelSize()[2]) );
	int color_channel = 0;

	// row=0 l=0 m=0 --------------------------
	ctx.coeff_A( 0, vi+V3i(0, 0, 0), 2 ) += (0.57735026919*h_inv[0]);
	ctx.coeff_A( 0, vi+V3i(1, 0, 0), 2 ) += -(0.57735026919*h_inv[0]);
	ctx.coeff_A( 0, vi+V3i(0, 0, 0), 1 ) += (0.57735026919*h_inv[1]);
	ctx.coeff_A( 0, vi+V3i(0, 1, 0), 1 ) += -(0.57735026919*h_inv[1]);
	{
		double c = 0.0;
		c+=ctx.evalExtinction(0, 0, 0)[color_channel];
		c+=-(3.54490770181*ctx.evalScattering(0, 0, 0)[color_channel]*ctx.evalPhase(0, 0, 0, 0, 0)[color_channel]);
		ctx.coeff_A( 0, vi+V3i(0, 0, 0), 0 ) += c;
	}
	{
		double c = 0.0;
		c+=ctx.evalEmission(0, 0, 0, 0, 0)[color_channel];
		ctx.coeff_b( 0 ) += c;
	}
	// row=1 l=1 m=-1 --------------------------
	ctx.coeff_A( 1, vi+V3i(0, -1, 0), 0 ) += (0.57735026919*h_inv[1]);
	ctx.coeff_A( 1, vi+V3i(0, 0, 0), 0 ) += -(0.57735026919*h_inv[1]);
	{
		double c = 0.0;
		c+=(0.5*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(0.5*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.511663353973*ctx.evalPhase(1, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.511663353973*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.511663353973*ctx.evalPhase(1, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.511663353973*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 1, vi+V3i(0, 0, 0), 1 ) += c;
	}
	{
		double c = 0.0;
		c+=(0.5*ctx.evalEmission(1, -1, 0, -1, 0)[color_channel]);
		c+=(0.5*ctx.evalEmission(1, -1, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 1 ) += c;
	}
	// row=2 l=1 m=1 --------------------------
	ctx.coeff_A( 2, vi+V3i(-1, 0, 0), 0 ) += (0.57735026919*h_inv[0]);
	ctx.coeff_A( 2, vi+V3i(0, 0, 0), 0 ) += -(0.57735026919*h_inv[0]);
	{
		double c = 0.0;
		c+=(0.5*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(0.5*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.511663353973*ctx.evalPhase(1, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.511663353973*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.511663353973*ctx.evalPhase(1, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.511663353973*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 2, vi+V3i(0, 0, 0), 2 ) += c;
	}
	{
		double c = 0.0;
		c+=(0.5*ctx.evalEmission(1, 1, -1, 0, 0)[color_channel]);
		c+=(0.5*ctx.evalEmission(1, 1, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 2 ) += c;
	}
}
V3i stencil_p1_2d_sg_get_offset(int coeff)
{
	switch(coeff)
	{
		case 0:return V3i(1, 1, 1);break;
		case 1:return V3i(1, 0, 1);break;
		case 2:return V3i(0, 1, 1);break;
		default:throw std::runtime_error("unexpected coefficient index");break;
	};
}
REGISTER_STENCIL(stencil_p1_2d_sg, 1, 3, 1)
