// This file was generated by stencil.py

#include <PNSystem.h>

void stencil_sopn_p0_cg(PNSystem::VoxelSystem& sys,
					PNSystem::Fields& fields)
{
	V2i vi = sys.getVoxel();
	V2d vd = sys.getVoxel().cast<double>();
	V2d h_inv( 1.0/(2*sys.getVoxelSize()[0]), 1.0/(2*sys.getVoxelSize()[1]) );

	Eigen::Matrix<std::complex<double>, 1, 1> S;
	S.coeffRef(0, 0) = std::complex<double>(1.0, 0.0);
	Eigen::Matrix<std::complex<double>, 1, 1> SInv;
	SInv.coeffRef(0, 0) = std::complex<double>(1.0, 0.0);

	//Producing complex-valued matrices =============
	//M_0dxdxL + M_1dxdyL + M_2dxdzL + M_3dydxL + M_4dydyL + M_5dydzL + M_6dzdxL + M_7dzdyL + M_8dzdzL + M_9L + M_10dxL + M_11dyL + M_12dzL = b

	//M_0 ---
	// is constant
	Eigen::Matrix<double, 1, 1> M_0_real;
	M_0_real(0, 0) = -0.3333333333333333;

	//M_1 ---
	// is constant
	Eigen::Matrix<double, 1, 1> M_1_real;
	M_1_real(0, 0) = 0.0;

	//M_2 ---
	// all components vanish

	//M_3 ---
	// is constant
	Eigen::Matrix<double, 1, 1> M_3_real;
	M_3_real(0, 0) = 0.0;

	//M_4 ---
	// is constant
	Eigen::Matrix<double, 1, 1> M_4_real;
	M_4_real(0, 0) = -0.3333333333333333;

	//M_5 ---
	// all components vanish

	//M_6 ---
	// all components vanish

	//M_7 ---
	// all components vanish

	//M_8 ---
	// is constant
	Eigen::Matrix<double, 1, 1> M_8_real;
	M_8_real(0, 0) = -0.3333333333333333;

	//M_9 ---
	Eigen::Matrix<std::complex<double>, 1, 1> M_9;
	M_9(0, 0) = (std::pow(fields.sigma_t->eval(sys.voxelToWorld(vd+V2d(0.5, 0.5))), 2)+
			-(fields.sigma_t->eval(sys.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.sigma_s->eval(sys.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(0, 0, sys.voxelToWorld(vd+V2d(0.5, 0.5)))));
	Eigen::Matrix<double, 1, 1> M_9_real = (S*M_9*SInv).real();

	//M_10 ---
	// all components vanish

	//M_11 ---
	// all components vanish

	//M_12 ---
	// all components vanish

	//b ---
	Eigen::Matrix<std::complex<double>, 1, 1> b;
	b(0, 0) = (fields.sigma_t->eval(sys.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.q->eval(0, 0, sys.voxelToWorld(vd+V2d(0.5, 0.5))));
	Eigen::Matrix<double, 1, 1> b_real = (S*b).real();

	// Assembling global system =============
	sys.coeff_A( 0, vi + V2i(-2,0), 0 ) += (h_inv[0]*h_inv[0]*-0.333333333333);
	sys.coeff_A( 0, vi + V2i(0,0), 0 ) += -(h_inv[0]*h_inv[0]*-0.333333333333);
	sys.coeff_A( 0, vi + V2i(0,0), 0 ) += -(h_inv[0]*h_inv[0]*-0.333333333333);
	sys.coeff_A( 0, vi + V2i(2,0), 0 ) += (h_inv[0]*h_inv[0]*-0.333333333333);
	sys.coeff_A( 0, vi + V2i(0,-2), 0 ) += (h_inv[1]*h_inv[1]*-0.333333333333);
	sys.coeff_A( 0, vi + V2i(0,0), 0 ) += -(h_inv[1]*h_inv[1]*-0.333333333333);
	sys.coeff_A( 0, vi + V2i(0,0), 0 ) += -(h_inv[1]*h_inv[1]*-0.333333333333);
	sys.coeff_A( 0, vi + V2i(0,2), 0 ) += (h_inv[1]*h_inv[1]*-0.333333333333);
	sys.coeff_A( 0, vi + V2i(0,0), 0 ) += M_9_real.coeffRef(0, 0);
	sys.coeff_b( 0 ) += b_real.coeffRef(0, 0);
}
REGISTER_STENCIL(stencil_sopn_p0_cg, 0, 2)
