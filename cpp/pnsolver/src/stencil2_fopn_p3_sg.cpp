// This file was generated by stencil2.py

#include <PNSystem.h>

void stencil2_fopn_p3_sg(PNSystem::Stencil::Context& ctx)
{
	V3i vi = ctx.getVoxelCoord();
	V3d vd = vi.cast<double>();
	const Domain& domain = ctx.getDomain();
	const PNVolume& problem = ctx.getProblem();
	V3d h_inv( 1.0/(1*domain.getVoxelSize()[0]), 1.0/(1*domain.getVoxelSize()[1]), 1.0/(1*domain.getVoxelSize()[2]) );
	int color_channel = 0;

	// row=0 --------------------------
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.57735026919*h_inv[0]);
		ctx.coeff_A( 0, vi+V3i(0, 0, 0), 2 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.57735026919*h_inv[0]);
		ctx.coeff_A( 0, vi+V3i(1, 0, 0), 2 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.57735026919*h_inv[1]);
		ctx.coeff_A( 0, vi+V3i(0, 0, 0), 1 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.57735026919*h_inv[1]);
		ctx.coeff_A( 0, vi+V3i(0, 1, 0), 1 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=ctx.evalExtinction(0, 0, 0)[color_channel];
		c+=-(3.54490770181*ctx.evalScattering(0, 0, 0)[color_channel]*ctx.evalPhase(0, 0, 0, 0, 0)[color_channel]);
		ctx.coeff_A( 0, vi+V3i(0, 0, 0), 0 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=ctx.evalEmission(0, 0, 0, 0, 0)[color_channel];
		ctx.coeff_b( 0 ) += c.real();
	}
	// row=1 --------------------------
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.4472135955*h_inv[0]);
		ctx.coeff_A( 1, vi+V3i(0, 0, 0), 3 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.4472135955*h_inv[0]);
		ctx.coeff_A( 1, vi+V3i(1, 0, 0), 3 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.4472135955*h_inv[1]);
		ctx.coeff_A( 1, vi+V3i(0, -1, 0), 5 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.4472135955*h_inv[1]);
		ctx.coeff_A( 1, vi+V3i(0, 0, 0), 5 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.57735026919*h_inv[1]);
		ctx.coeff_A( 1, vi+V3i(0, -1, 0), 0 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.57735026919*h_inv[1]);
		ctx.coeff_A( 1, vi+V3i(0, 0, 0), 0 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.258198889747*h_inv[1]);
		ctx.coeff_A( 1, vi+V3i(0, -1, 0), 4 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.258198889747*h_inv[1]);
		ctx.coeff_A( 1, vi+V3i(0, 0, 0), 4 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.25*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(0.25*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(-0.25*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=-(-0.25*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.255831676987*ctx.evalPhase(1, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.255831676987*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.255831676987*ctx.evalPhase(1, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.255831676987*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.255831676987*ctx.evalPhase(1, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.255831676987*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.255831676987*ctx.evalPhase(1, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.255831676987*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 1, vi+V3i(0, 0, 0), 1 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 1, vi+V3i(0, -1, 0), 2 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 1, vi+V3i(0, 0, 0), 2 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 1, vi+V3i(1, -1, 0), 2 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 1, vi+V3i(1, 0, 0), 2 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.25*ctx.evalEmission(1, -1, 0, -1, 0)[color_channel]);
		c+=(0.25*ctx.evalEmission(1, -1, 0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.24999999999999994)*ctx.evalEmission(1, 1, 0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.24999999999999994)*ctx.evalEmission(1, 1, 0, 0, 0)[color_channel]);
		c+=-(-0.25*ctx.evalEmission(1, -1, 0, -1, 0)[color_channel]);
		c+=-(-0.25*ctx.evalEmission(1, -1, 0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.24999999999999994)*ctx.evalEmission(1, 1, 0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.24999999999999994)*ctx.evalEmission(1, 1, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 1 ) += c.real();
	}
	// row=2 --------------------------
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.4472135955*h_inv[0]);
		ctx.coeff_A( 2, vi+V3i(-1, 0, 0), 5 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.4472135955*h_inv[0]);
		ctx.coeff_A( 2, vi+V3i(0, 0, 0), 5 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.57735026919*h_inv[0]);
		ctx.coeff_A( 2, vi+V3i(-1, 0, 0), 0 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.57735026919*h_inv[0]);
		ctx.coeff_A( 2, vi+V3i(0, 0, 0), 0 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.258198889747*h_inv[0]);
		ctx.coeff_A( 2, vi+V3i(-1, 0, 0), 4 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.258198889747*h_inv[0]);
		ctx.coeff_A( 2, vi+V3i(0, 0, 0), 4 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.4472135955*h_inv[1]);
		ctx.coeff_A( 2, vi+V3i(0, 0, 0), 3 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.4472135955*h_inv[1]);
		ctx.coeff_A( 2, vi+V3i(0, 1, 0), 3 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 2, vi+V3i(-1, 0, 0), 1 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 2, vi+V3i(-1, 1, 0), 1 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 2, vi+V3i(0, 0, 0), 1 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.06395791924665552)*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 2, vi+V3i(0, 1, 0), 1 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.25*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(0.25*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(0.25*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(0.25*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.255831676987*ctx.evalPhase(1, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.255831676987*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.255831676987*ctx.evalPhase(1, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.255831676987*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.255831676987*ctx.evalPhase(1, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.255831676987*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.255831676987*ctx.evalPhase(1, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.255831676987*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 2, vi+V3i(0, 0, 0), 2 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(std::complex<double>(0.0, 0.24999999999999994)*ctx.evalEmission(1, -1, -1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.24999999999999994)*ctx.evalEmission(1, -1, 0, 0, 0)[color_channel]);
		c+=(0.25*ctx.evalEmission(1, 1, -1, 0, 0)[color_channel]);
		c+=(0.25*ctx.evalEmission(1, 1, 0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.24999999999999994)*ctx.evalEmission(1, -1, -1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.24999999999999994)*ctx.evalEmission(1, -1, 0, 0, 0)[color_channel]);
		c+=(0.25*ctx.evalEmission(1, 1, -1, 0, 0)[color_channel]);
		c+=(0.25*ctx.evalEmission(1, 1, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 2 ) += c.real();
	}
	// row=3 --------------------------
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.462910049886*h_inv[0]);
		ctx.coeff_A( 3, vi+V3i(-1, 0, 0), 6 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.462910049886*h_inv[0]);
		ctx.coeff_A( 3, vi+V3i(0, 0, 0), 6 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.4472135955*h_inv[0]);
		ctx.coeff_A( 3, vi+V3i(-1, 0, 0), 1 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.4472135955*h_inv[0]);
		ctx.coeff_A( 3, vi+V3i(0, 0, 0), 1 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.119522860933*h_inv[0]);
		ctx.coeff_A( 3, vi+V3i(-1, 0, 0), 7 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.119522860933*h_inv[0]);
		ctx.coeff_A( 3, vi+V3i(0, 0, 0), 7 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.462910049886*h_inv[1]);
		ctx.coeff_A( 3, vi+V3i(0, -1, 0), 9 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.462910049886*h_inv[1]);
		ctx.coeff_A( 3, vi+V3i(0, 0, 0), 9 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.4472135955*h_inv[1]);
		ctx.coeff_A( 3, vi+V3i(0, -1, 0), 2 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.4472135955*h_inv[1]);
		ctx.coeff_A( 3, vi+V3i(0, 0, 0), 2 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.119522860933*h_inv[1]);
		ctx.coeff_A( 3, vi+V3i(0, -1, 0), 8 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.119522860933*h_inv[1]);
		ctx.coeff_A( 3, vi+V3i(0, 0, 0), 8 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.125*ctx.evalExtinction(-1, -1, 0)[color_channel]);
		c+=(0.125*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(0.125*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(0.125*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(-0.125*ctx.evalExtinction(-1, -1, 0)[color_channel]);
		c+=-(-0.125*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=-(-0.125*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=-(-0.125*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.0495415912201*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0495415912201*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0495415912201*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0495415912201*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0495415912201*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0495415912201*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0495415912201*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0495415912201*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0495415912201*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0495415912201*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0495415912201*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0495415912201*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0495415912201*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0495415912201*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0495415912201*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0495415912201*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0495415912201*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0495415912201*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0495415912201*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0495415912201*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0495415912201*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0495415912201*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0495415912201*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0495415912201*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0495415912201*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0495415912201*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0495415912201*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0495415912201*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0495415912201*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0495415912201*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0495415912201*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0495415912201*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 3, vi+V3i(0, 0, 0), 3 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(std::complex<double>(0.0, 0.031249999999999993)*ctx.evalExtinction(-1, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.031249999999999993)*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.031249999999999993)*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.031249999999999993)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.031249999999999993)*ctx.evalExtinction(-1, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.031249999999999993)*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.031249999999999993)*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.031249999999999993)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 3, vi+V3i(-1, -1, 0), 5 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(std::complex<double>(0.0, 0.031249999999999993)*ctx.evalExtinction(-1, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.031249999999999993)*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.031249999999999993)*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.031249999999999993)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.031249999999999993)*ctx.evalExtinction(-1, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.031249999999999993)*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.031249999999999993)*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.031249999999999993)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 3, vi+V3i(-1, 0, 0), 5 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(std::complex<double>(0.0, 0.031249999999999993)*ctx.evalExtinction(-1, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.031249999999999993)*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.031249999999999993)*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.031249999999999993)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.031249999999999993)*ctx.evalExtinction(-1, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.031249999999999993)*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.031249999999999993)*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.031249999999999993)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 3, vi+V3i(0, -1, 0), 5 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(std::complex<double>(0.0, 0.031249999999999993)*ctx.evalExtinction(-1, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.031249999999999993)*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.031249999999999993)*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.031249999999999993)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.031249999999999993)*ctx.evalExtinction(-1, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.031249999999999993)*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.031249999999999993)*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.031249999999999993)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.01238539780501878)*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 3, vi+V3i(0, 0, 0), 5 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.125*ctx.evalEmission(2, -2, -1, -1, 0)[color_channel]);
		c+=(0.125*ctx.evalEmission(2, -2, -1, 0, 0)[color_channel]);
		c+=(0.125*ctx.evalEmission(2, -2, 0, -1, 0)[color_channel]);
		c+=(0.125*ctx.evalEmission(2, -2, 0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.12499999999999997)*ctx.evalEmission(2, 2, -1, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.12499999999999997)*ctx.evalEmission(2, 2, -1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.12499999999999997)*ctx.evalEmission(2, 2, 0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.12499999999999997)*ctx.evalEmission(2, 2, 0, 0, 0)[color_channel]);
		c+=-(-0.125*ctx.evalEmission(2, -2, -1, -1, 0)[color_channel]);
		c+=-(-0.125*ctx.evalEmission(2, -2, -1, 0, 0)[color_channel]);
		c+=-(-0.125*ctx.evalEmission(2, -2, 0, -1, 0)[color_channel]);
		c+=-(-0.125*ctx.evalEmission(2, -2, 0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.12499999999999997)*ctx.evalEmission(2, 2, -1, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.12499999999999997)*ctx.evalEmission(2, 2, -1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.12499999999999997)*ctx.evalEmission(2, 2, 0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.12499999999999997)*ctx.evalEmission(2, 2, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 3 ) += c.real();
	}
	// row=4 --------------------------
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.258198889747*h_inv[0]);
		ctx.coeff_A( 4, vi+V3i(0, 0, 0), 2 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.258198889747*h_inv[0]);
		ctx.coeff_A( 4, vi+V3i(1, 0, 0), 2 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.414039335605*h_inv[0]);
		ctx.coeff_A( 4, vi+V3i(0, 0, 0), 8 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.414039335605*h_inv[0]);
		ctx.coeff_A( 4, vi+V3i(1, 0, 0), 8 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.258198889747*h_inv[1]);
		ctx.coeff_A( 4, vi+V3i(0, 0, 0), 1 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.258198889747*h_inv[1]);
		ctx.coeff_A( 4, vi+V3i(0, 1, 0), 1 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.414039335605*h_inv[1]);
		ctx.coeff_A( 4, vi+V3i(0, 0, 0), 7 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.414039335605*h_inv[1]);
		ctx.coeff_A( 4, vi+V3i(0, 1, 0), 7 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=ctx.evalExtinction(0, 0, 0)[color_channel];
		c+=-(1.58533091904*ctx.evalScattering(0, 0, 0)[color_channel]*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]);
		ctx.coeff_A( 4, vi+V3i(0, 0, 0), 4 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=ctx.evalEmission(2, 0, 0, 0, 0)[color_channel];
		ctx.coeff_b( 4 ) += c.real();
	}
	// row=5 --------------------------
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.462910049886*h_inv[0]);
		ctx.coeff_A( 5, vi+V3i(0, 0, 0), 9 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.462910049886*h_inv[0]);
		ctx.coeff_A( 5, vi+V3i(1, 0, 0), 9 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.4472135955*h_inv[0]);
		ctx.coeff_A( 5, vi+V3i(0, 0, 0), 2 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.4472135955*h_inv[0]);
		ctx.coeff_A( 5, vi+V3i(1, 0, 0), 2 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.119522860933*h_inv[0]);
		ctx.coeff_A( 5, vi+V3i(0, 0, 0), 8 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.119522860933*h_inv[0]);
		ctx.coeff_A( 5, vi+V3i(1, 0, 0), 8 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.462910049886*h_inv[1]);
		ctx.coeff_A( 5, vi+V3i(0, 0, 0), 6 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.462910049886*h_inv[1]);
		ctx.coeff_A( 5, vi+V3i(0, 1, 0), 6 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.4472135955*h_inv[1]);
		ctx.coeff_A( 5, vi+V3i(0, 0, 0), 1 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.4472135955*h_inv[1]);
		ctx.coeff_A( 5, vi+V3i(0, 1, 0), 1 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.119522860933*h_inv[1]);
		ctx.coeff_A( 5, vi+V3i(0, 0, 0), 7 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.119522860933*h_inv[1]);
		ctx.coeff_A( 5, vi+V3i(0, 1, 0), 7 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(std::complex<double>(0.0, 0.12499999999999997)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.12499999999999997)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.19816636488030048)*ctx.evalScattering(0, 0, 0)[color_channel]*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.19816636488030048)*ctx.evalScattering(0, 0, 0)[color_channel]*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]);
		ctx.coeff_A( 5, vi+V3i(0, 0, 0), 3 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(std::complex<double>(0.0, 0.12499999999999997)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.12499999999999997)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.19816636488030048)*ctx.evalScattering(0, 0, 0)[color_channel]*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.19816636488030048)*ctx.evalScattering(0, 0, 0)[color_channel]*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]);
		ctx.coeff_A( 5, vi+V3i(0, 1, 0), 3 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(std::complex<double>(0.0, 0.12499999999999997)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.12499999999999997)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.19816636488030048)*ctx.evalScattering(0, 0, 0)[color_channel]*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.19816636488030048)*ctx.evalScattering(0, 0, 0)[color_channel]*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]);
		ctx.coeff_A( 5, vi+V3i(1, 0, 0), 3 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(std::complex<double>(0.0, 0.12499999999999997)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.12499999999999997)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.19816636488030048)*ctx.evalScattering(0, 0, 0)[color_channel]*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.19816636488030048)*ctx.evalScattering(0, 0, 0)[color_channel]*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]);
		ctx.coeff_A( 5, vi+V3i(1, 1, 0), 3 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.5*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(0.5*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.792665459521*ctx.evalScattering(0, 0, 0)[color_channel]*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]);
		c+=-(0.792665459521*ctx.evalScattering(0, 0, 0)[color_channel]*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]);
		ctx.coeff_A( 5, vi+V3i(0, 0, 0), 5 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(std::complex<double>(0.0, 0.4999999999999999)*ctx.evalEmission(2, -2, 0, 0, 0)[color_channel]);
		c+=(0.5*ctx.evalEmission(2, 2, 0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.4999999999999999)*ctx.evalEmission(2, -2, 0, 0, 0)[color_channel]);
		c+=(0.5*ctx.evalEmission(2, 2, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 5 ) += c.real();
	}
	// row=6 --------------------------
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.462910049886*h_inv[0]);
		ctx.coeff_A( 6, vi+V3i(0, 0, 0), 3 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.462910049886*h_inv[0]);
		ctx.coeff_A( 6, vi+V3i(1, 0, 0), 3 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.462910049886*h_inv[1]);
		ctx.coeff_A( 6, vi+V3i(0, -1, 0), 5 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.462910049886*h_inv[1]);
		ctx.coeff_A( 6, vi+V3i(0, 0, 0), 5 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.25*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(0.25*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(-0.25*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=-(-0.25*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.167481146423*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.167481146423*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.167481146423*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.167481146423*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.167481146423*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.167481146423*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.167481146423*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.167481146423*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 6, vi+V3i(0, 0, 0), 6 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 6, vi+V3i(0, -1, 0), 9 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 6, vi+V3i(0, 0, 0), 9 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 6, vi+V3i(1, -1, 0), 9 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 6, vi+V3i(1, 0, 0), 9 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.25*ctx.evalEmission(3, -3, 0, -1, 0)[color_channel]);
		c+=(0.25*ctx.evalEmission(3, -3, 0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.24999999999999994)*ctx.evalEmission(3, 3, 0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.24999999999999994)*ctx.evalEmission(3, 3, 0, 0, 0)[color_channel]);
		c+=-(-0.25*ctx.evalEmission(3, -3, 0, -1, 0)[color_channel]);
		c+=-(-0.25*ctx.evalEmission(3, -3, 0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.24999999999999994)*ctx.evalEmission(3, 3, 0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.24999999999999994)*ctx.evalEmission(3, 3, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 6 ) += c.real();
	}
	// row=7 --------------------------
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.119522860933*h_inv[0]);
		ctx.coeff_A( 7, vi+V3i(0, 0, 0), 3 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.119522860933*h_inv[0]);
		ctx.coeff_A( 7, vi+V3i(1, 0, 0), 3 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.119522860933*h_inv[1]);
		ctx.coeff_A( 7, vi+V3i(0, -1, 0), 5 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.119522860933*h_inv[1]);
		ctx.coeff_A( 7, vi+V3i(0, 0, 0), 5 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.414039335605*h_inv[1]);
		ctx.coeff_A( 7, vi+V3i(0, -1, 0), 4 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.414039335605*h_inv[1]);
		ctx.coeff_A( 7, vi+V3i(0, 0, 0), 4 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.25*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(0.25*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(-0.25*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=-(-0.25*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.167481146423*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.167481146423*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.167481146423*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.167481146423*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.167481146423*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.167481146423*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.167481146423*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.167481146423*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 7, vi+V3i(0, 0, 0), 7 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 7, vi+V3i(0, -1, 0), 8 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 7, vi+V3i(0, 0, 0), 8 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 7, vi+V3i(1, -1, 0), 8 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 7, vi+V3i(1, 0, 0), 8 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.25*ctx.evalEmission(3, -1, 0, -1, 0)[color_channel]);
		c+=(0.25*ctx.evalEmission(3, -1, 0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.24999999999999994)*ctx.evalEmission(3, 1, 0, -1, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.24999999999999994)*ctx.evalEmission(3, 1, 0, 0, 0)[color_channel]);
		c+=-(-0.25*ctx.evalEmission(3, -1, 0, -1, 0)[color_channel]);
		c+=-(-0.25*ctx.evalEmission(3, -1, 0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.24999999999999994)*ctx.evalEmission(3, 1, 0, -1, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.24999999999999994)*ctx.evalEmission(3, 1, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 7 ) += c.real();
	}
	// row=8 --------------------------
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.119522860933*h_inv[0]);
		ctx.coeff_A( 8, vi+V3i(-1, 0, 0), 5 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.119522860933*h_inv[0]);
		ctx.coeff_A( 8, vi+V3i(0, 0, 0), 5 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.414039335605*h_inv[0]);
		ctx.coeff_A( 8, vi+V3i(-1, 0, 0), 4 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.414039335605*h_inv[0]);
		ctx.coeff_A( 8, vi+V3i(0, 0, 0), 4 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.119522860933*h_inv[1]);
		ctx.coeff_A( 8, vi+V3i(0, 0, 0), 3 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.119522860933*h_inv[1]);
		ctx.coeff_A( 8, vi+V3i(0, 1, 0), 3 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 8, vi+V3i(-1, 0, 0), 7 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 8, vi+V3i(-1, 1, 0), 7 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 8, vi+V3i(0, 0, 0), 7 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 8, vi+V3i(0, 1, 0), 7 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.25*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(0.25*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(0.25*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(0.25*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.167481146423*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.167481146423*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.167481146423*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.167481146423*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.167481146423*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.167481146423*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.167481146423*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.167481146423*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 8, vi+V3i(0, 0, 0), 8 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(std::complex<double>(0.0, 0.24999999999999994)*ctx.evalEmission(3, -1, -1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.24999999999999994)*ctx.evalEmission(3, -1, 0, 0, 0)[color_channel]);
		c+=(0.25*ctx.evalEmission(3, 1, -1, 0, 0)[color_channel]);
		c+=(0.25*ctx.evalEmission(3, 1, 0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.24999999999999994)*ctx.evalEmission(3, -1, -1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.24999999999999994)*ctx.evalEmission(3, -1, 0, 0, 0)[color_channel]);
		c+=(0.25*ctx.evalEmission(3, 1, -1, 0, 0)[color_channel]);
		c+=(0.25*ctx.evalEmission(3, 1, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 8 ) += c.real();
	}
	// row=9 --------------------------
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.462910049886*h_inv[0]);
		ctx.coeff_A( 9, vi+V3i(-1, 0, 0), 5 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.462910049886*h_inv[0]);
		ctx.coeff_A( 9, vi+V3i(0, 0, 0), 5 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.462910049886*h_inv[1]);
		ctx.coeff_A( 9, vi+V3i(0, 0, 0), 3 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=-(0.462910049886*h_inv[1]);
		ctx.coeff_A( 9, vi+V3i(0, 1, 0), 3 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 9, vi+V3i(-1, 0, 0), 6 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 9, vi+V3i(-1, 1, 0), 6 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 9, vi+V3i(0, 0, 0), 6 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.062499999999999986)*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.04187028660566742)*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 9, vi+V3i(0, 1, 0), 6 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(0.25*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(0.25*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=(0.25*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(0.25*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.167481146423*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.167481146423*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.167481146423*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.167481146423*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.167481146423*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.167481146423*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.167481146423*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.167481146423*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 9, vi+V3i(0, 0, 0), 9 ) += c.real();
	}
	{
		std::complex<double> c(0.0, 0.0);
		c+=(std::complex<double>(0.0, 0.24999999999999994)*ctx.evalEmission(3, -3, -1, 0, 0)[color_channel]);
		c+=(std::complex<double>(0.0, 0.24999999999999994)*ctx.evalEmission(3, -3, 0, 0, 0)[color_channel]);
		c+=(0.25*ctx.evalEmission(3, 3, -1, 0, 0)[color_channel]);
		c+=(0.25*ctx.evalEmission(3, 3, 0, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.24999999999999994)*ctx.evalEmission(3, -3, -1, 0, 0)[color_channel]);
		c+=-(std::complex<double>(0.0, 0.24999999999999994)*ctx.evalEmission(3, -3, 0, 0, 0)[color_channel]);
		c+=(0.25*ctx.evalEmission(3, 3, -1, 0, 0)[color_channel]);
		c+=(0.25*ctx.evalEmission(3, 3, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 9 ) += c.real();
	}
}
V3i stencil2_fopn_p3_sg_get_offset(int coeff)
{
	switch(coeff)
	{
		case 0:return V3i(1, 1, 1);break;
		case 1:return V3i(1, 0, 1);break;
		case 2:return V3i(0, 1, 1);break;
		case 3:return V3i(0, 0, 1);break;
		case 4:return V3i(1, 1, 1);break;
		case 5:return V3i(1, 1, 1);break;
		case 6:return V3i(1, 0, 1);break;
		case 7:return V3i(1, 0, 1);break;
		case 8:return V3i(0, 1, 1);break;
		case 9:return V3i(0, 1, 1);break;
		default:throw std::runtime_error("unexpected coefficient index");break;
	};
}
REGISTER_STENCIL(stencil2_fopn_p3_sg, 3, 10, 1)

