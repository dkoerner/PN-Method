// This file was generated by stencil2.py on Friday, 16. February 2018 08:43PM

#include <PNSystem.h>

void stencil_p2_3d_cg(PNSystem::Stencil::Context& ctx)
{
	V3i vi = ctx.getVoxelCoord();
	V3d vd = vi.cast<double>();
	const Domain& domain = ctx.getDomain();
	const PNVolume& problem = ctx.getProblem();
	V3d h_inv( 1.0/(2*domain.getVoxelSize()[0]), 1.0/(2*domain.getVoxelSize()[1]), 1.0/(2*domain.getVoxelSize()[2]) );
	int color_channel = 0;

	// row=0 l=0 m=0 --------------------------
	ctx.coeff_A( 0, vi+V3i(-1, 0, 0), 3 ) += (0.57735026919*h_inv[0]);
	ctx.coeff_A( 0, vi+V3i(1, 0, 0), 3 ) += -(0.57735026919*h_inv[0]);
	ctx.coeff_A( 0, vi+V3i(0, -1, 0), 1 ) += (0.57735026919*h_inv[1]);
	ctx.coeff_A( 0, vi+V3i(0, 1, 0), 1 ) += -(0.57735026919*h_inv[1]);
	ctx.coeff_A( 0, vi+V3i(0, 0, -1), 2 ) += -(0.57735026919*h_inv[2]);
	ctx.coeff_A( 0, vi+V3i(0, 0, 1), 2 ) += (0.57735026919*h_inv[2]);
	{
		double c = 0.0;
		c+=ctx.evalExtinction(0, 0, 0)[color_channel];
		c+=-(3.54490770181*ctx.evalScattering(0, 0, 0)[color_channel]*ctx.evalPhase(0, 0, 0, 0, 0)[color_channel]);
		ctx.coeff_A( 0, vi+V3i(0, 0, 0), 0 ) += c;
	}
	{
		double c = 0.0;
		c+=ctx.evalEmission(0, 0, 0, 0, 0)[color_channel];
		ctx.coeff_b( 0 ) += c;
	}
	// row=1 l=1 m=-1 --------------------------
	ctx.coeff_A( 1, vi+V3i(0, -1, 0), 8 ) += -(0.4472135955*h_inv[1]);
	ctx.coeff_A( 1, vi+V3i(0, 1, 0), 8 ) += (0.4472135955*h_inv[1]);
	ctx.coeff_A( 1, vi+V3i(0, -1, 0), 0 ) += (0.57735026919*h_inv[1]);
	ctx.coeff_A( 1, vi+V3i(0, 1, 0), 0 ) += -(0.57735026919*h_inv[1]);
	ctx.coeff_A( 1, vi+V3i(0, -1, 0), 6 ) += -(0.258198889747*h_inv[1]);
	ctx.coeff_A( 1, vi+V3i(0, 1, 0), 6 ) += (0.258198889747*h_inv[1]);
	ctx.coeff_A( 1, vi+V3i(-1, 0, 0), 4 ) += (0.4472135955*h_inv[0]);
	ctx.coeff_A( 1, vi+V3i(1, 0, 0), 4 ) += -(0.4472135955*h_inv[0]);
	ctx.coeff_A( 1, vi+V3i(0, 0, -1), 5 ) += -(0.4472135955*h_inv[2]);
	ctx.coeff_A( 1, vi+V3i(0, 0, 1), 5 ) += (0.4472135955*h_inv[2]);
	{
		double c = 0.0;
		c+=ctx.evalExtinction(0, 0, 0)[color_channel];
		c+=-(2.04665341589*ctx.evalScattering(0, 0, 0)[color_channel]*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]);
		ctx.coeff_A( 1, vi+V3i(0, 0, 0), 1 ) += c;
	}
	{
		double c = 0.0;
		c+=ctx.evalEmission(1, -1, 0, 0, 0)[color_channel];
		ctx.coeff_b( 1 ) += c;
	}
	// row=2 l=1 m=0 --------------------------
	ctx.coeff_A( 2, vi+V3i(-1, 0, 0), 7 ) += (0.4472135955*h_inv[0]);
	ctx.coeff_A( 2, vi+V3i(1, 0, 0), 7 ) += -(0.4472135955*h_inv[0]);
	ctx.coeff_A( 2, vi+V3i(0, -1, 0), 5 ) += (0.4472135955*h_inv[1]);
	ctx.coeff_A( 2, vi+V3i(0, 1, 0), 5 ) += -(0.4472135955*h_inv[1]);
	ctx.coeff_A( 2, vi+V3i(0, 0, -1), 0 ) += -(0.57735026919*h_inv[2]);
	ctx.coeff_A( 2, vi+V3i(0, 0, 1), 0 ) += (0.57735026919*h_inv[2]);
	ctx.coeff_A( 2, vi+V3i(0, 0, -1), 6 ) += -(0.516397779494*h_inv[2]);
	ctx.coeff_A( 2, vi+V3i(0, 0, 1), 6 ) += (0.516397779494*h_inv[2]);
	{
		double c = 0.0;
		c+=ctx.evalExtinction(0, 0, 0)[color_channel];
		c+=-(2.04665341589*ctx.evalScattering(0, 0, 0)[color_channel]*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]);
		ctx.coeff_A( 2, vi+V3i(0, 0, 0), 2 ) += c;
	}
	{
		double c = 0.0;
		c+=ctx.evalEmission(1, 0, 0, 0, 0)[color_channel];
		ctx.coeff_b( 2 ) += c;
	}
	// row=3 l=1 m=1 --------------------------
	ctx.coeff_A( 3, vi+V3i(-1, 0, 0), 8 ) += (0.4472135955*h_inv[0]);
	ctx.coeff_A( 3, vi+V3i(1, 0, 0), 8 ) += -(0.4472135955*h_inv[0]);
	ctx.coeff_A( 3, vi+V3i(-1, 0, 0), 0 ) += (0.57735026919*h_inv[0]);
	ctx.coeff_A( 3, vi+V3i(1, 0, 0), 0 ) += -(0.57735026919*h_inv[0]);
	ctx.coeff_A( 3, vi+V3i(-1, 0, 0), 6 ) += -(0.258198889747*h_inv[0]);
	ctx.coeff_A( 3, vi+V3i(1, 0, 0), 6 ) += (0.258198889747*h_inv[0]);
	ctx.coeff_A( 3, vi+V3i(0, -1, 0), 4 ) += (0.4472135955*h_inv[1]);
	ctx.coeff_A( 3, vi+V3i(0, 1, 0), 4 ) += -(0.4472135955*h_inv[1]);
	ctx.coeff_A( 3, vi+V3i(0, 0, -1), 7 ) += -(0.4472135955*h_inv[2]);
	ctx.coeff_A( 3, vi+V3i(0, 0, 1), 7 ) += (0.4472135955*h_inv[2]);
	{
		double c = 0.0;
		c+=ctx.evalExtinction(0, 0, 0)[color_channel];
		c+=-(2.04665341589*ctx.evalScattering(0, 0, 0)[color_channel]*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]);
		ctx.coeff_A( 3, vi+V3i(0, 0, 0), 3 ) += c;
	}
	{
		double c = 0.0;
		c+=ctx.evalEmission(1, 1, 0, 0, 0)[color_channel];
		ctx.coeff_b( 3 ) += c;
	}
	// row=4 l=2 m=-2 --------------------------
	ctx.coeff_A( 4, vi+V3i(0, -1, 0), 3 ) += (0.4472135955*h_inv[1]);
	ctx.coeff_A( 4, vi+V3i(0, 1, 0), 3 ) += -(0.4472135955*h_inv[1]);
	ctx.coeff_A( 4, vi+V3i(-1, 0, 0), 1 ) += (0.4472135955*h_inv[0]);
	ctx.coeff_A( 4, vi+V3i(1, 0, 0), 1 ) += -(0.4472135955*h_inv[0]);
	{
		double c = 0.0;
		c+=ctx.evalExtinction(0, 0, 0)[color_channel];
		c+=-(1.58533091904*ctx.evalScattering(0, 0, 0)[color_channel]*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]);
		ctx.coeff_A( 4, vi+V3i(0, 0, 0), 4 ) += c;
	}
	{
		double c = 0.0;
		c+=ctx.evalEmission(2, -2, 0, 0, 0)[color_channel];
		ctx.coeff_b( 4 ) += c;
	}
	// row=5 l=2 m=-1 --------------------------
	ctx.coeff_A( 5, vi+V3i(0, -1, 0), 2 ) += (0.4472135955*h_inv[1]);
	ctx.coeff_A( 5, vi+V3i(0, 1, 0), 2 ) += -(0.4472135955*h_inv[1]);
	ctx.coeff_A( 5, vi+V3i(0, 0, -1), 1 ) += -(0.4472135955*h_inv[2]);
	ctx.coeff_A( 5, vi+V3i(0, 0, 1), 1 ) += (0.4472135955*h_inv[2]);
	{
		double c = 0.0;
		c+=ctx.evalExtinction(0, 0, 0)[color_channel];
		c+=-(1.58533091904*ctx.evalScattering(0, 0, 0)[color_channel]*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]);
		ctx.coeff_A( 5, vi+V3i(0, 0, 0), 5 ) += c;
	}
	{
		double c = 0.0;
		c+=ctx.evalEmission(2, -1, 0, 0, 0)[color_channel];
		ctx.coeff_b( 5 ) += c;
	}
	// row=6 l=2 m=0 --------------------------
	ctx.coeff_A( 6, vi+V3i(-1, 0, 0), 3 ) += -(0.258198889747*h_inv[0]);
	ctx.coeff_A( 6, vi+V3i(1, 0, 0), 3 ) += (0.258198889747*h_inv[0]);
	ctx.coeff_A( 6, vi+V3i(0, -1, 0), 1 ) += -(0.258198889747*h_inv[1]);
	ctx.coeff_A( 6, vi+V3i(0, 1, 0), 1 ) += (0.258198889747*h_inv[1]);
	ctx.coeff_A( 6, vi+V3i(0, 0, -1), 2 ) += -(0.516397779494*h_inv[2]);
	ctx.coeff_A( 6, vi+V3i(0, 0, 1), 2 ) += (0.516397779494*h_inv[2]);
	{
		double c = 0.0;
		c+=ctx.evalExtinction(0, 0, 0)[color_channel];
		c+=-(1.58533091904*ctx.evalScattering(0, 0, 0)[color_channel]*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]);
		ctx.coeff_A( 6, vi+V3i(0, 0, 0), 6 ) += c;
	}
	{
		double c = 0.0;
		c+=ctx.evalEmission(2, 0, 0, 0, 0)[color_channel];
		ctx.coeff_b( 6 ) += c;
	}
	// row=7 l=2 m=1 --------------------------
	ctx.coeff_A( 7, vi+V3i(-1, 0, 0), 2 ) += (0.4472135955*h_inv[0]);
	ctx.coeff_A( 7, vi+V3i(1, 0, 0), 2 ) += -(0.4472135955*h_inv[0]);
	ctx.coeff_A( 7, vi+V3i(0, 0, -1), 3 ) += -(0.4472135955*h_inv[2]);
	ctx.coeff_A( 7, vi+V3i(0, 0, 1), 3 ) += (0.4472135955*h_inv[2]);
	{
		double c = 0.0;
		c+=ctx.evalExtinction(0, 0, 0)[color_channel];
		c+=-(1.58533091904*ctx.evalScattering(0, 0, 0)[color_channel]*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]);
		ctx.coeff_A( 7, vi+V3i(0, 0, 0), 7 ) += c;
	}
	{
		double c = 0.0;
		c+=ctx.evalEmission(2, 1, 0, 0, 0)[color_channel];
		ctx.coeff_b( 7 ) += c;
	}
	// row=8 l=2 m=2 --------------------------
	ctx.coeff_A( 8, vi+V3i(-1, 0, 0), 3 ) += (0.4472135955*h_inv[0]);
	ctx.coeff_A( 8, vi+V3i(1, 0, 0), 3 ) += -(0.4472135955*h_inv[0]);
	ctx.coeff_A( 8, vi+V3i(0, -1, 0), 1 ) += -(0.4472135955*h_inv[1]);
	ctx.coeff_A( 8, vi+V3i(0, 1, 0), 1 ) += (0.4472135955*h_inv[1]);
	{
		double c = 0.0;
		c+=ctx.evalExtinction(0, 0, 0)[color_channel];
		c+=-(1.58533091904*ctx.evalScattering(0, 0, 0)[color_channel]*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]);
		ctx.coeff_A( 8, vi+V3i(0, 0, 0), 8 ) += c;
	}
	{
		double c = 0.0;
		c+=ctx.evalEmission(2, 2, 0, 0, 0)[color_channel];
		ctx.coeff_b( 8 ) += c;
	}
}
V3i stencil_p2_3d_cg_get_offset(int coeff)
{
	switch(coeff)
	{
		case 0:return V3i(1, 1, 1);break;
		case 1:return V3i(1, 1, 1);break;
		case 2:return V3i(1, 1, 1);break;
		case 3:return V3i(1, 1, 1);break;
		case 4:return V3i(1, 1, 1);break;
		case 5:return V3i(1, 1, 1);break;
		case 6:return V3i(1, 1, 1);break;
		case 7:return V3i(1, 1, 1);break;
		case 8:return V3i(1, 1, 1);break;
		default:throw std::runtime_error("unexpected coefficient index");break;
	};
}
REGISTER_STENCIL(stencil_p2_3d_cg, 2, 9, 1)
