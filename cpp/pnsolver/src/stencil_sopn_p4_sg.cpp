// This file was generated by stencil.py

#include <PNSystem.h>

void stencil_sopn_p4_sg(PNSystem::Stencil::Context& ctx)
{
	V3i vi = ctx.getVoxelCoord();
	V3d vd = vi.cast<double>();
	const Domain& domain = ctx.getDomain();
	const PNSystem::Fields& fields = ctx.getFields();
	V3d h_inv( 1.0/(1*domain.getVoxelSize()[0]), 1.0/(1*domain.getVoxelSize()[1]), 1.0/(1*domain.getVoxelSize()[2]) );

	Eigen::Matrix<std::complex<double>, 15, 15> S;
	S.coeffRef(0, 0) = std::complex<double>(1.0, 0.0);
	S.coeffRef(1, 1) = std::complex<double>(0.7071067811865475, 0.0);
	S.coeffRef(1, 2) = std::complex<double>(-0.7071067811865475, 0.0);
	S.coeffRef(2, 1) = std::complex<double>(-0.0, -0.7071067811865475);
	S.coeffRef(2, 2) = std::complex<double>(-0.0, -0.7071067811865475);
	S.coeffRef(3, 3) = std::complex<double>(0.7071067811865475, 0.0);
	S.coeffRef(3, 5) = std::complex<double>(0.7071067811865475, 0.0);
	S.coeffRef(4, 3) = std::complex<double>(-0.0, -0.7071067811865475);
	S.coeffRef(4, 5) = std::complex<double>(0.0, 0.7071067811865475);
	S.coeffRef(5, 4) = std::complex<double>(1.0, 0.0);
	S.coeffRef(6, 6) = std::complex<double>(0.7071067811865475, 0.0);
	S.coeffRef(6, 9) = std::complex<double>(-0.7071067811865475, 0.0);
	S.coeffRef(7, 6) = std::complex<double>(-0.0, -0.7071067811865475);
	S.coeffRef(7, 9) = std::complex<double>(-0.0, -0.7071067811865475);
	S.coeffRef(8, 7) = std::complex<double>(0.7071067811865475, 0.0);
	S.coeffRef(8, 8) = std::complex<double>(-0.7071067811865475, 0.0);
	S.coeffRef(9, 7) = std::complex<double>(-0.0, -0.7071067811865475);
	S.coeffRef(9, 8) = std::complex<double>(-0.0, -0.7071067811865475);
	S.coeffRef(10, 10) = std::complex<double>(0.7071067811865475, 0.0);
	S.coeffRef(10, 14) = std::complex<double>(0.7071067811865475, 0.0);
	S.coeffRef(11, 10) = std::complex<double>(-0.0, -0.7071067811865475);
	S.coeffRef(11, 14) = std::complex<double>(0.0, 0.7071067811865475);
	S.coeffRef(12, 11) = std::complex<double>(0.7071067811865475, 0.0);
	S.coeffRef(12, 13) = std::complex<double>(0.7071067811865475, 0.0);
	S.coeffRef(13, 11) = std::complex<double>(-0.0, -0.7071067811865475);
	S.coeffRef(13, 13) = std::complex<double>(0.0, 0.7071067811865475);
	S.coeffRef(14, 12) = std::complex<double>(1.0, 0.0);
	Eigen::Matrix<std::complex<double>, 15, 15> SInv;
	SInv.coeffRef(0, 0) = std::complex<double>(1.0, 0.0);
	SInv.coeffRef(1, 1) = std::complex<double>(0.7071067811865476, 0.0);
	SInv.coeffRef(1, 2) = std::complex<double>(0.0, 0.7071067811865476);
	SInv.coeffRef(2, 1) = std::complex<double>(-0.7071067811865476, 0.0);
	SInv.coeffRef(2, 2) = std::complex<double>(-0.0, 0.7071067811865476);
	SInv.coeffRef(3, 3) = std::complex<double>(0.7071067811865476, 0.0);
	SInv.coeffRef(3, 4) = std::complex<double>(0.0, 0.7071067811865476);
	SInv.coeffRef(4, 5) = std::complex<double>(1.0, 0.0);
	SInv.coeffRef(5, 3) = std::complex<double>(0.7071067811865476, 0.0);
	SInv.coeffRef(5, 4) = std::complex<double>(0.0, -0.7071067811865476);
	SInv.coeffRef(6, 6) = std::complex<double>(0.7071067811865476, 0.0);
	SInv.coeffRef(6, 7) = std::complex<double>(0.0, 0.7071067811865476);
	SInv.coeffRef(7, 8) = std::complex<double>(0.7071067811865476, 0.0);
	SInv.coeffRef(7, 9) = std::complex<double>(0.0, 0.7071067811865476);
	SInv.coeffRef(8, 8) = std::complex<double>(-0.7071067811865476, 0.0);
	SInv.coeffRef(8, 9) = std::complex<double>(-0.0, 0.7071067811865476);
	SInv.coeffRef(9, 6) = std::complex<double>(-0.7071067811865476, 0.0);
	SInv.coeffRef(9, 7) = std::complex<double>(-0.0, 0.7071067811865476);
	SInv.coeffRef(10, 10) = std::complex<double>(0.7071067811865476, 0.0);
	SInv.coeffRef(10, 11) = std::complex<double>(0.0, 0.7071067811865476);
	SInv.coeffRef(11, 12) = std::complex<double>(0.7071067811865476, 0.0);
	SInv.coeffRef(11, 13) = std::complex<double>(0.0, 0.7071067811865476);
	SInv.coeffRef(12, 14) = std::complex<double>(1.0, 0.0);
	SInv.coeffRef(13, 12) = std::complex<double>(0.7071067811865476, 0.0);
	SInv.coeffRef(13, 13) = std::complex<double>(0.0, -0.7071067811865476);
	SInv.coeffRef(14, 10) = std::complex<double>(0.7071067811865476, 0.0);
	SInv.coeffRef(14, 11) = std::complex<double>(0.0, -0.7071067811865476);

	//Producing complex-valued matrices =============
	//M_0dxdxL + M_1dxdyL + M_2dxdzL + M_3dydxL + M_4dydyL + M_5dydzL + M_6dzdxL + M_7dzdyL + M_8dzdzL + M_9L + M_10dxL + M_11dyL + M_12dzL = b

	//M_0 ---
	// is constant

	//M_1 ---
	// is constant

	//M_2 ---
	// all components vanish

	//M_3 ---
	// is constant

	//M_4 ---
	// is constant

	//M_5 ---
	// all components vanish

	//M_6 ---
	// all components vanish

	//M_7 ---
	// all components vanish

	//M_8 ---
	// is constant

	//M_9 ---
	Eigen::Matrix<double, 15, 15> M_9_real_staggered[4];
	for( int i=0;i<4;++i )
	{
		Eigen::Matrix<std::complex<double>, 15, 15> M_9;
		M_9(0, 0) = (std::pow(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))), 2)+
			-(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(0, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))));
		M_9(0, 1) = (-(0.408248290464*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.408248290463863)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(0.408248290464*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(0.408248290464*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.408248290463863)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(std::complex<double>(0.0, 0.408248290463863)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(0, 2) = ((0.408248290464*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.408248290463863)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.408248290464*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(0.408248290464*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.408248290463863)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(std::complex<double>(0.0, 0.408248290463863)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(1, 0) = (-(0.408248290464*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.408248290463863)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(0.408248290464*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(0, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(0.408248290464*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(0, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(0, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.408248290463863)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(0, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(std::complex<double>(0.0, 0.408248290463863)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(0, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(0, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(1, 1) = (std::pow(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))), 2)+
			-(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))));
		M_9(1, 3) = (-(0.4472135955*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.4472135954999579)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(0.4472135955*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(0.4472135955*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.4472135954999579)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(std::complex<double>(0.0, 0.4472135954999579)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(1, 4) = ((0.182574185835*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.18257418583505536)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.182574185835*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(0.182574185835*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.18257418583505536)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(std::complex<double>(0.0, 0.18257418583505536)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(2, 0) = ((0.408248290464*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.408248290463863)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.408248290464*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(0, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(0.408248290464*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(0, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(0, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.408248290463863)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(0, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(std::complex<double>(0.0, 0.408248290463863)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(0, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(0, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(2, 2) = (std::pow(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))), 2)+
			-(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))));
		M_9(2, 4) = (-(0.182574185835*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.18257418583505536)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(0.182574185835*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(0.182574185835*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.18257418583505536)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(std::complex<double>(0.0, 0.18257418583505536)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(2, 5) = ((0.4472135955*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.4472135954999579)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.4472135955*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(0.4472135955*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.4472135954999579)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(std::complex<double>(0.0, 0.4472135954999579)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(3, 1) = (-(0.4472135955*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.4472135954999579)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(0.4472135955*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(0.4472135955*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.4472135954999579)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(std::complex<double>(0.0, 0.4472135954999579)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(3, 3) = (std::pow(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))), 2)+
			-(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))));
		M_9(3, 6) = (-(0.462910049886*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.4629100498862757)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(0.462910049886*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(0.462910049886*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.4629100498862757)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(std::complex<double>(0.0, 0.4629100498862757)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(3, 7) = ((0.119522860933*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.11952286093343936)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.119522860933*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(0.119522860933*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.11952286093343936)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(std::complex<double>(0.0, 0.11952286093343936)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(4, 1) = ((0.182574185835*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.18257418583505536)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.182574185835*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(0.182574185835*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.18257418583505536)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(std::complex<double>(0.0, 0.18257418583505536)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(4, 2) = (-(0.182574185835*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.18257418583505536)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(0.182574185835*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(0.182574185835*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.18257418583505536)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(std::complex<double>(0.0, 0.18257418583505536)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(4, 4) = (std::pow(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))), 2)+
			-(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))));
		M_9(4, 7) = (-(0.292770021885*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.29277002188455997)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(0.292770021885*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(0.292770021885*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.29277002188455997)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(std::complex<double>(0.0, 0.29277002188455997)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(4, 8) = ((0.292770021885*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.29277002188455997)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.292770021885*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(0.292770021885*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.29277002188455997)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(std::complex<double>(0.0, 0.29277002188455997)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(5, 2) = ((0.4472135955*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.4472135954999579)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.4472135955*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(0.4472135955*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.4472135954999579)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(std::complex<double>(0.0, 0.4472135954999579)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(5, 5) = (std::pow(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))), 2)+
			-(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))));
		M_9(5, 8) = (-(0.119522860933*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.11952286093343936)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(0.119522860933*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(0.119522860933*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.11952286093343936)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(std::complex<double>(0.0, 0.11952286093343936)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(5, 9) = ((0.462910049886*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.4629100498862757)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.462910049886*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(0.462910049886*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.4629100498862757)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(std::complex<double>(0.0, 0.4629100498862757)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(6, 3) = (-(0.462910049886*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.4629100498862757)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(0.462910049886*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(0.462910049886*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.4629100498862757)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(std::complex<double>(0.0, 0.4629100498862757)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(6, 6) = (std::pow(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))), 2)+
			-(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))));
		M_9(6, 10) = (-(0.471404520791*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.4714045207910317)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(0.471404520791*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(0.471404520791*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.4714045207910317)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(std::complex<double>(0.0, 0.4714045207910317)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(6, 11) = ((0.0890870806375*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.0890870806374748)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.0890870806375*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(0.0890870806375*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.0890870806374748)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(std::complex<double>(0.0, 0.0890870806374748)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(7, 3) = ((0.119522860933*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.11952286093343936)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.119522860933*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(0.119522860933*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.11952286093343936)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(std::complex<double>(0.0, 0.11952286093343936)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(7, 4) = (-(0.292770021885*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.29277002188455997)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(0.292770021885*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(0.292770021885*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.29277002188455997)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(std::complex<double>(0.0, 0.29277002188455997)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(7, 7) = (std::pow(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))), 2)+
			-(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))));
		M_9(7, 11) = (-(0.345032779671*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.3450327796711771)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(0.345032779671*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(0.345032779671*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.3450327796711771)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(std::complex<double>(0.0, 0.3450327796711771)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(7, 12) = ((0.218217890236*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.21821789023599236)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.218217890236*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(0.218217890236*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.21821789023599236)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(std::complex<double>(0.0, 0.21821789023599236)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(8, 4) = ((0.292770021885*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.29277002188455997)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.292770021885*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(0.292770021885*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.29277002188455997)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(std::complex<double>(0.0, 0.29277002188455997)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(8, 5) = (-(0.119522860933*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.11952286093343936)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(0.119522860933*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(0.119522860933*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.11952286093343936)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(std::complex<double>(0.0, 0.11952286093343936)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(8, 8) = (std::pow(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))), 2)+
			-(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))));
		M_9(8, 12) = (-(0.218217890236*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.21821789023599236)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(0.218217890236*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(0.218217890236*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.21821789023599236)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(std::complex<double>(0.0, 0.21821789023599236)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(8, 13) = ((0.345032779671*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.3450327796711771)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.345032779671*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(0.345032779671*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.3450327796711771)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(std::complex<double>(0.0, 0.3450327796711771)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(9, 5) = ((0.462910049886*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.4629100498862757)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.462910049886*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(0.462910049886*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.4629100498862757)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(std::complex<double>(0.0, 0.4629100498862757)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(9, 9) = (std::pow(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))), 2)+
			-(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))));
		M_9(9, 13) = (-(0.0890870806375*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.0890870806374748)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(0.0890870806375*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(0.0890870806375*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.0890870806374748)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(std::complex<double>(0.0, 0.0890870806374748)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(9, 14) = ((0.471404520791*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.4714045207910317)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.471404520791*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(0.471404520791*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.4714045207910317)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(std::complex<double>(0.0, 0.4714045207910317)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(10, 6) = (-(0.471404520791*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.4714045207910317)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(0.471404520791*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(0.471404520791*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.4714045207910317)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(std::complex<double>(0.0, 0.4714045207910317)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(10, 10) = (std::pow(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))), 2)+
			-(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))));
		M_9(11, 6) = ((0.0890870806375*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.0890870806374748)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.0890870806375*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(0.0890870806375*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.0890870806374748)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(std::complex<double>(0.0, 0.0890870806374748)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(11, 7) = (-(0.345032779671*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.3450327796711771)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(0.345032779671*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(0.345032779671*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.3450327796711771)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(std::complex<double>(0.0, 0.3450327796711771)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(11, 11) = (std::pow(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))), 2)+
			-(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))));
		M_9(12, 7) = ((0.218217890236*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.21821789023599236)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.218217890236*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(0.218217890236*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.21821789023599236)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(std::complex<double>(0.0, 0.21821789023599236)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(12, 8) = (-(0.218217890236*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.21821789023599236)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(0.218217890236*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(0.218217890236*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.21821789023599236)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(std::complex<double>(0.0, 0.21821789023599236)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(12, 12) = (std::pow(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))), 2)+
			-(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))));
		M_9(13, 8) = ((0.345032779671*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.3450327796711771)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.345032779671*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(0.345032779671*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.3450327796711771)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(std::complex<double>(0.0, 0.3450327796711771)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(13, 9) = (-(0.0890870806375*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.0890870806374748)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(0.0890870806375*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(0.0890870806375*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.0890870806374748)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(std::complex<double>(0.0, 0.0890870806374748)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(13, 13) = (std::pow(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))), 2)+
			-(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))));
		M_9(14, 9) = ((0.471404520791*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.4714045207910317)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.471404520791*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			-(0.471404520791*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[0]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.4714045207910317)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))+
			(std::complex<double>(0.0, 0.4714045207910317)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*((-h_inv[1]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))))));
		M_9(14, 14) = (std::pow(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i))), 2)+
			-(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))));
		M_9_real_staggered[i] = (S*M_9*SInv).real();
	}
	Eigen::Matrix<double, 15, 15> M_9_real;
	M_9_real.row(0) = M_9_real_staggered[2].row(0);
	M_9_real.row(1) = M_9_real_staggered[3].row(1);
	M_9_real.row(2) = M_9_real_staggered[1].row(2);
	M_9_real.row(3) = M_9_real_staggered[2].row(3);
	M_9_real.row(4) = M_9_real_staggered[0].row(4);
	M_9_real.row(5) = M_9_real_staggered[2].row(5);
	M_9_real.row(6) = M_9_real_staggered[3].row(6);
	M_9_real.row(7) = M_9_real_staggered[1].row(7);
	M_9_real.row(8) = M_9_real_staggered[3].row(8);
	M_9_real.row(9) = M_9_real_staggered[1].row(9);
	M_9_real.row(10) = M_9_real_staggered[2].row(10);
	M_9_real.row(11) = M_9_real_staggered[0].row(11);
	M_9_real.row(12) = M_9_real_staggered[2].row(12);
	M_9_real.row(13) = M_9_real_staggered[0].row(13);
	M_9_real.row(14) = M_9_real_staggered[2].row(14);

	//M_10 ---
	Eigen::Matrix<double, 15, 15> M_10_real_staggered[4];
	for( int i=0;i<4;++i )
	{
		Eigen::Matrix<std::complex<double>, 15, 15> M_10;
		M_10(0, 1) = (0.408248290464*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(0, 2) = -(0.408248290464*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(1, 0) = (0.408248290464*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(0, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(1, 3) = (0.4472135955*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(1, 4) = -(0.182574185835*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(2, 0) = -(0.408248290464*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(0, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(2, 4) = (0.182574185835*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(2, 5) = -(0.4472135955*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(3, 1) = (0.4472135955*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(3, 6) = (0.462910049886*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(3, 7) = -(0.119522860933*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(4, 1) = -(0.182574185835*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(4, 2) = (0.182574185835*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(4, 7) = (0.292770021885*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(4, 8) = -(0.292770021885*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(5, 2) = -(0.4472135955*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(5, 8) = (0.119522860933*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(5, 9) = -(0.462910049886*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(6, 3) = (0.462910049886*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(6, 10) = (0.471404520791*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(6, 11) = -(0.0890870806375*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(7, 3) = -(0.119522860933*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(7, 4) = (0.292770021885*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(7, 11) = (0.345032779671*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(7, 12) = -(0.218217890236*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(8, 4) = -(0.292770021885*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(8, 5) = (0.119522860933*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(8, 12) = (0.218217890236*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(8, 13) = -(0.345032779671*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(9, 5) = -(0.462910049886*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(9, 13) = (0.0890870806375*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(9, 14) = -(0.471404520791*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(10, 6) = (0.471404520791*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(11, 6) = -(0.0890870806375*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(11, 7) = (0.345032779671*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(12, 7) = -(0.218217890236*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(12, 8) = (0.218217890236*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(13, 8) = -(0.345032779671*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(13, 9) = (0.0890870806375*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10(14, 9) = -(0.471404520791*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_10_real_staggered[i] = (S*M_10*SInv).real();
	}
	Eigen::Matrix<double, 15, 15> M_10_real;
	M_10_real.row(0) = M_10_real_staggered[2].row(0);
	M_10_real.row(1) = M_10_real_staggered[3].row(1);
	M_10_real.row(2) = M_10_real_staggered[1].row(2);
	M_10_real.row(3) = M_10_real_staggered[2].row(3);
	M_10_real.row(4) = M_10_real_staggered[0].row(4);
	M_10_real.row(5) = M_10_real_staggered[2].row(5);
	M_10_real.row(6) = M_10_real_staggered[3].row(6);
	M_10_real.row(7) = M_10_real_staggered[1].row(7);
	M_10_real.row(8) = M_10_real_staggered[3].row(8);
	M_10_real.row(9) = M_10_real_staggered[1].row(9);
	M_10_real.row(10) = M_10_real_staggered[2].row(10);
	M_10_real.row(11) = M_10_real_staggered[0].row(11);
	M_10_real.row(12) = M_10_real_staggered[2].row(12);
	M_10_real.row(13) = M_10_real_staggered[0].row(13);
	M_10_real.row(14) = M_10_real_staggered[2].row(14);

	//M_11 ---
	Eigen::Matrix<double, 15, 15> M_11_real_staggered[4];
	for( int i=0;i<4;++i )
	{
		Eigen::Matrix<std::complex<double>, 15, 15> M_11;
		M_11(0, 1) = -(std::complex<double>(0.0, 0.408248290463863)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(0, 2) = -(std::complex<double>(0.0, 0.408248290463863)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(1, 0) = (std::complex<double>(0.0, 0.408248290463863)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(0, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(1, 3) = -(std::complex<double>(0.0, 0.4472135954999579)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(1, 4) = -(std::complex<double>(0.0, 0.18257418583505536)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(2, 0) = (std::complex<double>(0.0, 0.408248290463863)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(0, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(2, 4) = -(std::complex<double>(0.0, 0.18257418583505536)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(2, 5) = -(std::complex<double>(0.0, 0.4472135954999579)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(3, 1) = (std::complex<double>(0.0, 0.4472135954999579)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(3, 6) = -(std::complex<double>(0.0, 0.4629100498862757)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(3, 7) = -(std::complex<double>(0.0, 0.11952286093343936)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(4, 1) = (std::complex<double>(0.0, 0.18257418583505536)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(4, 2) = (std::complex<double>(0.0, 0.18257418583505536)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(4, 7) = -(std::complex<double>(0.0, 0.29277002188455997)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(4, 8) = -(std::complex<double>(0.0, 0.29277002188455997)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(5, 2) = (std::complex<double>(0.0, 0.4472135954999579)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(5, 8) = -(std::complex<double>(0.0, 0.11952286093343936)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(5, 9) = -(std::complex<double>(0.0, 0.4629100498862757)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(6, 3) = (std::complex<double>(0.0, 0.4629100498862757)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(6, 10) = -(std::complex<double>(0.0, 0.4714045207910317)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(6, 11) = -(std::complex<double>(0.0, 0.0890870806374748)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(7, 3) = (std::complex<double>(0.0, 0.11952286093343936)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(7, 4) = (std::complex<double>(0.0, 0.29277002188455997)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(7, 11) = -(std::complex<double>(0.0, 0.3450327796711771)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(7, 12) = -(std::complex<double>(0.0, 0.21821789023599236)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(8, 4) = (std::complex<double>(0.0, 0.29277002188455997)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(8, 5) = (std::complex<double>(0.0, 0.11952286093343936)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(8, 12) = -(std::complex<double>(0.0, 0.21821789023599236)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(8, 13) = -(std::complex<double>(0.0, 0.3450327796711771)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(9, 5) = (std::complex<double>(0.0, 0.4629100498862757)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(9, 13) = -(std::complex<double>(0.0, 0.0890870806374748)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(9, 14) = -(std::complex<double>(0.0, 0.4714045207910317)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(10, 6) = (std::complex<double>(0.0, 0.4714045207910317)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(11, 6) = (std::complex<double>(0.0, 0.0890870806374748)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(11, 7) = (std::complex<double>(0.0, 0.3450327796711771)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(12, 7) = (std::complex<double>(0.0, 0.21821789023599236)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(12, 8) = (std::complex<double>(0.0, 0.21821789023599236)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(13, 8) = (std::complex<double>(0.0, 0.3450327796711771)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(13, 9) = (std::complex<double>(0.0, 0.0890870806374748)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11(14, 9) = (std::complex<double>(0.0, 0.4714045207910317)*fields.sigma_s->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.f_p->eval(3, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))));
		M_11_real_staggered[i] = (S*M_11*SInv).real();
	}
	Eigen::Matrix<double, 15, 15> M_11_real;
	M_11_real.row(0) = M_11_real_staggered[2].row(0);
	M_11_real.row(1) = M_11_real_staggered[3].row(1);
	M_11_real.row(2) = M_11_real_staggered[1].row(2);
	M_11_real.row(3) = M_11_real_staggered[2].row(3);
	M_11_real.row(4) = M_11_real_staggered[0].row(4);
	M_11_real.row(5) = M_11_real_staggered[2].row(5);
	M_11_real.row(6) = M_11_real_staggered[3].row(6);
	M_11_real.row(7) = M_11_real_staggered[1].row(7);
	M_11_real.row(8) = M_11_real_staggered[3].row(8);
	M_11_real.row(9) = M_11_real_staggered[1].row(9);
	M_11_real.row(10) = M_11_real_staggered[2].row(10);
	M_11_real.row(11) = M_11_real_staggered[0].row(11);
	M_11_real.row(12) = M_11_real_staggered[2].row(12);
	M_11_real.row(13) = M_11_real_staggered[0].row(13);
	M_11_real.row(14) = M_11_real_staggered[2].row(14);

	//M_12 ---
	// all components vanish

	//b ---
	Eigen::Matrix<double, 15, 1> b_real_staggered[4];
	for( int i=0;i<4;++i )
	{
		Eigen::Matrix<std::complex<double>, 15, 1> b;
		b(0, 0) = (-(0.408248290464*((-h_inv[0]*fields.q->eval(1, -1, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(1, -1, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(0.408248290464*((-h_inv[0]*fields.q->eval(1, 1, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(1, 1, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.408248290463863)*((-h_inv[1]*fields.q->eval(1, -1, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(1, -1, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.408248290463863)*((-h_inv[1]*fields.q->eval(1, 1, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(1, 1, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.q->eval(0, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))));
		b(1, 0) = (-(0.4472135955*((-h_inv[0]*fields.q->eval(2, -2, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(2, -2, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.408248290464*((-h_inv[0]*fields.q->eval(0, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(0, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(0.182574185835*((-h_inv[0]*fields.q->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.4472135954999579)*((-h_inv[1]*fields.q->eval(2, -2, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(2, -2, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.408248290463863)*((-h_inv[1]*fields.q->eval(0, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(0, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.18257418583505536)*((-h_inv[1]*fields.q->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.q->eval(1, -1, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))));
		b(2, 0) = ((0.408248290464*((-h_inv[0]*fields.q->eval(0, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(0, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.182574185835*((-h_inv[0]*fields.q->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(0.4472135955*((-h_inv[0]*fields.q->eval(2, 2, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(2, 2, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.408248290463863)*((-h_inv[1]*fields.q->eval(0, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(0, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.18257418583505536)*((-h_inv[1]*fields.q->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.4472135954999579)*((-h_inv[1]*fields.q->eval(2, 2, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(2, 2, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.q->eval(1, 1, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))));
		b(3, 0) = (-(0.462910049886*((-h_inv[0]*fields.q->eval(3, -3, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(3, -3, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.4472135955*((-h_inv[0]*fields.q->eval(1, -1, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(1, -1, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(0.119522860933*((-h_inv[0]*fields.q->eval(3, -1, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(3, -1, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.4629100498862757)*((-h_inv[1]*fields.q->eval(3, -3, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(3, -3, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.4472135954999579)*((-h_inv[1]*fields.q->eval(1, -1, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(1, -1, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.11952286093343936)*((-h_inv[1]*fields.q->eval(3, -1, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(3, -1, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.q->eval(2, -2, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))));
		b(4, 0) = ((0.182574185835*((-h_inv[0]*fields.q->eval(1, -1, domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(1, -1, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.292770021885*((-h_inv[0]*fields.q->eval(3, -1, domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(3, -1, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.182574185835*((-h_inv[0]*fields.q->eval(1, 1, domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(1, 1, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(0.292770021885*((-h_inv[0]*fields.q->eval(3, 1, domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(3, 1, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.18257418583505536)*((-h_inv[1]*fields.q->eval(1, -1, domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(1, -1, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.29277002188455997)*((-h_inv[1]*fields.q->eval(3, -1, domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(3, -1, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.18257418583505536)*((-h_inv[1]*fields.q->eval(1, 1, domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(1, 1, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.29277002188455997)*((-h_inv[1]*fields.q->eval(3, 1, domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(3, 1, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.q->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))));
		b(5, 0) = ((0.4472135955*((-h_inv[0]*fields.q->eval(1, 1, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(1, 1, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.119522860933*((-h_inv[0]*fields.q->eval(3, 1, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(3, 1, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(0.462910049886*((-h_inv[0]*fields.q->eval(3, 3, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(3, 3, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.4472135954999579)*((-h_inv[1]*fields.q->eval(1, 1, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(1, 1, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.11952286093343936)*((-h_inv[1]*fields.q->eval(3, 1, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(3, 1, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.4629100498862757)*((-h_inv[1]*fields.q->eval(3, 3, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(3, 3, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.q->eval(2, 2, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))));
		b(6, 0) = (-(0.471404520791*((-h_inv[0]*fields.q->eval(4, -4, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(4, -4, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.462910049886*((-h_inv[0]*fields.q->eval(2, -2, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(2, -2, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(0.0890870806375*((-h_inv[0]*fields.q->eval(4, -2, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(4, -2, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.4714045207910317)*((-h_inv[1]*fields.q->eval(4, -4, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(4, -4, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.4629100498862757)*((-h_inv[1]*fields.q->eval(2, -2, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(2, -2, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.0890870806374748)*((-h_inv[1]*fields.q->eval(4, -2, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(4, -2, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.q->eval(3, -3, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))));
		b(7, 0) = ((0.119522860933*((-h_inv[0]*fields.q->eval(2, -2, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(2, -2, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.345032779671*((-h_inv[0]*fields.q->eval(4, -2, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(4, -2, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.292770021885*((-h_inv[0]*fields.q->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(0.218217890236*((-h_inv[0]*fields.q->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.11952286093343936)*((-h_inv[1]*fields.q->eval(2, -2, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(2, -2, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.3450327796711771)*((-h_inv[1]*fields.q->eval(4, -2, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(4, -2, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.29277002188455997)*((-h_inv[1]*fields.q->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.21821789023599236)*((-h_inv[1]*fields.q->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.q->eval(3, -1, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))));
		b(8, 0) = ((0.292770021885*((-h_inv[0]*fields.q->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.218217890236*((-h_inv[0]*fields.q->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.119522860933*((-h_inv[0]*fields.q->eval(2, 2, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(2, 2, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(0.345032779671*((-h_inv[0]*fields.q->eval(4, 2, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(4, 2, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.29277002188455997)*((-h_inv[1]*fields.q->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(2, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.21821789023599236)*((-h_inv[1]*fields.q->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.11952286093343936)*((-h_inv[1]*fields.q->eval(2, 2, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(2, 2, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.3450327796711771)*((-h_inv[1]*fields.q->eval(4, 2, domain.voxelToWorld(vd+ctx.getGridOffset2(3)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(4, 2, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.q->eval(3, 1, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))));
		b(9, 0) = ((0.462910049886*((-h_inv[0]*fields.q->eval(2, 2, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(2, 2, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.0890870806375*((-h_inv[0]*fields.q->eval(4, 2, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(4, 2, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(0.471404520791*((-h_inv[0]*fields.q->eval(4, 4, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(4, 4, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.4629100498862757)*((-h_inv[1]*fields.q->eval(2, 2, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(2, 2, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.0890870806374748)*((-h_inv[1]*fields.q->eval(4, 2, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(4, 2, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(std::complex<double>(0.0, 0.4714045207910317)*((-h_inv[1]*fields.q->eval(4, 4, domain.voxelToWorld(vd+ctx.getGridOffset2(1)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(4, 4, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.q->eval(3, 3, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))));
		b(10, 0) = (-(0.471404520791*((-h_inv[0]*fields.q->eval(3, -3, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(3, -3, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.4714045207910317)*((-h_inv[1]*fields.q->eval(3, -3, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(3, -3, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.q->eval(4, -4, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))));
		b(11, 0) = ((0.0890870806375*((-h_inv[0]*fields.q->eval(3, -3, domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(3, -3, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.345032779671*((-h_inv[0]*fields.q->eval(3, -1, domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(3, -1, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.0890870806374748)*((-h_inv[1]*fields.q->eval(3, -3, domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(3, -3, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.3450327796711771)*((-h_inv[1]*fields.q->eval(3, -1, domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(3, -1, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.q->eval(4, -2, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))));
		b(12, 0) = ((0.218217890236*((-h_inv[0]*fields.q->eval(3, -1, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(3, -1, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.218217890236*((-h_inv[0]*fields.q->eval(3, 1, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(3, 1, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.21821789023599236)*((-h_inv[1]*fields.q->eval(3, -1, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(3, -1, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.21821789023599236)*((-h_inv[1]*fields.q->eval(3, 1, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(3, 1, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.q->eval(4, 0, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))));
		b(13, 0) = ((0.345032779671*((-h_inv[0]*fields.q->eval(3, 1, domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(3, 1, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(0.0890870806375*((-h_inv[0]*fields.q->eval(3, 3, domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(3, 3, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.3450327796711771)*((-h_inv[1]*fields.q->eval(3, 1, domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(3, 1, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.0890870806374748)*((-h_inv[1]*fields.q->eval(3, 3, domain.voxelToWorld(vd+ctx.getGridOffset2(0)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(3, 3, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.q->eval(4, 2, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))));
		b(14, 0) = ((0.471404520791*((-h_inv[0]*fields.q->eval(3, 3, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(-0.5, 0.0, 0.0))))+
			(h_inv[0]*fields.q->eval(3, 3, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			-(std::complex<double>(0.0, 0.4714045207910317)*((-h_inv[1]*fields.q->eval(3, 3, domain.voxelToWorld(vd+ctx.getGridOffset2(2)+V3d(0.0, -0.5, 0.0))))+
			(h_inv[1]*fields.q->eval(3, 3, domain.voxelToWorld(vd+ctx.getGridOffset2(i))))))+
			(fields.sigma_t->eval(domain.voxelToWorld(vd+ctx.getGridOffset2(i)))*fields.q->eval(4, 4, domain.voxelToWorld(vd+ctx.getGridOffset2(i)))));
		b_real_staggered[i] = (S*b).real();
	}
	Eigen::Matrix<double, 15, 1> b_real;
	b_real.row(0) = b_real_staggered[2].row(0);
	b_real.row(1) = b_real_staggered[3].row(1);
	b_real.row(2) = b_real_staggered[1].row(2);
	b_real.row(3) = b_real_staggered[2].row(3);
	b_real.row(4) = b_real_staggered[0].row(4);
	b_real.row(5) = b_real_staggered[2].row(5);
	b_real.row(6) = b_real_staggered[3].row(6);
	b_real.row(7) = b_real_staggered[1].row(7);
	b_real.row(8) = b_real_staggered[3].row(8);
	b_real.row(9) = b_real_staggered[1].row(9);
	b_real.row(10) = b_real_staggered[2].row(10);
	b_real.row(11) = b_real_staggered[0].row(11);
	b_real.row(12) = b_real_staggered[2].row(12);
	b_real.row(13) = b_real_staggered[0].row(13);
	b_real.row(14) = b_real_staggered[2].row(14);

	// Assembling global system =============
	ctx.coeff_A( 0, vi + V3i(-1,0,0), 0 ) += (h_inv[0]*h_inv[0]*-0.333333333333);
	ctx.coeff_A( 0, vi + V3i(0,0,0), 0 ) += -(h_inv[0]*h_inv[0]*-0.333333333333);
	ctx.coeff_A( 0, vi + V3i(0,0,0), 0 ) += -(h_inv[0]*h_inv[0]*-0.333333333333);
	ctx.coeff_A( 0, vi + V3i(1,0,0), 0 ) += (h_inv[0]*h_inv[0]*-0.333333333333);
	ctx.coeff_A( 3, vi + V3i(-1,0,0), 0 ) += (h_inv[0]*h_inv[0]*-0.258198889747);
	ctx.coeff_A( 3, vi + V3i(0,0,0), 0 ) += -(h_inv[0]*h_inv[0]*-0.258198889747);
	ctx.coeff_A( 3, vi + V3i(0,0,0), 0 ) += -(h_inv[0]*h_inv[0]*-0.258198889747);
	ctx.coeff_A( 3, vi + V3i(1,0,0), 0 ) += (h_inv[0]*h_inv[0]*-0.258198889747);
	ctx.coeff_A( 5, vi + V3i(-1,0,0), 0 ) += (h_inv[0]*h_inv[0]*0.1490711985);
	ctx.coeff_A( 5, vi + V3i(0,0,0), 0 ) += -(h_inv[0]*h_inv[0]*0.1490711985);
	ctx.coeff_A( 5, vi + V3i(0,0,0), 0 ) += -(h_inv[0]*h_inv[0]*0.1490711985);
	ctx.coeff_A( 5, vi + V3i(1,0,0), 0 ) += (h_inv[0]*h_inv[0]*0.1490711985);
	ctx.coeff_A( 1, vi + V3i(-1,0,0), 1 ) += (h_inv[0]*h_inv[0]*-0.6);
	ctx.coeff_A( 1, vi + V3i(0,0,0), 1 ) += -(h_inv[0]*h_inv[0]*-0.6);
	ctx.coeff_A( 1, vi + V3i(0,0,0), 1 ) += -(h_inv[0]*h_inv[0]*-0.6);
	ctx.coeff_A( 1, vi + V3i(1,0,0), 1 ) += (h_inv[0]*h_inv[0]*-0.6);
	ctx.coeff_A( 6, vi + V3i(-1,0,0), 1 ) += (h_inv[0]*h_inv[0]*-0.207019667803);
	ctx.coeff_A( 6, vi + V3i(0,0,0), 1 ) += -(h_inv[0]*h_inv[0]*-0.207019667803);
	ctx.coeff_A( 6, vi + V3i(0,0,0), 1 ) += -(h_inv[0]*h_inv[0]*-0.207019667803);
	ctx.coeff_A( 6, vi + V3i(1,0,0), 1 ) += (h_inv[0]*h_inv[0]*-0.207019667803);
	ctx.coeff_A( 8, vi + V3i(-1,0,0), 1 ) += (h_inv[0]*h_inv[0]*0.160356745147);
	ctx.coeff_A( 8, vi + V3i(0,0,0), 1 ) += -(h_inv[0]*h_inv[0]*0.160356745147);
	ctx.coeff_A( 8, vi + V3i(0,0,0), 1 ) += -(h_inv[0]*h_inv[0]*0.160356745147);
	ctx.coeff_A( 8, vi + V3i(1,0,0), 1 ) += (h_inv[0]*h_inv[0]*0.160356745147);
	ctx.coeff_A( 2, vi + V3i(-1,0,0), 2 ) += (h_inv[0]*h_inv[0]*-0.2);
	ctx.coeff_A( 2, vi + V3i(0,0,0), 2 ) += -(h_inv[0]*h_inv[0]*-0.2);
	ctx.coeff_A( 2, vi + V3i(0,0,0), 2 ) += -(h_inv[0]*h_inv[0]*-0.2);
	ctx.coeff_A( 2, vi + V3i(1,0,0), 2 ) += (h_inv[0]*h_inv[0]*-0.2);
	ctx.coeff_A( 7, vi + V3i(-1,0,0), 2 ) += (h_inv[0]*h_inv[0]*-0.207019667803);
	ctx.coeff_A( 7, vi + V3i(0,0,0), 2 ) += -(h_inv[0]*h_inv[0]*-0.207019667803);
	ctx.coeff_A( 7, vi + V3i(0,0,0), 2 ) += -(h_inv[0]*h_inv[0]*-0.207019667803);
	ctx.coeff_A( 7, vi + V3i(1,0,0), 2 ) += (h_inv[0]*h_inv[0]*-0.207019667803);
	ctx.coeff_A( 9, vi + V3i(-1,0,0), 2 ) += (h_inv[0]*h_inv[0]*0.0534522483825);
	ctx.coeff_A( 9, vi + V3i(0,0,0), 2 ) += -(h_inv[0]*h_inv[0]*0.0534522483825);
	ctx.coeff_A( 9, vi + V3i(0,0,0), 2 ) += -(h_inv[0]*h_inv[0]*0.0534522483825);
	ctx.coeff_A( 9, vi + V3i(1,0,0), 2 ) += (h_inv[0]*h_inv[0]*0.0534522483825);
	ctx.coeff_A( 0, vi + V3i(-1,0,0), 3 ) += (h_inv[0]*h_inv[0]*-0.258198889747);
	ctx.coeff_A( 0, vi + V3i(0,0,0), 3 ) += -(h_inv[0]*h_inv[0]*-0.258198889747);
	ctx.coeff_A( 0, vi + V3i(0,0,0), 3 ) += -(h_inv[0]*h_inv[0]*-0.258198889747);
	ctx.coeff_A( 0, vi + V3i(1,0,0), 3 ) += (h_inv[0]*h_inv[0]*-0.258198889747);
	ctx.coeff_A( 3, vi + V3i(-1,0,0), 3 ) += (h_inv[0]*h_inv[0]*-0.428571428571);
	ctx.coeff_A( 3, vi + V3i(0,0,0), 3 ) += -(h_inv[0]*h_inv[0]*-0.428571428571);
	ctx.coeff_A( 3, vi + V3i(0,0,0), 3 ) += -(h_inv[0]*h_inv[0]*-0.428571428571);
	ctx.coeff_A( 3, vi + V3i(1,0,0), 3 ) += (h_inv[0]*h_inv[0]*-0.428571428571);
	ctx.coeff_A( 5, vi + V3i(-1,0,0), 3 ) += (h_inv[0]*h_inv[0]*0.164957219768);
	ctx.coeff_A( 5, vi + V3i(0,0,0), 3 ) += -(h_inv[0]*h_inv[0]*0.164957219768);
	ctx.coeff_A( 5, vi + V3i(0,0,0), 3 ) += -(h_inv[0]*h_inv[0]*0.164957219768);
	ctx.coeff_A( 5, vi + V3i(1,0,0), 3 ) += (h_inv[0]*h_inv[0]*0.164957219768);
	ctx.coeff_A( 10, vi + V3i(-1,0,0), 3 ) += (h_inv[0]*h_inv[0]*-0.218217890236);
	ctx.coeff_A( 10, vi + V3i(0,0,0), 3 ) += -(h_inv[0]*h_inv[0]*-0.218217890236);
	ctx.coeff_A( 10, vi + V3i(0,0,0), 3 ) += -(h_inv[0]*h_inv[0]*-0.218217890236);
	ctx.coeff_A( 10, vi + V3i(1,0,0), 3 ) += (h_inv[0]*h_inv[0]*-0.218217890236);
	ctx.coeff_A( 12, vi + V3i(-1,0,0), 3 ) += (h_inv[0]*h_inv[0]*0.0824786098842);
	ctx.coeff_A( 12, vi + V3i(0,0,0), 3 ) += -(h_inv[0]*h_inv[0]*0.0824786098842);
	ctx.coeff_A( 12, vi + V3i(0,0,0), 3 ) += -(h_inv[0]*h_inv[0]*0.0824786098842);
	ctx.coeff_A( 12, vi + V3i(1,0,0), 3 ) += (h_inv[0]*h_inv[0]*0.0824786098842);
	ctx.coeff_A( 14, vi + V3i(-1,0,0), 3 ) += (h_inv[0]*h_inv[0]*-0.0368855556782);
	ctx.coeff_A( 14, vi + V3i(0,0,0), 3 ) += -(h_inv[0]*h_inv[0]*-0.0368855556782);
	ctx.coeff_A( 14, vi + V3i(0,0,0), 3 ) += -(h_inv[0]*h_inv[0]*-0.0368855556782);
	ctx.coeff_A( 14, vi + V3i(1,0,0), 3 ) += (h_inv[0]*h_inv[0]*-0.0368855556782);
	ctx.coeff_A( 4, vi + V3i(-1,0,0), 4 ) += (h_inv[0]*h_inv[0]*-0.428571428571);
	ctx.coeff_A( 4, vi + V3i(0,0,0), 4 ) += -(h_inv[0]*h_inv[0]*-0.428571428571);
	ctx.coeff_A( 4, vi + V3i(0,0,0), 4 ) += -(h_inv[0]*h_inv[0]*-0.428571428571);
	ctx.coeff_A( 4, vi + V3i(1,0,0), 4 ) += (h_inv[0]*h_inv[0]*-0.428571428571);
	ctx.coeff_A( 11, vi + V3i(-1,0,0), 4 ) += (h_inv[0]*h_inv[0]*-0.218217890236);
	ctx.coeff_A( 11, vi + V3i(0,0,0), 4 ) += -(h_inv[0]*h_inv[0]*-0.218217890236);
	ctx.coeff_A( 11, vi + V3i(0,0,0), 4 ) += -(h_inv[0]*h_inv[0]*-0.218217890236);
	ctx.coeff_A( 11, vi + V3i(1,0,0), 4 ) += (h_inv[0]*h_inv[0]*-0.218217890236);
	ctx.coeff_A( 13, vi + V3i(-1,0,0), 4 ) += (h_inv[0]*h_inv[0]*0.0824786098842);
	ctx.coeff_A( 13, vi + V3i(0,0,0), 4 ) += -(h_inv[0]*h_inv[0]*0.0824786098842);
	ctx.coeff_A( 13, vi + V3i(0,0,0), 4 ) += -(h_inv[0]*h_inv[0]*0.0824786098842);
	ctx.coeff_A( 13, vi + V3i(1,0,0), 4 ) += (h_inv[0]*h_inv[0]*0.0824786098842);
	ctx.coeff_A( 0, vi + V3i(-1,0,0), 5 ) += (h_inv[0]*h_inv[0]*0.1490711985);
	ctx.coeff_A( 0, vi + V3i(0,0,0), 5 ) += -(h_inv[0]*h_inv[0]*0.1490711985);
	ctx.coeff_A( 0, vi + V3i(0,0,0), 5 ) += -(h_inv[0]*h_inv[0]*0.1490711985);
	ctx.coeff_A( 0, vi + V3i(1,0,0), 5 ) += (h_inv[0]*h_inv[0]*0.1490711985);
	ctx.coeff_A( 3, vi + V3i(-1,0,0), 5 ) += (h_inv[0]*h_inv[0]*0.164957219768);
	ctx.coeff_A( 3, vi + V3i(0,0,0), 5 ) += -(h_inv[0]*h_inv[0]*0.164957219768);
	ctx.coeff_A( 3, vi + V3i(0,0,0), 5 ) += -(h_inv[0]*h_inv[0]*0.164957219768);
	ctx.coeff_A( 3, vi + V3i(1,0,0), 5 ) += (h_inv[0]*h_inv[0]*0.164957219768);
	ctx.coeff_A( 5, vi + V3i(-1,0,0), 5 ) += (h_inv[0]*h_inv[0]*-0.238095238095);
	ctx.coeff_A( 5, vi + V3i(0,0,0), 5 ) += -(h_inv[0]*h_inv[0]*-0.238095238095);
	ctx.coeff_A( 5, vi + V3i(0,0,0), 5 ) += -(h_inv[0]*h_inv[0]*-0.238095238095);
	ctx.coeff_A( 5, vi + V3i(1,0,0), 5 ) += (h_inv[0]*h_inv[0]*-0.238095238095);
	ctx.coeff_A( 12, vi + V3i(-1,0,0), 5 ) += (h_inv[0]*h_inv[0]*-0.142857142857);
	ctx.coeff_A( 12, vi + V3i(0,0,0), 5 ) += -(h_inv[0]*h_inv[0]*-0.142857142857);
	ctx.coeff_A( 12, vi + V3i(0,0,0), 5 ) += -(h_inv[0]*h_inv[0]*-0.142857142857);
	ctx.coeff_A( 12, vi + V3i(1,0,0), 5 ) += (h_inv[0]*h_inv[0]*-0.142857142857);
	ctx.coeff_A( 14, vi + V3i(-1,0,0), 5 ) += (h_inv[0]*h_inv[0]*0.127775313);
	ctx.coeff_A( 14, vi + V3i(0,0,0), 5 ) += -(h_inv[0]*h_inv[0]*0.127775313);
	ctx.coeff_A( 14, vi + V3i(0,0,0), 5 ) += -(h_inv[0]*h_inv[0]*0.127775313);
	ctx.coeff_A( 14, vi + V3i(1,0,0), 5 ) += (h_inv[0]*h_inv[0]*0.127775313);
	ctx.coeff_A( 1, vi + V3i(-1,0,0), 6 ) += (h_inv[0]*h_inv[0]*-0.207019667803);
	ctx.coeff_A( 1, vi + V3i(0,0,0), 6 ) += -(h_inv[0]*h_inv[0]*-0.207019667803);
	ctx.coeff_A( 1, vi + V3i(0,0,0), 6 ) += -(h_inv[0]*h_inv[0]*-0.207019667803);
	ctx.coeff_A( 1, vi + V3i(1,0,0), 6 ) += (h_inv[0]*h_inv[0]*-0.207019667803);
	ctx.coeff_A( 6, vi + V3i(-1,0,0), 6 ) += (h_inv[0]*h_inv[0]*-0.444444444444);
	ctx.coeff_A( 6, vi + V3i(0,0,0), 6 ) += -(h_inv[0]*h_inv[0]*-0.444444444444);
	ctx.coeff_A( 6, vi + V3i(0,0,0), 6 ) += -(h_inv[0]*h_inv[0]*-0.444444444444);
	ctx.coeff_A( 6, vi + V3i(1,0,0), 6 ) += (h_inv[0]*h_inv[0]*-0.444444444444);
	ctx.coeff_A( 8, vi + V3i(-1,0,0), 6 ) += (h_inv[0]*h_inv[0]*0.0860662965824);
	ctx.coeff_A( 8, vi + V3i(0,0,0), 6 ) += -(h_inv[0]*h_inv[0]*0.0860662965824);
	ctx.coeff_A( 8, vi + V3i(0,0,0), 6 ) += -(h_inv[0]*h_inv[0]*0.0860662965824);
	ctx.coeff_A( 8, vi + V3i(1,0,0), 6 ) += (h_inv[0]*h_inv[0]*0.0860662965824);
	ctx.coeff_A( 2, vi + V3i(-1,0,0), 7 ) += (h_inv[0]*h_inv[0]*-0.207019667803);
	ctx.coeff_A( 2, vi + V3i(0,0,0), 7 ) += -(h_inv[0]*h_inv[0]*-0.207019667803);
	ctx.coeff_A( 2, vi + V3i(0,0,0), 7 ) += -(h_inv[0]*h_inv[0]*-0.207019667803);
	ctx.coeff_A( 2, vi + V3i(1,0,0), 7 ) += (h_inv[0]*h_inv[0]*-0.207019667803);
	ctx.coeff_A( 7, vi + V3i(-1,0,0), 7 ) += (h_inv[0]*h_inv[0]*-0.444444444444);
	ctx.coeff_A( 7, vi + V3i(0,0,0), 7 ) += -(h_inv[0]*h_inv[0]*-0.444444444444);
	ctx.coeff_A( 7, vi + V3i(0,0,0), 7 ) += -(h_inv[0]*h_inv[0]*-0.444444444444);
	ctx.coeff_A( 7, vi + V3i(1,0,0), 7 ) += (h_inv[0]*h_inv[0]*-0.444444444444);
	ctx.coeff_A( 9, vi + V3i(-1,0,0), 7 ) += (h_inv[0]*h_inv[0]*0.0860662965824);
	ctx.coeff_A( 9, vi + V3i(0,0,0), 7 ) += -(h_inv[0]*h_inv[0]*0.0860662965824);
	ctx.coeff_A( 9, vi + V3i(0,0,0), 7 ) += -(h_inv[0]*h_inv[0]*0.0860662965824);
	ctx.coeff_A( 9, vi + V3i(1,0,0), 7 ) += (h_inv[0]*h_inv[0]*0.0860662965824);
	ctx.coeff_A( 1, vi + V3i(-1,0,0), 8 ) += (h_inv[0]*h_inv[0]*0.160356745147);
	ctx.coeff_A( 1, vi + V3i(0,0,0), 8 ) += -(h_inv[0]*h_inv[0]*0.160356745147);
	ctx.coeff_A( 1, vi + V3i(0,0,0), 8 ) += -(h_inv[0]*h_inv[0]*0.160356745147);
	ctx.coeff_A( 1, vi + V3i(1,0,0), 8 ) += (h_inv[0]*h_inv[0]*0.160356745147);
	ctx.coeff_A( 6, vi + V3i(-1,0,0), 8 ) += (h_inv[0]*h_inv[0]*0.0860662965824);
	ctx.coeff_A( 6, vi + V3i(0,0,0), 8 ) += -(h_inv[0]*h_inv[0]*0.0860662965824);
	ctx.coeff_A( 6, vi + V3i(0,0,0), 8 ) += -(h_inv[0]*h_inv[0]*0.0860662965824);
	ctx.coeff_A( 6, vi + V3i(1,0,0), 8 ) += (h_inv[0]*h_inv[0]*0.0860662965824);
	ctx.coeff_A( 8, vi + V3i(-1,0,0), 8 ) += (h_inv[0]*h_inv[0]*-0.4);
	ctx.coeff_A( 8, vi + V3i(0,0,0), 8 ) += -(h_inv[0]*h_inv[0]*-0.4);
	ctx.coeff_A( 8, vi + V3i(0,0,0), 8 ) += -(h_inv[0]*h_inv[0]*-0.4);
	ctx.coeff_A( 8, vi + V3i(1,0,0), 8 ) += (h_inv[0]*h_inv[0]*-0.4);
	ctx.coeff_A( 2, vi + V3i(-1,0,0), 9 ) += (h_inv[0]*h_inv[0]*0.0534522483825);
	ctx.coeff_A( 2, vi + V3i(0,0,0), 9 ) += -(h_inv[0]*h_inv[0]*0.0534522483825);
	ctx.coeff_A( 2, vi + V3i(0,0,0), 9 ) += -(h_inv[0]*h_inv[0]*0.0534522483825);
	ctx.coeff_A( 2, vi + V3i(1,0,0), 9 ) += (h_inv[0]*h_inv[0]*0.0534522483825);
	ctx.coeff_A( 7, vi + V3i(-1,0,0), 9 ) += (h_inv[0]*h_inv[0]*0.0860662965824);
	ctx.coeff_A( 7, vi + V3i(0,0,0), 9 ) += -(h_inv[0]*h_inv[0]*0.0860662965824);
	ctx.coeff_A( 7, vi + V3i(0,0,0), 9 ) += -(h_inv[0]*h_inv[0]*0.0860662965824);
	ctx.coeff_A( 7, vi + V3i(1,0,0), 9 ) += (h_inv[0]*h_inv[0]*0.0860662965824);
	ctx.coeff_A( 9, vi + V3i(-1,0,0), 9 ) += (h_inv[0]*h_inv[0]*-0.133333333333);
	ctx.coeff_A( 9, vi + V3i(0,0,0), 9 ) += -(h_inv[0]*h_inv[0]*-0.133333333333);
	ctx.coeff_A( 9, vi + V3i(0,0,0), 9 ) += -(h_inv[0]*h_inv[0]*-0.133333333333);
	ctx.coeff_A( 9, vi + V3i(1,0,0), 9 ) += (h_inv[0]*h_inv[0]*-0.133333333333);
	ctx.coeff_A( 3, vi + V3i(-1,0,0), 10 ) += (h_inv[0]*h_inv[0]*-0.218217890236);
	ctx.coeff_A( 3, vi + V3i(0,0,0), 10 ) += -(h_inv[0]*h_inv[0]*-0.218217890236);
	ctx.coeff_A( 3, vi + V3i(0,0,0), 10 ) += -(h_inv[0]*h_inv[0]*-0.218217890236);
	ctx.coeff_A( 3, vi + V3i(1,0,0), 10 ) += (h_inv[0]*h_inv[0]*-0.218217890236);
	ctx.coeff_A( 10, vi + V3i(-1,0,0), 10 ) += (h_inv[0]*h_inv[0]*-0.454545454545);
	ctx.coeff_A( 10, vi + V3i(0,0,0), 10 ) += -(h_inv[0]*h_inv[0]*-0.454545454545);
	ctx.coeff_A( 10, vi + V3i(0,0,0), 10 ) += -(h_inv[0]*h_inv[0]*-0.454545454545);
	ctx.coeff_A( 10, vi + V3i(1,0,0), 10 ) += (h_inv[0]*h_inv[0]*-0.454545454545);
	ctx.coeff_A( 12, vi + V3i(-1,0,0), 10 ) += (h_inv[0]*h_inv[0]*0.0687208132744);
	ctx.coeff_A( 12, vi + V3i(0,0,0), 10 ) += -(h_inv[0]*h_inv[0]*0.0687208132744);
	ctx.coeff_A( 12, vi + V3i(0,0,0), 10 ) += -(h_inv[0]*h_inv[0]*0.0687208132744);
	ctx.coeff_A( 12, vi + V3i(1,0,0), 10 ) += (h_inv[0]*h_inv[0]*0.0687208132744);
	ctx.coeff_A( 4, vi + V3i(-1,0,0), 11 ) += (h_inv[0]*h_inv[0]*-0.218217890236);
	ctx.coeff_A( 4, vi + V3i(0,0,0), 11 ) += -(h_inv[0]*h_inv[0]*-0.218217890236);
	ctx.coeff_A( 4, vi + V3i(0,0,0), 11 ) += -(h_inv[0]*h_inv[0]*-0.218217890236);
	ctx.coeff_A( 4, vi + V3i(1,0,0), 11 ) += (h_inv[0]*h_inv[0]*-0.218217890236);
	ctx.coeff_A( 11, vi + V3i(-1,0,0), 11 ) += (h_inv[0]*h_inv[0]*-0.454545454545);
	ctx.coeff_A( 11, vi + V3i(0,0,0), 11 ) += -(h_inv[0]*h_inv[0]*-0.454545454545);
	ctx.coeff_A( 11, vi + V3i(0,0,0), 11 ) += -(h_inv[0]*h_inv[0]*-0.454545454545);
	ctx.coeff_A( 11, vi + V3i(1,0,0), 11 ) += (h_inv[0]*h_inv[0]*-0.454545454545);
	ctx.coeff_A( 13, vi + V3i(-1,0,0), 11 ) += (h_inv[0]*h_inv[0]*0.0687208132744);
	ctx.coeff_A( 13, vi + V3i(0,0,0), 11 ) += -(h_inv[0]*h_inv[0]*0.0687208132744);
	ctx.coeff_A( 13, vi + V3i(0,0,0), 11 ) += -(h_inv[0]*h_inv[0]*0.0687208132744);
	ctx.coeff_A( 13, vi + V3i(1,0,0), 11 ) += (h_inv[0]*h_inv[0]*0.0687208132744);
	ctx.coeff_A( 3, vi + V3i(-1,0,0), 12 ) += (h_inv[0]*h_inv[0]*0.0824786098842);
	ctx.coeff_A( 3, vi + V3i(0,0,0), 12 ) += -(h_inv[0]*h_inv[0]*0.0824786098842);
	ctx.coeff_A( 3, vi + V3i(0,0,0), 12 ) += -(h_inv[0]*h_inv[0]*0.0824786098842);
	ctx.coeff_A( 3, vi + V3i(1,0,0), 12 ) += (h_inv[0]*h_inv[0]*0.0824786098842);
	ctx.coeff_A( 5, vi + V3i(-1,0,0), 12 ) += (h_inv[0]*h_inv[0]*-0.142857142857);
	ctx.coeff_A( 5, vi + V3i(0,0,0), 12 ) += -(h_inv[0]*h_inv[0]*-0.142857142857);
	ctx.coeff_A( 5, vi + V3i(0,0,0), 12 ) += -(h_inv[0]*h_inv[0]*-0.142857142857);
	ctx.coeff_A( 5, vi + V3i(1,0,0), 12 ) += (h_inv[0]*h_inv[0]*-0.142857142857);
	ctx.coeff_A( 10, vi + V3i(-1,0,0), 12 ) += (h_inv[0]*h_inv[0]*0.0687208132744);
	ctx.coeff_A( 10, vi + V3i(0,0,0), 12 ) += -(h_inv[0]*h_inv[0]*0.0687208132744);
	ctx.coeff_A( 10, vi + V3i(0,0,0), 12 ) += -(h_inv[0]*h_inv[0]*0.0687208132744);
	ctx.coeff_A( 10, vi + V3i(1,0,0), 12 ) += (h_inv[0]*h_inv[0]*0.0687208132744);
	ctx.coeff_A( 12, vi + V3i(-1,0,0), 12 ) += (h_inv[0]*h_inv[0]*-0.298701298701);
	ctx.coeff_A( 12, vi + V3i(0,0,0), 12 ) += -(h_inv[0]*h_inv[0]*-0.298701298701);
	ctx.coeff_A( 12, vi + V3i(0,0,0), 12 ) += -(h_inv[0]*h_inv[0]*-0.298701298701);
	ctx.coeff_A( 12, vi + V3i(1,0,0), 12 ) += (h_inv[0]*h_inv[0]*-0.298701298701);
	ctx.coeff_A( 14, vi + V3i(-1,0,0), 12 ) += (h_inv[0]*h_inv[0]*0.174239063182);
	ctx.coeff_A( 14, vi + V3i(0,0,0), 12 ) += -(h_inv[0]*h_inv[0]*0.174239063182);
	ctx.coeff_A( 14, vi + V3i(0,0,0), 12 ) += -(h_inv[0]*h_inv[0]*0.174239063182);
	ctx.coeff_A( 14, vi + V3i(1,0,0), 12 ) += (h_inv[0]*h_inv[0]*0.174239063182);
	ctx.coeff_A( 4, vi + V3i(-1,0,0), 13 ) += (h_inv[0]*h_inv[0]*0.0824786098842);
	ctx.coeff_A( 4, vi + V3i(0,0,0), 13 ) += -(h_inv[0]*h_inv[0]*0.0824786098842);
	ctx.coeff_A( 4, vi + V3i(0,0,0), 13 ) += -(h_inv[0]*h_inv[0]*0.0824786098842);
	ctx.coeff_A( 4, vi + V3i(1,0,0), 13 ) += (h_inv[0]*h_inv[0]*0.0824786098842);
	ctx.coeff_A( 11, vi + V3i(-1,0,0), 13 ) += (h_inv[0]*h_inv[0]*0.0687208132744);
	ctx.coeff_A( 11, vi + V3i(0,0,0), 13 ) += -(h_inv[0]*h_inv[0]*0.0687208132744);
	ctx.coeff_A( 11, vi + V3i(0,0,0), 13 ) += -(h_inv[0]*h_inv[0]*0.0687208132744);
	ctx.coeff_A( 11, vi + V3i(1,0,0), 13 ) += (h_inv[0]*h_inv[0]*0.0687208132744);
	ctx.coeff_A( 13, vi + V3i(-1,0,0), 13 ) += (h_inv[0]*h_inv[0]*-0.298701298701);
	ctx.coeff_A( 13, vi + V3i(0,0,0), 13 ) += -(h_inv[0]*h_inv[0]*-0.298701298701);
	ctx.coeff_A( 13, vi + V3i(0,0,0), 13 ) += -(h_inv[0]*h_inv[0]*-0.298701298701);
	ctx.coeff_A( 13, vi + V3i(1,0,0), 13 ) += (h_inv[0]*h_inv[0]*-0.298701298701);
	ctx.coeff_A( 3, vi + V3i(-1,0,0), 14 ) += (h_inv[0]*h_inv[0]*-0.0368855556782);
	ctx.coeff_A( 3, vi + V3i(0,0,0), 14 ) += -(h_inv[0]*h_inv[0]*-0.0368855556782);
	ctx.coeff_A( 3, vi + V3i(0,0,0), 14 ) += -(h_inv[0]*h_inv[0]*-0.0368855556782);
	ctx.coeff_A( 3, vi + V3i(1,0,0), 14 ) += (h_inv[0]*h_inv[0]*-0.0368855556782);
	ctx.coeff_A( 5, vi + V3i(-1,0,0), 14 ) += (h_inv[0]*h_inv[0]*0.127775313);
	ctx.coeff_A( 5, vi + V3i(0,0,0), 14 ) += -(h_inv[0]*h_inv[0]*0.127775313);
	ctx.coeff_A( 5, vi + V3i(0,0,0), 14 ) += -(h_inv[0]*h_inv[0]*0.127775313);
	ctx.coeff_A( 5, vi + V3i(1,0,0), 14 ) += (h_inv[0]*h_inv[0]*0.127775313);
	ctx.coeff_A( 12, vi + V3i(-1,0,0), 14 ) += (h_inv[0]*h_inv[0]*0.174239063182);
	ctx.coeff_A( 12, vi + V3i(0,0,0), 14 ) += -(h_inv[0]*h_inv[0]*0.174239063182);
	ctx.coeff_A( 12, vi + V3i(0,0,0), 14 ) += -(h_inv[0]*h_inv[0]*0.174239063182);
	ctx.coeff_A( 12, vi + V3i(1,0,0), 14 ) += (h_inv[0]*h_inv[0]*0.174239063182);
	ctx.coeff_A( 14, vi + V3i(-1,0,0), 14 ) += (h_inv[0]*h_inv[0]*-0.246753246753);
	ctx.coeff_A( 14, vi + V3i(0,0,0), 14 ) += -(h_inv[0]*h_inv[0]*-0.246753246753);
	ctx.coeff_A( 14, vi + V3i(0,0,0), 14 ) += -(h_inv[0]*h_inv[0]*-0.246753246753);
	ctx.coeff_A( 14, vi + V3i(1,0,0), 14 ) += (h_inv[0]*h_inv[0]*-0.246753246753);
	ctx.coeff_A( 4, vi + V3i(-1,-1,0), 0 ) += (h_inv[1]*h_inv[0]*-0.258198889747);
	ctx.coeff_A( 4, vi + V3i(-1,0,0), 0 ) += -(h_inv[1]*h_inv[0]*-0.258198889747);
	ctx.coeff_A( 4, vi + V3i(0,-1,0), 0 ) += -(h_inv[1]*h_inv[0]*-0.258198889747);
	ctx.coeff_A( 4, vi + V3i(0,0,0), 0 ) += (h_inv[1]*h_inv[0]*-0.258198889747);
	ctx.coeff_A( 2, vi + V3i(0,-1,0), 1 ) += (h_inv[1]*h_inv[0]*-0.2);
	ctx.coeff_A( 2, vi + V3i(0,0,0), 1 ) += -(h_inv[1]*h_inv[0]*-0.2);
	ctx.coeff_A( 2, vi + V3i(1,-1,0), 1 ) += -(h_inv[1]*h_inv[0]*-0.2);
	ctx.coeff_A( 2, vi + V3i(1,0,0), 1 ) += (h_inv[1]*h_inv[0]*-0.2);
	ctx.coeff_A( 7, vi + V3i(0,-1,0), 1 ) += (h_inv[1]*h_inv[0]*-0.207019667803);
	ctx.coeff_A( 7, vi + V3i(0,0,0), 1 ) += -(h_inv[1]*h_inv[0]*-0.207019667803);
	ctx.coeff_A( 7, vi + V3i(1,-1,0), 1 ) += -(h_inv[1]*h_inv[0]*-0.207019667803);
	ctx.coeff_A( 7, vi + V3i(1,0,0), 1 ) += (h_inv[1]*h_inv[0]*-0.207019667803);
	ctx.coeff_A( 9, vi + V3i(0,-1,0), 1 ) += (h_inv[1]*h_inv[0]*0.0534522483825);
	ctx.coeff_A( 9, vi + V3i(0,0,0), 1 ) += -(h_inv[1]*h_inv[0]*0.0534522483825);
	ctx.coeff_A( 9, vi + V3i(1,-1,0), 1 ) += -(h_inv[1]*h_inv[0]*0.0534522483825);
	ctx.coeff_A( 9, vi + V3i(1,0,0), 1 ) += (h_inv[1]*h_inv[0]*0.0534522483825);
	ctx.coeff_A( 1, vi + V3i(-1,0,0), 2 ) += (h_inv[1]*h_inv[0]*-0.2);
	ctx.coeff_A( 1, vi + V3i(-1,1,0), 2 ) += -(h_inv[1]*h_inv[0]*-0.2);
	ctx.coeff_A( 1, vi + V3i(0,0,0), 2 ) += -(h_inv[1]*h_inv[0]*-0.2);
	ctx.coeff_A( 1, vi + V3i(0,1,0), 2 ) += (h_inv[1]*h_inv[0]*-0.2);
	ctx.coeff_A( 6, vi + V3i(-1,0,0), 2 ) += (h_inv[1]*h_inv[0]*0.207019667803);
	ctx.coeff_A( 6, vi + V3i(-1,1,0), 2 ) += -(h_inv[1]*h_inv[0]*0.207019667803);
	ctx.coeff_A( 6, vi + V3i(0,0,0), 2 ) += -(h_inv[1]*h_inv[0]*0.207019667803);
	ctx.coeff_A( 6, vi + V3i(0,1,0), 2 ) += (h_inv[1]*h_inv[0]*0.207019667803);
	ctx.coeff_A( 8, vi + V3i(-1,0,0), 2 ) += (h_inv[1]*h_inv[0]*0.0534522483825);
	ctx.coeff_A( 8, vi + V3i(-1,1,0), 2 ) += -(h_inv[1]*h_inv[0]*0.0534522483825);
	ctx.coeff_A( 8, vi + V3i(0,0,0), 2 ) += -(h_inv[1]*h_inv[0]*0.0534522483825);
	ctx.coeff_A( 8, vi + V3i(0,1,0), 2 ) += (h_inv[1]*h_inv[0]*0.0534522483825);
	ctx.coeff_A( 11, vi + V3i(-1,-1,0), 3 ) += (h_inv[1]*h_inv[0]*-0.218217890236);
	ctx.coeff_A( 11, vi + V3i(-1,0,0), 3 ) += -(h_inv[1]*h_inv[0]*-0.218217890236);
	ctx.coeff_A( 11, vi + V3i(0,-1,0), 3 ) += -(h_inv[1]*h_inv[0]*-0.218217890236);
	ctx.coeff_A( 11, vi + V3i(0,0,0), 3 ) += (h_inv[1]*h_inv[0]*-0.218217890236);
	ctx.coeff_A( 0, vi + V3i(0,0,0), 4 ) += (h_inv[1]*h_inv[0]*-0.258198889747);
	ctx.coeff_A( 0, vi + V3i(0,1,0), 4 ) += -(h_inv[1]*h_inv[0]*-0.258198889747);
	ctx.coeff_A( 0, vi + V3i(1,0,0), 4 ) += -(h_inv[1]*h_inv[0]*-0.258198889747);
	ctx.coeff_A( 0, vi + V3i(1,1,0), 4 ) += (h_inv[1]*h_inv[0]*-0.258198889747);
	ctx.coeff_A( 5, vi + V3i(0,0,0), 4 ) += (h_inv[1]*h_inv[0]*0.164957219768);
	ctx.coeff_A( 5, vi + V3i(0,1,0), 4 ) += -(h_inv[1]*h_inv[0]*0.164957219768);
	ctx.coeff_A( 5, vi + V3i(1,0,0), 4 ) += -(h_inv[1]*h_inv[0]*0.164957219768);
	ctx.coeff_A( 5, vi + V3i(1,1,0), 4 ) += (h_inv[1]*h_inv[0]*0.164957219768);
	ctx.coeff_A( 10, vi + V3i(0,0,0), 4 ) += (h_inv[1]*h_inv[0]*0.218217890236);
	ctx.coeff_A( 10, vi + V3i(0,1,0), 4 ) += -(h_inv[1]*h_inv[0]*0.218217890236);
	ctx.coeff_A( 10, vi + V3i(1,0,0), 4 ) += -(h_inv[1]*h_inv[0]*0.218217890236);
	ctx.coeff_A( 10, vi + V3i(1,1,0), 4 ) += (h_inv[1]*h_inv[0]*0.218217890236);
	ctx.coeff_A( 14, vi + V3i(0,0,0), 4 ) += (h_inv[1]*h_inv[0]*-0.0368855556782);
	ctx.coeff_A( 14, vi + V3i(0,1,0), 4 ) += -(h_inv[1]*h_inv[0]*-0.0368855556782);
	ctx.coeff_A( 14, vi + V3i(1,0,0), 4 ) += -(h_inv[1]*h_inv[0]*-0.0368855556782);
	ctx.coeff_A( 14, vi + V3i(1,1,0), 4 ) += (h_inv[1]*h_inv[0]*-0.0368855556782);
	ctx.coeff_A( 4, vi + V3i(-1,-1,0), 5 ) += (h_inv[1]*h_inv[0]*0.164957219768);
	ctx.coeff_A( 4, vi + V3i(-1,0,0), 5 ) += -(h_inv[1]*h_inv[0]*0.164957219768);
	ctx.coeff_A( 4, vi + V3i(0,-1,0), 5 ) += -(h_inv[1]*h_inv[0]*0.164957219768);
	ctx.coeff_A( 4, vi + V3i(0,0,0), 5 ) += (h_inv[1]*h_inv[0]*0.164957219768);
	ctx.coeff_A( 13, vi + V3i(-1,-1,0), 5 ) += (h_inv[1]*h_inv[0]*-0.142857142857);
	ctx.coeff_A( 13, vi + V3i(-1,0,0), 5 ) += -(h_inv[1]*h_inv[0]*-0.142857142857);
	ctx.coeff_A( 13, vi + V3i(0,-1,0), 5 ) += -(h_inv[1]*h_inv[0]*-0.142857142857);
	ctx.coeff_A( 13, vi + V3i(0,0,0), 5 ) += (h_inv[1]*h_inv[0]*-0.142857142857);
	ctx.coeff_A( 2, vi + V3i(0,-1,0), 6 ) += (h_inv[1]*h_inv[0]*0.207019667803);
	ctx.coeff_A( 2, vi + V3i(0,0,0), 6 ) += -(h_inv[1]*h_inv[0]*0.207019667803);
	ctx.coeff_A( 2, vi + V3i(1,-1,0), 6 ) += -(h_inv[1]*h_inv[0]*0.207019667803);
	ctx.coeff_A( 2, vi + V3i(1,0,0), 6 ) += (h_inv[1]*h_inv[0]*0.207019667803);
	ctx.coeff_A( 9, vi + V3i(0,-1,0), 6 ) += (h_inv[1]*h_inv[0]*-0.0860662965824);
	ctx.coeff_A( 9, vi + V3i(0,0,0), 6 ) += -(h_inv[1]*h_inv[0]*-0.0860662965824);
	ctx.coeff_A( 9, vi + V3i(1,-1,0), 6 ) += -(h_inv[1]*h_inv[0]*-0.0860662965824);
	ctx.coeff_A( 9, vi + V3i(1,0,0), 6 ) += (h_inv[1]*h_inv[0]*-0.0860662965824);
	ctx.coeff_A( 1, vi + V3i(-1,0,0), 7 ) += (h_inv[1]*h_inv[0]*-0.207019667803);
	ctx.coeff_A( 1, vi + V3i(-1,1,0), 7 ) += -(h_inv[1]*h_inv[0]*-0.207019667803);
	ctx.coeff_A( 1, vi + V3i(0,0,0), 7 ) += -(h_inv[1]*h_inv[0]*-0.207019667803);
	ctx.coeff_A( 1, vi + V3i(0,1,0), 7 ) += (h_inv[1]*h_inv[0]*-0.207019667803);
	ctx.coeff_A( 8, vi + V3i(-1,0,0), 7 ) += (h_inv[1]*h_inv[0]*0.0860662965824);
	ctx.coeff_A( 8, vi + V3i(-1,1,0), 7 ) += -(h_inv[1]*h_inv[0]*0.0860662965824);
	ctx.coeff_A( 8, vi + V3i(0,0,0), 7 ) += -(h_inv[1]*h_inv[0]*0.0860662965824);
	ctx.coeff_A( 8, vi + V3i(0,1,0), 7 ) += (h_inv[1]*h_inv[0]*0.0860662965824);
	ctx.coeff_A( 2, vi + V3i(0,-1,0), 8 ) += (h_inv[1]*h_inv[0]*0.0534522483825);
	ctx.coeff_A( 2, vi + V3i(0,0,0), 8 ) += -(h_inv[1]*h_inv[0]*0.0534522483825);
	ctx.coeff_A( 2, vi + V3i(1,-1,0), 8 ) += -(h_inv[1]*h_inv[0]*0.0534522483825);
	ctx.coeff_A( 2, vi + V3i(1,0,0), 8 ) += (h_inv[1]*h_inv[0]*0.0534522483825);
	ctx.coeff_A( 7, vi + V3i(0,-1,0), 8 ) += (h_inv[1]*h_inv[0]*0.0860662965824);
	ctx.coeff_A( 7, vi + V3i(0,0,0), 8 ) += -(h_inv[1]*h_inv[0]*0.0860662965824);
	ctx.coeff_A( 7, vi + V3i(1,-1,0), 8 ) += -(h_inv[1]*h_inv[0]*0.0860662965824);
	ctx.coeff_A( 7, vi + V3i(1,0,0), 8 ) += (h_inv[1]*h_inv[0]*0.0860662965824);
	ctx.coeff_A( 9, vi + V3i(0,-1,0), 8 ) += (h_inv[1]*h_inv[0]*-0.133333333333);
	ctx.coeff_A( 9, vi + V3i(0,0,0), 8 ) += -(h_inv[1]*h_inv[0]*-0.133333333333);
	ctx.coeff_A( 9, vi + V3i(1,-1,0), 8 ) += -(h_inv[1]*h_inv[0]*-0.133333333333);
	ctx.coeff_A( 9, vi + V3i(1,0,0), 8 ) += (h_inv[1]*h_inv[0]*-0.133333333333);
	ctx.coeff_A( 1, vi + V3i(-1,0,0), 9 ) += (h_inv[1]*h_inv[0]*0.0534522483825);
	ctx.coeff_A( 1, vi + V3i(-1,1,0), 9 ) += -(h_inv[1]*h_inv[0]*0.0534522483825);
	ctx.coeff_A( 1, vi + V3i(0,0,0), 9 ) += -(h_inv[1]*h_inv[0]*0.0534522483825);
	ctx.coeff_A( 1, vi + V3i(0,1,0), 9 ) += (h_inv[1]*h_inv[0]*0.0534522483825);
	ctx.coeff_A( 6, vi + V3i(-1,0,0), 9 ) += (h_inv[1]*h_inv[0]*-0.0860662965824);
	ctx.coeff_A( 6, vi + V3i(-1,1,0), 9 ) += -(h_inv[1]*h_inv[0]*-0.0860662965824);
	ctx.coeff_A( 6, vi + V3i(0,0,0), 9 ) += -(h_inv[1]*h_inv[0]*-0.0860662965824);
	ctx.coeff_A( 6, vi + V3i(0,1,0), 9 ) += (h_inv[1]*h_inv[0]*-0.0860662965824);
	ctx.coeff_A( 8, vi + V3i(-1,0,0), 9 ) += (h_inv[1]*h_inv[0]*-0.133333333333);
	ctx.coeff_A( 8, vi + V3i(-1,1,0), 9 ) += -(h_inv[1]*h_inv[0]*-0.133333333333);
	ctx.coeff_A( 8, vi + V3i(0,0,0), 9 ) += -(h_inv[1]*h_inv[0]*-0.133333333333);
	ctx.coeff_A( 8, vi + V3i(0,1,0), 9 ) += (h_inv[1]*h_inv[0]*-0.133333333333);
	ctx.coeff_A( 4, vi + V3i(-1,-1,0), 10 ) += (h_inv[1]*h_inv[0]*0.218217890236);
	ctx.coeff_A( 4, vi + V3i(-1,0,0), 10 ) += -(h_inv[1]*h_inv[0]*0.218217890236);
	ctx.coeff_A( 4, vi + V3i(0,-1,0), 10 ) += -(h_inv[1]*h_inv[0]*0.218217890236);
	ctx.coeff_A( 4, vi + V3i(0,0,0), 10 ) += (h_inv[1]*h_inv[0]*0.218217890236);
	ctx.coeff_A( 13, vi + V3i(-1,-1,0), 10 ) += (h_inv[1]*h_inv[0]*-0.0687208132744);
	ctx.coeff_A( 13, vi + V3i(-1,0,0), 10 ) += -(h_inv[1]*h_inv[0]*-0.0687208132744);
	ctx.coeff_A( 13, vi + V3i(0,-1,0), 10 ) += -(h_inv[1]*h_inv[0]*-0.0687208132744);
	ctx.coeff_A( 13, vi + V3i(0,0,0), 10 ) += (h_inv[1]*h_inv[0]*-0.0687208132744);
	ctx.coeff_A( 3, vi + V3i(0,0,0), 11 ) += (h_inv[1]*h_inv[0]*-0.218217890236);
	ctx.coeff_A( 3, vi + V3i(0,1,0), 11 ) += -(h_inv[1]*h_inv[0]*-0.218217890236);
	ctx.coeff_A( 3, vi + V3i(1,0,0), 11 ) += -(h_inv[1]*h_inv[0]*-0.218217890236);
	ctx.coeff_A( 3, vi + V3i(1,1,0), 11 ) += (h_inv[1]*h_inv[0]*-0.218217890236);
	ctx.coeff_A( 12, vi + V3i(0,0,0), 11 ) += (h_inv[1]*h_inv[0]*0.0687208132744);
	ctx.coeff_A( 12, vi + V3i(0,1,0), 11 ) += -(h_inv[1]*h_inv[0]*0.0687208132744);
	ctx.coeff_A( 12, vi + V3i(1,0,0), 11 ) += -(h_inv[1]*h_inv[0]*0.0687208132744);
	ctx.coeff_A( 12, vi + V3i(1,1,0), 11 ) += (h_inv[1]*h_inv[0]*0.0687208132744);
	ctx.coeff_A( 11, vi + V3i(-1,-1,0), 12 ) += (h_inv[1]*h_inv[0]*0.0687208132744);
	ctx.coeff_A( 11, vi + V3i(-1,0,0), 12 ) += -(h_inv[1]*h_inv[0]*0.0687208132744);
	ctx.coeff_A( 11, vi + V3i(0,-1,0), 12 ) += -(h_inv[1]*h_inv[0]*0.0687208132744);
	ctx.coeff_A( 11, vi + V3i(0,0,0), 12 ) += (h_inv[1]*h_inv[0]*0.0687208132744);
	ctx.coeff_A( 5, vi + V3i(0,0,0), 13 ) += (h_inv[1]*h_inv[0]*-0.142857142857);
	ctx.coeff_A( 5, vi + V3i(0,1,0), 13 ) += -(h_inv[1]*h_inv[0]*-0.142857142857);
	ctx.coeff_A( 5, vi + V3i(1,0,0), 13 ) += -(h_inv[1]*h_inv[0]*-0.142857142857);
	ctx.coeff_A( 5, vi + V3i(1,1,0), 13 ) += (h_inv[1]*h_inv[0]*-0.142857142857);
	ctx.coeff_A( 10, vi + V3i(0,0,0), 13 ) += (h_inv[1]*h_inv[0]*-0.0687208132744);
	ctx.coeff_A( 10, vi + V3i(0,1,0), 13 ) += -(h_inv[1]*h_inv[0]*-0.0687208132744);
	ctx.coeff_A( 10, vi + V3i(1,0,0), 13 ) += -(h_inv[1]*h_inv[0]*-0.0687208132744);
	ctx.coeff_A( 10, vi + V3i(1,1,0), 13 ) += (h_inv[1]*h_inv[0]*-0.0687208132744);
	ctx.coeff_A( 14, vi + V3i(0,0,0), 13 ) += (h_inv[1]*h_inv[0]*0.174239063182);
	ctx.coeff_A( 14, vi + V3i(0,1,0), 13 ) += -(h_inv[1]*h_inv[0]*0.174239063182);
	ctx.coeff_A( 14, vi + V3i(1,0,0), 13 ) += -(h_inv[1]*h_inv[0]*0.174239063182);
	ctx.coeff_A( 14, vi + V3i(1,1,0), 13 ) += (h_inv[1]*h_inv[0]*0.174239063182);
	ctx.coeff_A( 4, vi + V3i(-1,-1,0), 14 ) += (h_inv[1]*h_inv[0]*-0.0368855556782);
	ctx.coeff_A( 4, vi + V3i(-1,0,0), 14 ) += -(h_inv[1]*h_inv[0]*-0.0368855556782);
	ctx.coeff_A( 4, vi + V3i(0,-1,0), 14 ) += -(h_inv[1]*h_inv[0]*-0.0368855556782);
	ctx.coeff_A( 4, vi + V3i(0,0,0), 14 ) += (h_inv[1]*h_inv[0]*-0.0368855556782);
	ctx.coeff_A( 13, vi + V3i(-1,-1,0), 14 ) += (h_inv[1]*h_inv[0]*0.174239063182);
	ctx.coeff_A( 13, vi + V3i(-1,0,0), 14 ) += -(h_inv[1]*h_inv[0]*0.174239063182);
	ctx.coeff_A( 13, vi + V3i(0,-1,0), 14 ) += -(h_inv[1]*h_inv[0]*0.174239063182);
	ctx.coeff_A( 13, vi + V3i(0,0,0), 14 ) += (h_inv[1]*h_inv[0]*0.174239063182);
	ctx.coeff_A( 4, vi + V3i(-1,-1,0), 0 ) += (h_inv[0]*h_inv[1]*-0.258198889747);
	ctx.coeff_A( 4, vi + V3i(0,-1,0), 0 ) += -(h_inv[0]*h_inv[1]*-0.258198889747);
	ctx.coeff_A( 4, vi + V3i(-1,0,0), 0 ) += -(h_inv[0]*h_inv[1]*-0.258198889747);
	ctx.coeff_A( 4, vi + V3i(0,0,0), 0 ) += (h_inv[0]*h_inv[1]*-0.258198889747);
	ctx.coeff_A( 2, vi + V3i(0,-1,0), 1 ) += (h_inv[0]*h_inv[1]*-0.2);
	ctx.coeff_A( 2, vi + V3i(1,-1,0), 1 ) += -(h_inv[0]*h_inv[1]*-0.2);
	ctx.coeff_A( 2, vi + V3i(0,0,0), 1 ) += -(h_inv[0]*h_inv[1]*-0.2);
	ctx.coeff_A( 2, vi + V3i(1,0,0), 1 ) += (h_inv[0]*h_inv[1]*-0.2);
	ctx.coeff_A( 7, vi + V3i(0,-1,0), 1 ) += (h_inv[0]*h_inv[1]*-0.207019667803);
	ctx.coeff_A( 7, vi + V3i(1,-1,0), 1 ) += -(h_inv[0]*h_inv[1]*-0.207019667803);
	ctx.coeff_A( 7, vi + V3i(0,0,0), 1 ) += -(h_inv[0]*h_inv[1]*-0.207019667803);
	ctx.coeff_A( 7, vi + V3i(1,0,0), 1 ) += (h_inv[0]*h_inv[1]*-0.207019667803);
	ctx.coeff_A( 9, vi + V3i(0,-1,0), 1 ) += (h_inv[0]*h_inv[1]*0.0534522483825);
	ctx.coeff_A( 9, vi + V3i(1,-1,0), 1 ) += -(h_inv[0]*h_inv[1]*0.0534522483825);
	ctx.coeff_A( 9, vi + V3i(0,0,0), 1 ) += -(h_inv[0]*h_inv[1]*0.0534522483825);
	ctx.coeff_A( 9, vi + V3i(1,0,0), 1 ) += (h_inv[0]*h_inv[1]*0.0534522483825);
	ctx.coeff_A( 1, vi + V3i(-1,0,0), 2 ) += (h_inv[0]*h_inv[1]*-0.2);
	ctx.coeff_A( 1, vi + V3i(0,0,0), 2 ) += -(h_inv[0]*h_inv[1]*-0.2);
	ctx.coeff_A( 1, vi + V3i(-1,1,0), 2 ) += -(h_inv[0]*h_inv[1]*-0.2);
	ctx.coeff_A( 1, vi + V3i(0,1,0), 2 ) += (h_inv[0]*h_inv[1]*-0.2);
	ctx.coeff_A( 6, vi + V3i(-1,0,0), 2 ) += (h_inv[0]*h_inv[1]*0.207019667803);
	ctx.coeff_A( 6, vi + V3i(0,0,0), 2 ) += -(h_inv[0]*h_inv[1]*0.207019667803);
	ctx.coeff_A( 6, vi + V3i(-1,1,0), 2 ) += -(h_inv[0]*h_inv[1]*0.207019667803);
	ctx.coeff_A( 6, vi + V3i(0,1,0), 2 ) += (h_inv[0]*h_inv[1]*0.207019667803);
	ctx.coeff_A( 8, vi + V3i(-1,0,0), 2 ) += (h_inv[0]*h_inv[1]*0.0534522483825);
	ctx.coeff_A( 8, vi + V3i(0,0,0), 2 ) += -(h_inv[0]*h_inv[1]*0.0534522483825);
	ctx.coeff_A( 8, vi + V3i(-1,1,0), 2 ) += -(h_inv[0]*h_inv[1]*0.0534522483825);
	ctx.coeff_A( 8, vi + V3i(0,1,0), 2 ) += (h_inv[0]*h_inv[1]*0.0534522483825);
	ctx.coeff_A( 11, vi + V3i(-1,-1,0), 3 ) += (h_inv[0]*h_inv[1]*-0.218217890236);
	ctx.coeff_A( 11, vi + V3i(0,-1,0), 3 ) += -(h_inv[0]*h_inv[1]*-0.218217890236);
	ctx.coeff_A( 11, vi + V3i(-1,0,0), 3 ) += -(h_inv[0]*h_inv[1]*-0.218217890236);
	ctx.coeff_A( 11, vi + V3i(0,0,0), 3 ) += (h_inv[0]*h_inv[1]*-0.218217890236);
	ctx.coeff_A( 0, vi + V3i(0,0,0), 4 ) += (h_inv[0]*h_inv[1]*-0.258198889747);
	ctx.coeff_A( 0, vi + V3i(1,0,0), 4 ) += -(h_inv[0]*h_inv[1]*-0.258198889747);
	ctx.coeff_A( 0, vi + V3i(0,1,0), 4 ) += -(h_inv[0]*h_inv[1]*-0.258198889747);
	ctx.coeff_A( 0, vi + V3i(1,1,0), 4 ) += (h_inv[0]*h_inv[1]*-0.258198889747);
	ctx.coeff_A( 5, vi + V3i(0,0,0), 4 ) += (h_inv[0]*h_inv[1]*0.164957219768);
	ctx.coeff_A( 5, vi + V3i(1,0,0), 4 ) += -(h_inv[0]*h_inv[1]*0.164957219768);
	ctx.coeff_A( 5, vi + V3i(0,1,0), 4 ) += -(h_inv[0]*h_inv[1]*0.164957219768);
	ctx.coeff_A( 5, vi + V3i(1,1,0), 4 ) += (h_inv[0]*h_inv[1]*0.164957219768);
	ctx.coeff_A( 10, vi + V3i(0,0,0), 4 ) += (h_inv[0]*h_inv[1]*0.218217890236);
	ctx.coeff_A( 10, vi + V3i(1,0,0), 4 ) += -(h_inv[0]*h_inv[1]*0.218217890236);
	ctx.coeff_A( 10, vi + V3i(0,1,0), 4 ) += -(h_inv[0]*h_inv[1]*0.218217890236);
	ctx.coeff_A( 10, vi + V3i(1,1,0), 4 ) += (h_inv[0]*h_inv[1]*0.218217890236);
	ctx.coeff_A( 14, vi + V3i(0,0,0), 4 ) += (h_inv[0]*h_inv[1]*-0.0368855556782);
	ctx.coeff_A( 14, vi + V3i(1,0,0), 4 ) += -(h_inv[0]*h_inv[1]*-0.0368855556782);
	ctx.coeff_A( 14, vi + V3i(0,1,0), 4 ) += -(h_inv[0]*h_inv[1]*-0.0368855556782);
	ctx.coeff_A( 14, vi + V3i(1,1,0), 4 ) += (h_inv[0]*h_inv[1]*-0.0368855556782);
	ctx.coeff_A( 4, vi + V3i(-1,-1,0), 5 ) += (h_inv[0]*h_inv[1]*0.164957219768);
	ctx.coeff_A( 4, vi + V3i(0,-1,0), 5 ) += -(h_inv[0]*h_inv[1]*0.164957219768);
	ctx.coeff_A( 4, vi + V3i(-1,0,0), 5 ) += -(h_inv[0]*h_inv[1]*0.164957219768);
	ctx.coeff_A( 4, vi + V3i(0,0,0), 5 ) += (h_inv[0]*h_inv[1]*0.164957219768);
	ctx.coeff_A( 13, vi + V3i(-1,-1,0), 5 ) += (h_inv[0]*h_inv[1]*-0.142857142857);
	ctx.coeff_A( 13, vi + V3i(0,-1,0), 5 ) += -(h_inv[0]*h_inv[1]*-0.142857142857);
	ctx.coeff_A( 13, vi + V3i(-1,0,0), 5 ) += -(h_inv[0]*h_inv[1]*-0.142857142857);
	ctx.coeff_A( 13, vi + V3i(0,0,0), 5 ) += (h_inv[0]*h_inv[1]*-0.142857142857);
	ctx.coeff_A( 2, vi + V3i(0,-1,0), 6 ) += (h_inv[0]*h_inv[1]*0.207019667803);
	ctx.coeff_A( 2, vi + V3i(1,-1,0), 6 ) += -(h_inv[0]*h_inv[1]*0.207019667803);
	ctx.coeff_A( 2, vi + V3i(0,0,0), 6 ) += -(h_inv[0]*h_inv[1]*0.207019667803);
	ctx.coeff_A( 2, vi + V3i(1,0,0), 6 ) += (h_inv[0]*h_inv[1]*0.207019667803);
	ctx.coeff_A( 9, vi + V3i(0,-1,0), 6 ) += (h_inv[0]*h_inv[1]*-0.0860662965824);
	ctx.coeff_A( 9, vi + V3i(1,-1,0), 6 ) += -(h_inv[0]*h_inv[1]*-0.0860662965824);
	ctx.coeff_A( 9, vi + V3i(0,0,0), 6 ) += -(h_inv[0]*h_inv[1]*-0.0860662965824);
	ctx.coeff_A( 9, vi + V3i(1,0,0), 6 ) += (h_inv[0]*h_inv[1]*-0.0860662965824);
	ctx.coeff_A( 1, vi + V3i(-1,0,0), 7 ) += (h_inv[0]*h_inv[1]*-0.207019667803);
	ctx.coeff_A( 1, vi + V3i(0,0,0), 7 ) += -(h_inv[0]*h_inv[1]*-0.207019667803);
	ctx.coeff_A( 1, vi + V3i(-1,1,0), 7 ) += -(h_inv[0]*h_inv[1]*-0.207019667803);
	ctx.coeff_A( 1, vi + V3i(0,1,0), 7 ) += (h_inv[0]*h_inv[1]*-0.207019667803);
	ctx.coeff_A( 8, vi + V3i(-1,0,0), 7 ) += (h_inv[0]*h_inv[1]*0.0860662965824);
	ctx.coeff_A( 8, vi + V3i(0,0,0), 7 ) += -(h_inv[0]*h_inv[1]*0.0860662965824);
	ctx.coeff_A( 8, vi + V3i(-1,1,0), 7 ) += -(h_inv[0]*h_inv[1]*0.0860662965824);
	ctx.coeff_A( 8, vi + V3i(0,1,0), 7 ) += (h_inv[0]*h_inv[1]*0.0860662965824);
	ctx.coeff_A( 2, vi + V3i(0,-1,0), 8 ) += (h_inv[0]*h_inv[1]*0.0534522483825);
	ctx.coeff_A( 2, vi + V3i(1,-1,0), 8 ) += -(h_inv[0]*h_inv[1]*0.0534522483825);
	ctx.coeff_A( 2, vi + V3i(0,0,0), 8 ) += -(h_inv[0]*h_inv[1]*0.0534522483825);
	ctx.coeff_A( 2, vi + V3i(1,0,0), 8 ) += (h_inv[0]*h_inv[1]*0.0534522483825);
	ctx.coeff_A( 7, vi + V3i(0,-1,0), 8 ) += (h_inv[0]*h_inv[1]*0.0860662965824);
	ctx.coeff_A( 7, vi + V3i(1,-1,0), 8 ) += -(h_inv[0]*h_inv[1]*0.0860662965824);
	ctx.coeff_A( 7, vi + V3i(0,0,0), 8 ) += -(h_inv[0]*h_inv[1]*0.0860662965824);
	ctx.coeff_A( 7, vi + V3i(1,0,0), 8 ) += (h_inv[0]*h_inv[1]*0.0860662965824);
	ctx.coeff_A( 9, vi + V3i(0,-1,0), 8 ) += (h_inv[0]*h_inv[1]*-0.133333333333);
	ctx.coeff_A( 9, vi + V3i(1,-1,0), 8 ) += -(h_inv[0]*h_inv[1]*-0.133333333333);
	ctx.coeff_A( 9, vi + V3i(0,0,0), 8 ) += -(h_inv[0]*h_inv[1]*-0.133333333333);
	ctx.coeff_A( 9, vi + V3i(1,0,0), 8 ) += (h_inv[0]*h_inv[1]*-0.133333333333);
	ctx.coeff_A( 1, vi + V3i(-1,0,0), 9 ) += (h_inv[0]*h_inv[1]*0.0534522483825);
	ctx.coeff_A( 1, vi + V3i(0,0,0), 9 ) += -(h_inv[0]*h_inv[1]*0.0534522483825);
	ctx.coeff_A( 1, vi + V3i(-1,1,0), 9 ) += -(h_inv[0]*h_inv[1]*0.0534522483825);
	ctx.coeff_A( 1, vi + V3i(0,1,0), 9 ) += (h_inv[0]*h_inv[1]*0.0534522483825);
	ctx.coeff_A( 6, vi + V3i(-1,0,0), 9 ) += (h_inv[0]*h_inv[1]*-0.0860662965824);
	ctx.coeff_A( 6, vi + V3i(0,0,0), 9 ) += -(h_inv[0]*h_inv[1]*-0.0860662965824);
	ctx.coeff_A( 6, vi + V3i(-1,1,0), 9 ) += -(h_inv[0]*h_inv[1]*-0.0860662965824);
	ctx.coeff_A( 6, vi + V3i(0,1,0), 9 ) += (h_inv[0]*h_inv[1]*-0.0860662965824);
	ctx.coeff_A( 8, vi + V3i(-1,0,0), 9 ) += (h_inv[0]*h_inv[1]*-0.133333333333);
	ctx.coeff_A( 8, vi + V3i(0,0,0), 9 ) += -(h_inv[0]*h_inv[1]*-0.133333333333);
	ctx.coeff_A( 8, vi + V3i(-1,1,0), 9 ) += -(h_inv[0]*h_inv[1]*-0.133333333333);
	ctx.coeff_A( 8, vi + V3i(0,1,0), 9 ) += (h_inv[0]*h_inv[1]*-0.133333333333);
	ctx.coeff_A( 4, vi + V3i(-1,-1,0), 10 ) += (h_inv[0]*h_inv[1]*0.218217890236);
	ctx.coeff_A( 4, vi + V3i(0,-1,0), 10 ) += -(h_inv[0]*h_inv[1]*0.218217890236);
	ctx.coeff_A( 4, vi + V3i(-1,0,0), 10 ) += -(h_inv[0]*h_inv[1]*0.218217890236);
	ctx.coeff_A( 4, vi + V3i(0,0,0), 10 ) += (h_inv[0]*h_inv[1]*0.218217890236);
	ctx.coeff_A( 13, vi + V3i(-1,-1,0), 10 ) += (h_inv[0]*h_inv[1]*-0.0687208132744);
	ctx.coeff_A( 13, vi + V3i(0,-1,0), 10 ) += -(h_inv[0]*h_inv[1]*-0.0687208132744);
	ctx.coeff_A( 13, vi + V3i(-1,0,0), 10 ) += -(h_inv[0]*h_inv[1]*-0.0687208132744);
	ctx.coeff_A( 13, vi + V3i(0,0,0), 10 ) += (h_inv[0]*h_inv[1]*-0.0687208132744);
	ctx.coeff_A( 3, vi + V3i(0,0,0), 11 ) += (h_inv[0]*h_inv[1]*-0.218217890236);
	ctx.coeff_A( 3, vi + V3i(1,0,0), 11 ) += -(h_inv[0]*h_inv[1]*-0.218217890236);
	ctx.coeff_A( 3, vi + V3i(0,1,0), 11 ) += -(h_inv[0]*h_inv[1]*-0.218217890236);
	ctx.coeff_A( 3, vi + V3i(1,1,0), 11 ) += (h_inv[0]*h_inv[1]*-0.218217890236);
	ctx.coeff_A( 12, vi + V3i(0,0,0), 11 ) += (h_inv[0]*h_inv[1]*0.0687208132744);
	ctx.coeff_A( 12, vi + V3i(1,0,0), 11 ) += -(h_inv[0]*h_inv[1]*0.0687208132744);
	ctx.coeff_A( 12, vi + V3i(0,1,0), 11 ) += -(h_inv[0]*h_inv[1]*0.0687208132744);
	ctx.coeff_A( 12, vi + V3i(1,1,0), 11 ) += (h_inv[0]*h_inv[1]*0.0687208132744);
	ctx.coeff_A( 11, vi + V3i(-1,-1,0), 12 ) += (h_inv[0]*h_inv[1]*0.0687208132744);
	ctx.coeff_A( 11, vi + V3i(0,-1,0), 12 ) += -(h_inv[0]*h_inv[1]*0.0687208132744);
	ctx.coeff_A( 11, vi + V3i(-1,0,0), 12 ) += -(h_inv[0]*h_inv[1]*0.0687208132744);
	ctx.coeff_A( 11, vi + V3i(0,0,0), 12 ) += (h_inv[0]*h_inv[1]*0.0687208132744);
	ctx.coeff_A( 5, vi + V3i(0,0,0), 13 ) += (h_inv[0]*h_inv[1]*-0.142857142857);
	ctx.coeff_A( 5, vi + V3i(1,0,0), 13 ) += -(h_inv[0]*h_inv[1]*-0.142857142857);
	ctx.coeff_A( 5, vi + V3i(0,1,0), 13 ) += -(h_inv[0]*h_inv[1]*-0.142857142857);
	ctx.coeff_A( 5, vi + V3i(1,1,0), 13 ) += (h_inv[0]*h_inv[1]*-0.142857142857);
	ctx.coeff_A( 10, vi + V3i(0,0,0), 13 ) += (h_inv[0]*h_inv[1]*-0.0687208132744);
	ctx.coeff_A( 10, vi + V3i(1,0,0), 13 ) += -(h_inv[0]*h_inv[1]*-0.0687208132744);
	ctx.coeff_A( 10, vi + V3i(0,1,0), 13 ) += -(h_inv[0]*h_inv[1]*-0.0687208132744);
	ctx.coeff_A( 10, vi + V3i(1,1,0), 13 ) += (h_inv[0]*h_inv[1]*-0.0687208132744);
	ctx.coeff_A( 14, vi + V3i(0,0,0), 13 ) += (h_inv[0]*h_inv[1]*0.174239063182);
	ctx.coeff_A( 14, vi + V3i(1,0,0), 13 ) += -(h_inv[0]*h_inv[1]*0.174239063182);
	ctx.coeff_A( 14, vi + V3i(0,1,0), 13 ) += -(h_inv[0]*h_inv[1]*0.174239063182);
	ctx.coeff_A( 14, vi + V3i(1,1,0), 13 ) += (h_inv[0]*h_inv[1]*0.174239063182);
	ctx.coeff_A( 4, vi + V3i(-1,-1,0), 14 ) += (h_inv[0]*h_inv[1]*-0.0368855556782);
	ctx.coeff_A( 4, vi + V3i(0,-1,0), 14 ) += -(h_inv[0]*h_inv[1]*-0.0368855556782);
	ctx.coeff_A( 4, vi + V3i(-1,0,0), 14 ) += -(h_inv[0]*h_inv[1]*-0.0368855556782);
	ctx.coeff_A( 4, vi + V3i(0,0,0), 14 ) += (h_inv[0]*h_inv[1]*-0.0368855556782);
	ctx.coeff_A( 13, vi + V3i(-1,-1,0), 14 ) += (h_inv[0]*h_inv[1]*0.174239063182);
	ctx.coeff_A( 13, vi + V3i(0,-1,0), 14 ) += -(h_inv[0]*h_inv[1]*0.174239063182);
	ctx.coeff_A( 13, vi + V3i(-1,0,0), 14 ) += -(h_inv[0]*h_inv[1]*0.174239063182);
	ctx.coeff_A( 13, vi + V3i(0,0,0), 14 ) += (h_inv[0]*h_inv[1]*0.174239063182);
	ctx.coeff_A( 0, vi + V3i(0,-1,0), 0 ) += (h_inv[1]*h_inv[1]*-0.333333333333);
	ctx.coeff_A( 0, vi + V3i(0,0,0), 0 ) += -(h_inv[1]*h_inv[1]*-0.333333333333);
	ctx.coeff_A( 0, vi + V3i(0,0,0), 0 ) += -(h_inv[1]*h_inv[1]*-0.333333333333);
	ctx.coeff_A( 0, vi + V3i(0,1,0), 0 ) += (h_inv[1]*h_inv[1]*-0.333333333333);
	ctx.coeff_A( 3, vi + V3i(0,-1,0), 0 ) += (h_inv[1]*h_inv[1]*0.258198889747);
	ctx.coeff_A( 3, vi + V3i(0,0,0), 0 ) += -(h_inv[1]*h_inv[1]*0.258198889747);
	ctx.coeff_A( 3, vi + V3i(0,0,0), 0 ) += -(h_inv[1]*h_inv[1]*0.258198889747);
	ctx.coeff_A( 3, vi + V3i(0,1,0), 0 ) += (h_inv[1]*h_inv[1]*0.258198889747);
	ctx.coeff_A( 5, vi + V3i(0,-1,0), 0 ) += (h_inv[1]*h_inv[1]*0.1490711985);
	ctx.coeff_A( 5, vi + V3i(0,0,0), 0 ) += -(h_inv[1]*h_inv[1]*0.1490711985);
	ctx.coeff_A( 5, vi + V3i(0,0,0), 0 ) += -(h_inv[1]*h_inv[1]*0.1490711985);
	ctx.coeff_A( 5, vi + V3i(0,1,0), 0 ) += (h_inv[1]*h_inv[1]*0.1490711985);
	ctx.coeff_A( 1, vi + V3i(0,-1,0), 1 ) += (h_inv[1]*h_inv[1]*-0.2);
	ctx.coeff_A( 1, vi + V3i(0,0,0), 1 ) += -(h_inv[1]*h_inv[1]*-0.2);
	ctx.coeff_A( 1, vi + V3i(0,0,0), 1 ) += -(h_inv[1]*h_inv[1]*-0.2);
	ctx.coeff_A( 1, vi + V3i(0,1,0), 1 ) += (h_inv[1]*h_inv[1]*-0.2);
	ctx.coeff_A( 6, vi + V3i(0,-1,0), 1 ) += (h_inv[1]*h_inv[1]*0.207019667803);
	ctx.coeff_A( 6, vi + V3i(0,0,0), 1 ) += -(h_inv[1]*h_inv[1]*0.207019667803);
	ctx.coeff_A( 6, vi + V3i(0,0,0), 1 ) += -(h_inv[1]*h_inv[1]*0.207019667803);
	ctx.coeff_A( 6, vi + V3i(0,1,0), 1 ) += (h_inv[1]*h_inv[1]*0.207019667803);
	ctx.coeff_A( 8, vi + V3i(0,-1,0), 1 ) += (h_inv[1]*h_inv[1]*0.0534522483825);
	ctx.coeff_A( 8, vi + V3i(0,0,0), 1 ) += -(h_inv[1]*h_inv[1]*0.0534522483825);
	ctx.coeff_A( 8, vi + V3i(0,0,0), 1 ) += -(h_inv[1]*h_inv[1]*0.0534522483825);
	ctx.coeff_A( 8, vi + V3i(0,1,0), 1 ) += (h_inv[1]*h_inv[1]*0.0534522483825);
	ctx.coeff_A( 2, vi + V3i(0,-1,0), 2 ) += (h_inv[1]*h_inv[1]*-0.6);
	ctx.coeff_A( 2, vi + V3i(0,0,0), 2 ) += -(h_inv[1]*h_inv[1]*-0.6);
	ctx.coeff_A( 2, vi + V3i(0,0,0), 2 ) += -(h_inv[1]*h_inv[1]*-0.6);
	ctx.coeff_A( 2, vi + V3i(0,1,0), 2 ) += (h_inv[1]*h_inv[1]*-0.6);
	ctx.coeff_A( 7, vi + V3i(0,-1,0), 2 ) += (h_inv[1]*h_inv[1]*0.207019667803);
	ctx.coeff_A( 7, vi + V3i(0,0,0), 2 ) += -(h_inv[1]*h_inv[1]*0.207019667803);
	ctx.coeff_A( 7, vi + V3i(0,0,0), 2 ) += -(h_inv[1]*h_inv[1]*0.207019667803);
	ctx.coeff_A( 7, vi + V3i(0,1,0), 2 ) += (h_inv[1]*h_inv[1]*0.207019667803);
	ctx.coeff_A( 9, vi + V3i(0,-1,0), 2 ) += (h_inv[1]*h_inv[1]*0.160356745147);
	ctx.coeff_A( 9, vi + V3i(0,0,0), 2 ) += -(h_inv[1]*h_inv[1]*0.160356745147);
	ctx.coeff_A( 9, vi + V3i(0,0,0), 2 ) += -(h_inv[1]*h_inv[1]*0.160356745147);
	ctx.coeff_A( 9, vi + V3i(0,1,0), 2 ) += (h_inv[1]*h_inv[1]*0.160356745147);
	ctx.coeff_A( 0, vi + V3i(0,-1,0), 3 ) += (h_inv[1]*h_inv[1]*0.258198889747);
	ctx.coeff_A( 0, vi + V3i(0,0,0), 3 ) += -(h_inv[1]*h_inv[1]*0.258198889747);
	ctx.coeff_A( 0, vi + V3i(0,0,0), 3 ) += -(h_inv[1]*h_inv[1]*0.258198889747);
	ctx.coeff_A( 0, vi + V3i(0,1,0), 3 ) += (h_inv[1]*h_inv[1]*0.258198889747);
	ctx.coeff_A( 3, vi + V3i(0,-1,0), 3 ) += (h_inv[1]*h_inv[1]*-0.428571428571);
	ctx.coeff_A( 3, vi + V3i(0,0,0), 3 ) += -(h_inv[1]*h_inv[1]*-0.428571428571);
	ctx.coeff_A( 3, vi + V3i(0,0,0), 3 ) += -(h_inv[1]*h_inv[1]*-0.428571428571);
	ctx.coeff_A( 3, vi + V3i(0,1,0), 3 ) += (h_inv[1]*h_inv[1]*-0.428571428571);
	ctx.coeff_A( 5, vi + V3i(0,-1,0), 3 ) += (h_inv[1]*h_inv[1]*-0.164957219768);
	ctx.coeff_A( 5, vi + V3i(0,0,0), 3 ) += -(h_inv[1]*h_inv[1]*-0.164957219768);
	ctx.coeff_A( 5, vi + V3i(0,0,0), 3 ) += -(h_inv[1]*h_inv[1]*-0.164957219768);
	ctx.coeff_A( 5, vi + V3i(0,1,0), 3 ) += (h_inv[1]*h_inv[1]*-0.164957219768);
	ctx.coeff_A( 10, vi + V3i(0,-1,0), 3 ) += (h_inv[1]*h_inv[1]*0.218217890236);
	ctx.coeff_A( 10, vi + V3i(0,0,0), 3 ) += -(h_inv[1]*h_inv[1]*0.218217890236);
	ctx.coeff_A( 10, vi + V3i(0,0,0), 3 ) += -(h_inv[1]*h_inv[1]*0.218217890236);
	ctx.coeff_A( 10, vi + V3i(0,1,0), 3 ) += (h_inv[1]*h_inv[1]*0.218217890236);
	ctx.coeff_A( 12, vi + V3i(0,-1,0), 3 ) += (h_inv[1]*h_inv[1]*0.0824786098842);
	ctx.coeff_A( 12, vi + V3i(0,0,0), 3 ) += -(h_inv[1]*h_inv[1]*0.0824786098842);
	ctx.coeff_A( 12, vi + V3i(0,0,0), 3 ) += -(h_inv[1]*h_inv[1]*0.0824786098842);
	ctx.coeff_A( 12, vi + V3i(0,1,0), 3 ) += (h_inv[1]*h_inv[1]*0.0824786098842);
	ctx.coeff_A( 14, vi + V3i(0,-1,0), 3 ) += (h_inv[1]*h_inv[1]*0.0368855556782);
	ctx.coeff_A( 14, vi + V3i(0,0,0), 3 ) += -(h_inv[1]*h_inv[1]*0.0368855556782);
	ctx.coeff_A( 14, vi + V3i(0,0,0), 3 ) += -(h_inv[1]*h_inv[1]*0.0368855556782);
	ctx.coeff_A( 14, vi + V3i(0,1,0), 3 ) += (h_inv[1]*h_inv[1]*0.0368855556782);
	ctx.coeff_A( 4, vi + V3i(0,-1,0), 4 ) += (h_inv[1]*h_inv[1]*-0.428571428571);
	ctx.coeff_A( 4, vi + V3i(0,0,0), 4 ) += -(h_inv[1]*h_inv[1]*-0.428571428571);
	ctx.coeff_A( 4, vi + V3i(0,0,0), 4 ) += -(h_inv[1]*h_inv[1]*-0.428571428571);
	ctx.coeff_A( 4, vi + V3i(0,1,0), 4 ) += (h_inv[1]*h_inv[1]*-0.428571428571);
	ctx.coeff_A( 11, vi + V3i(0,-1,0), 4 ) += (h_inv[1]*h_inv[1]*0.218217890236);
	ctx.coeff_A( 11, vi + V3i(0,0,0), 4 ) += -(h_inv[1]*h_inv[1]*0.218217890236);
	ctx.coeff_A( 11, vi + V3i(0,0,0), 4 ) += -(h_inv[1]*h_inv[1]*0.218217890236);
	ctx.coeff_A( 11, vi + V3i(0,1,0), 4 ) += (h_inv[1]*h_inv[1]*0.218217890236);
	ctx.coeff_A( 13, vi + V3i(0,-1,0), 4 ) += (h_inv[1]*h_inv[1]*0.0824786098842);
	ctx.coeff_A( 13, vi + V3i(0,0,0), 4 ) += -(h_inv[1]*h_inv[1]*0.0824786098842);
	ctx.coeff_A( 13, vi + V3i(0,0,0), 4 ) += -(h_inv[1]*h_inv[1]*0.0824786098842);
	ctx.coeff_A( 13, vi + V3i(0,1,0), 4 ) += (h_inv[1]*h_inv[1]*0.0824786098842);
	ctx.coeff_A( 0, vi + V3i(0,-1,0), 5 ) += (h_inv[1]*h_inv[1]*0.1490711985);
	ctx.coeff_A( 0, vi + V3i(0,0,0), 5 ) += -(h_inv[1]*h_inv[1]*0.1490711985);
	ctx.coeff_A( 0, vi + V3i(0,0,0), 5 ) += -(h_inv[1]*h_inv[1]*0.1490711985);
	ctx.coeff_A( 0, vi + V3i(0,1,0), 5 ) += (h_inv[1]*h_inv[1]*0.1490711985);
	ctx.coeff_A( 3, vi + V3i(0,-1,0), 5 ) += (h_inv[1]*h_inv[1]*-0.164957219768);
	ctx.coeff_A( 3, vi + V3i(0,0,0), 5 ) += -(h_inv[1]*h_inv[1]*-0.164957219768);
	ctx.coeff_A( 3, vi + V3i(0,0,0), 5 ) += -(h_inv[1]*h_inv[1]*-0.164957219768);
	ctx.coeff_A( 3, vi + V3i(0,1,0), 5 ) += (h_inv[1]*h_inv[1]*-0.164957219768);
	ctx.coeff_A( 5, vi + V3i(0,-1,0), 5 ) += (h_inv[1]*h_inv[1]*-0.238095238095);
	ctx.coeff_A( 5, vi + V3i(0,0,0), 5 ) += -(h_inv[1]*h_inv[1]*-0.238095238095);
	ctx.coeff_A( 5, vi + V3i(0,0,0), 5 ) += -(h_inv[1]*h_inv[1]*-0.238095238095);
	ctx.coeff_A( 5, vi + V3i(0,1,0), 5 ) += (h_inv[1]*h_inv[1]*-0.238095238095);
	ctx.coeff_A( 12, vi + V3i(0,-1,0), 5 ) += (h_inv[1]*h_inv[1]*0.142857142857);
	ctx.coeff_A( 12, vi + V3i(0,0,0), 5 ) += -(h_inv[1]*h_inv[1]*0.142857142857);
	ctx.coeff_A( 12, vi + V3i(0,0,0), 5 ) += -(h_inv[1]*h_inv[1]*0.142857142857);
	ctx.coeff_A( 12, vi + V3i(0,1,0), 5 ) += (h_inv[1]*h_inv[1]*0.142857142857);
	ctx.coeff_A( 14, vi + V3i(0,-1,0), 5 ) += (h_inv[1]*h_inv[1]*0.127775313);
	ctx.coeff_A( 14, vi + V3i(0,0,0), 5 ) += -(h_inv[1]*h_inv[1]*0.127775313);
	ctx.coeff_A( 14, vi + V3i(0,0,0), 5 ) += -(h_inv[1]*h_inv[1]*0.127775313);
	ctx.coeff_A( 14, vi + V3i(0,1,0), 5 ) += (h_inv[1]*h_inv[1]*0.127775313);
	ctx.coeff_A( 1, vi + V3i(0,-1,0), 6 ) += (h_inv[1]*h_inv[1]*0.207019667803);
	ctx.coeff_A( 1, vi + V3i(0,0,0), 6 ) += -(h_inv[1]*h_inv[1]*0.207019667803);
	ctx.coeff_A( 1, vi + V3i(0,0,0), 6 ) += -(h_inv[1]*h_inv[1]*0.207019667803);
	ctx.coeff_A( 1, vi + V3i(0,1,0), 6 ) += (h_inv[1]*h_inv[1]*0.207019667803);
	ctx.coeff_A( 6, vi + V3i(0,-1,0), 6 ) += (h_inv[1]*h_inv[1]*-0.444444444444);
	ctx.coeff_A( 6, vi + V3i(0,0,0), 6 ) += -(h_inv[1]*h_inv[1]*-0.444444444444);
	ctx.coeff_A( 6, vi + V3i(0,0,0), 6 ) += -(h_inv[1]*h_inv[1]*-0.444444444444);
	ctx.coeff_A( 6, vi + V3i(0,1,0), 6 ) += (h_inv[1]*h_inv[1]*-0.444444444444);
	ctx.coeff_A( 8, vi + V3i(0,-1,0), 6 ) += (h_inv[1]*h_inv[1]*-0.0860662965824);
	ctx.coeff_A( 8, vi + V3i(0,0,0), 6 ) += -(h_inv[1]*h_inv[1]*-0.0860662965824);
	ctx.coeff_A( 8, vi + V3i(0,0,0), 6 ) += -(h_inv[1]*h_inv[1]*-0.0860662965824);
	ctx.coeff_A( 8, vi + V3i(0,1,0), 6 ) += (h_inv[1]*h_inv[1]*-0.0860662965824);
	ctx.coeff_A( 2, vi + V3i(0,-1,0), 7 ) += (h_inv[1]*h_inv[1]*0.207019667803);
	ctx.coeff_A( 2, vi + V3i(0,0,0), 7 ) += -(h_inv[1]*h_inv[1]*0.207019667803);
	ctx.coeff_A( 2, vi + V3i(0,0,0), 7 ) += -(h_inv[1]*h_inv[1]*0.207019667803);
	ctx.coeff_A( 2, vi + V3i(0,1,0), 7 ) += (h_inv[1]*h_inv[1]*0.207019667803);
	ctx.coeff_A( 7, vi + V3i(0,-1,0), 7 ) += (h_inv[1]*h_inv[1]*-0.444444444444);
	ctx.coeff_A( 7, vi + V3i(0,0,0), 7 ) += -(h_inv[1]*h_inv[1]*-0.444444444444);
	ctx.coeff_A( 7, vi + V3i(0,0,0), 7 ) += -(h_inv[1]*h_inv[1]*-0.444444444444);
	ctx.coeff_A( 7, vi + V3i(0,1,0), 7 ) += (h_inv[1]*h_inv[1]*-0.444444444444);
	ctx.coeff_A( 9, vi + V3i(0,-1,0), 7 ) += (h_inv[1]*h_inv[1]*-0.0860662965824);
	ctx.coeff_A( 9, vi + V3i(0,0,0), 7 ) += -(h_inv[1]*h_inv[1]*-0.0860662965824);
	ctx.coeff_A( 9, vi + V3i(0,0,0), 7 ) += -(h_inv[1]*h_inv[1]*-0.0860662965824);
	ctx.coeff_A( 9, vi + V3i(0,1,0), 7 ) += (h_inv[1]*h_inv[1]*-0.0860662965824);
	ctx.coeff_A( 1, vi + V3i(0,-1,0), 8 ) += (h_inv[1]*h_inv[1]*0.0534522483825);
	ctx.coeff_A( 1, vi + V3i(0,0,0), 8 ) += -(h_inv[1]*h_inv[1]*0.0534522483825);
	ctx.coeff_A( 1, vi + V3i(0,0,0), 8 ) += -(h_inv[1]*h_inv[1]*0.0534522483825);
	ctx.coeff_A( 1, vi + V3i(0,1,0), 8 ) += (h_inv[1]*h_inv[1]*0.0534522483825);
	ctx.coeff_A( 6, vi + V3i(0,-1,0), 8 ) += (h_inv[1]*h_inv[1]*-0.0860662965824);
	ctx.coeff_A( 6, vi + V3i(0,0,0), 8 ) += -(h_inv[1]*h_inv[1]*-0.0860662965824);
	ctx.coeff_A( 6, vi + V3i(0,0,0), 8 ) += -(h_inv[1]*h_inv[1]*-0.0860662965824);
	ctx.coeff_A( 6, vi + V3i(0,1,0), 8 ) += (h_inv[1]*h_inv[1]*-0.0860662965824);
	ctx.coeff_A( 8, vi + V3i(0,-1,0), 8 ) += (h_inv[1]*h_inv[1]*-0.133333333333);
	ctx.coeff_A( 8, vi + V3i(0,0,0), 8 ) += -(h_inv[1]*h_inv[1]*-0.133333333333);
	ctx.coeff_A( 8, vi + V3i(0,0,0), 8 ) += -(h_inv[1]*h_inv[1]*-0.133333333333);
	ctx.coeff_A( 8, vi + V3i(0,1,0), 8 ) += (h_inv[1]*h_inv[1]*-0.133333333333);
	ctx.coeff_A( 2, vi + V3i(0,-1,0), 9 ) += (h_inv[1]*h_inv[1]*0.160356745147);
	ctx.coeff_A( 2, vi + V3i(0,0,0), 9 ) += -(h_inv[1]*h_inv[1]*0.160356745147);
	ctx.coeff_A( 2, vi + V3i(0,0,0), 9 ) += -(h_inv[1]*h_inv[1]*0.160356745147);
	ctx.coeff_A( 2, vi + V3i(0,1,0), 9 ) += (h_inv[1]*h_inv[1]*0.160356745147);
	ctx.coeff_A( 7, vi + V3i(0,-1,0), 9 ) += (h_inv[1]*h_inv[1]*-0.0860662965824);
	ctx.coeff_A( 7, vi + V3i(0,0,0), 9 ) += -(h_inv[1]*h_inv[1]*-0.0860662965824);
	ctx.coeff_A( 7, vi + V3i(0,0,0), 9 ) += -(h_inv[1]*h_inv[1]*-0.0860662965824);
	ctx.coeff_A( 7, vi + V3i(0,1,0), 9 ) += (h_inv[1]*h_inv[1]*-0.0860662965824);
	ctx.coeff_A( 9, vi + V3i(0,-1,0), 9 ) += (h_inv[1]*h_inv[1]*-0.4);
	ctx.coeff_A( 9, vi + V3i(0,0,0), 9 ) += -(h_inv[1]*h_inv[1]*-0.4);
	ctx.coeff_A( 9, vi + V3i(0,0,0), 9 ) += -(h_inv[1]*h_inv[1]*-0.4);
	ctx.coeff_A( 9, vi + V3i(0,1,0), 9 ) += (h_inv[1]*h_inv[1]*-0.4);
	ctx.coeff_A( 3, vi + V3i(0,-1,0), 10 ) += (h_inv[1]*h_inv[1]*0.218217890236);
	ctx.coeff_A( 3, vi + V3i(0,0,0), 10 ) += -(h_inv[1]*h_inv[1]*0.218217890236);
	ctx.coeff_A( 3, vi + V3i(0,0,0), 10 ) += -(h_inv[1]*h_inv[1]*0.218217890236);
	ctx.coeff_A( 3, vi + V3i(0,1,0), 10 ) += (h_inv[1]*h_inv[1]*0.218217890236);
	ctx.coeff_A( 10, vi + V3i(0,-1,0), 10 ) += (h_inv[1]*h_inv[1]*-0.454545454545);
	ctx.coeff_A( 10, vi + V3i(0,0,0), 10 ) += -(h_inv[1]*h_inv[1]*-0.454545454545);
	ctx.coeff_A( 10, vi + V3i(0,0,0), 10 ) += -(h_inv[1]*h_inv[1]*-0.454545454545);
	ctx.coeff_A( 10, vi + V3i(0,1,0), 10 ) += (h_inv[1]*h_inv[1]*-0.454545454545);
	ctx.coeff_A( 12, vi + V3i(0,-1,0), 10 ) += (h_inv[1]*h_inv[1]*-0.0687208132744);
	ctx.coeff_A( 12, vi + V3i(0,0,0), 10 ) += -(h_inv[1]*h_inv[1]*-0.0687208132744);
	ctx.coeff_A( 12, vi + V3i(0,0,0), 10 ) += -(h_inv[1]*h_inv[1]*-0.0687208132744);
	ctx.coeff_A( 12, vi + V3i(0,1,0), 10 ) += (h_inv[1]*h_inv[1]*-0.0687208132744);
	ctx.coeff_A( 4, vi + V3i(0,-1,0), 11 ) += (h_inv[1]*h_inv[1]*0.218217890236);
	ctx.coeff_A( 4, vi + V3i(0,0,0), 11 ) += -(h_inv[1]*h_inv[1]*0.218217890236);
	ctx.coeff_A( 4, vi + V3i(0,0,0), 11 ) += -(h_inv[1]*h_inv[1]*0.218217890236);
	ctx.coeff_A( 4, vi + V3i(0,1,0), 11 ) += (h_inv[1]*h_inv[1]*0.218217890236);
	ctx.coeff_A( 11, vi + V3i(0,-1,0), 11 ) += (h_inv[1]*h_inv[1]*-0.454545454545);
	ctx.coeff_A( 11, vi + V3i(0,0,0), 11 ) += -(h_inv[1]*h_inv[1]*-0.454545454545);
	ctx.coeff_A( 11, vi + V3i(0,0,0), 11 ) += -(h_inv[1]*h_inv[1]*-0.454545454545);
	ctx.coeff_A( 11, vi + V3i(0,1,0), 11 ) += (h_inv[1]*h_inv[1]*-0.454545454545);
	ctx.coeff_A( 13, vi + V3i(0,-1,0), 11 ) += (h_inv[1]*h_inv[1]*-0.0687208132744);
	ctx.coeff_A( 13, vi + V3i(0,0,0), 11 ) += -(h_inv[1]*h_inv[1]*-0.0687208132744);
	ctx.coeff_A( 13, vi + V3i(0,0,0), 11 ) += -(h_inv[1]*h_inv[1]*-0.0687208132744);
	ctx.coeff_A( 13, vi + V3i(0,1,0), 11 ) += (h_inv[1]*h_inv[1]*-0.0687208132744);
	ctx.coeff_A( 3, vi + V3i(0,-1,0), 12 ) += (h_inv[1]*h_inv[1]*0.0824786098842);
	ctx.coeff_A( 3, vi + V3i(0,0,0), 12 ) += -(h_inv[1]*h_inv[1]*0.0824786098842);
	ctx.coeff_A( 3, vi + V3i(0,0,0), 12 ) += -(h_inv[1]*h_inv[1]*0.0824786098842);
	ctx.coeff_A( 3, vi + V3i(0,1,0), 12 ) += (h_inv[1]*h_inv[1]*0.0824786098842);
	ctx.coeff_A( 5, vi + V3i(0,-1,0), 12 ) += (h_inv[1]*h_inv[1]*0.142857142857);
	ctx.coeff_A( 5, vi + V3i(0,0,0), 12 ) += -(h_inv[1]*h_inv[1]*0.142857142857);
	ctx.coeff_A( 5, vi + V3i(0,0,0), 12 ) += -(h_inv[1]*h_inv[1]*0.142857142857);
	ctx.coeff_A( 5, vi + V3i(0,1,0), 12 ) += (h_inv[1]*h_inv[1]*0.142857142857);
	ctx.coeff_A( 10, vi + V3i(0,-1,0), 12 ) += (h_inv[1]*h_inv[1]*-0.0687208132744);
	ctx.coeff_A( 10, vi + V3i(0,0,0), 12 ) += -(h_inv[1]*h_inv[1]*-0.0687208132744);
	ctx.coeff_A( 10, vi + V3i(0,0,0), 12 ) += -(h_inv[1]*h_inv[1]*-0.0687208132744);
	ctx.coeff_A( 10, vi + V3i(0,1,0), 12 ) += (h_inv[1]*h_inv[1]*-0.0687208132744);
	ctx.coeff_A( 12, vi + V3i(0,-1,0), 12 ) += (h_inv[1]*h_inv[1]*-0.298701298701);
	ctx.coeff_A( 12, vi + V3i(0,0,0), 12 ) += -(h_inv[1]*h_inv[1]*-0.298701298701);
	ctx.coeff_A( 12, vi + V3i(0,0,0), 12 ) += -(h_inv[1]*h_inv[1]*-0.298701298701);
	ctx.coeff_A( 12, vi + V3i(0,1,0), 12 ) += (h_inv[1]*h_inv[1]*-0.298701298701);
	ctx.coeff_A( 14, vi + V3i(0,-1,0), 12 ) += (h_inv[1]*h_inv[1]*-0.174239063182);
	ctx.coeff_A( 14, vi + V3i(0,0,0), 12 ) += -(h_inv[1]*h_inv[1]*-0.174239063182);
	ctx.coeff_A( 14, vi + V3i(0,0,0), 12 ) += -(h_inv[1]*h_inv[1]*-0.174239063182);
	ctx.coeff_A( 14, vi + V3i(0,1,0), 12 ) += (h_inv[1]*h_inv[1]*-0.174239063182);
	ctx.coeff_A( 4, vi + V3i(0,-1,0), 13 ) += (h_inv[1]*h_inv[1]*0.0824786098842);
	ctx.coeff_A( 4, vi + V3i(0,0,0), 13 ) += -(h_inv[1]*h_inv[1]*0.0824786098842);
	ctx.coeff_A( 4, vi + V3i(0,0,0), 13 ) += -(h_inv[1]*h_inv[1]*0.0824786098842);
	ctx.coeff_A( 4, vi + V3i(0,1,0), 13 ) += (h_inv[1]*h_inv[1]*0.0824786098842);
	ctx.coeff_A( 11, vi + V3i(0,-1,0), 13 ) += (h_inv[1]*h_inv[1]*-0.0687208132744);
	ctx.coeff_A( 11, vi + V3i(0,0,0), 13 ) += -(h_inv[1]*h_inv[1]*-0.0687208132744);
	ctx.coeff_A( 11, vi + V3i(0,0,0), 13 ) += -(h_inv[1]*h_inv[1]*-0.0687208132744);
	ctx.coeff_A( 11, vi + V3i(0,1,0), 13 ) += (h_inv[1]*h_inv[1]*-0.0687208132744);
	ctx.coeff_A( 13, vi + V3i(0,-1,0), 13 ) += (h_inv[1]*h_inv[1]*-0.298701298701);
	ctx.coeff_A( 13, vi + V3i(0,0,0), 13 ) += -(h_inv[1]*h_inv[1]*-0.298701298701);
	ctx.coeff_A( 13, vi + V3i(0,0,0), 13 ) += -(h_inv[1]*h_inv[1]*-0.298701298701);
	ctx.coeff_A( 13, vi + V3i(0,1,0), 13 ) += (h_inv[1]*h_inv[1]*-0.298701298701);
	ctx.coeff_A( 3, vi + V3i(0,-1,0), 14 ) += (h_inv[1]*h_inv[1]*0.0368855556782);
	ctx.coeff_A( 3, vi + V3i(0,0,0), 14 ) += -(h_inv[1]*h_inv[1]*0.0368855556782);
	ctx.coeff_A( 3, vi + V3i(0,0,0), 14 ) += -(h_inv[1]*h_inv[1]*0.0368855556782);
	ctx.coeff_A( 3, vi + V3i(0,1,0), 14 ) += (h_inv[1]*h_inv[1]*0.0368855556782);
	ctx.coeff_A( 5, vi + V3i(0,-1,0), 14 ) += (h_inv[1]*h_inv[1]*0.127775313);
	ctx.coeff_A( 5, vi + V3i(0,0,0), 14 ) += -(h_inv[1]*h_inv[1]*0.127775313);
	ctx.coeff_A( 5, vi + V3i(0,0,0), 14 ) += -(h_inv[1]*h_inv[1]*0.127775313);
	ctx.coeff_A( 5, vi + V3i(0,1,0), 14 ) += (h_inv[1]*h_inv[1]*0.127775313);
	ctx.coeff_A( 12, vi + V3i(0,-1,0), 14 ) += (h_inv[1]*h_inv[1]*-0.174239063182);
	ctx.coeff_A( 12, vi + V3i(0,0,0), 14 ) += -(h_inv[1]*h_inv[1]*-0.174239063182);
	ctx.coeff_A( 12, vi + V3i(0,0,0), 14 ) += -(h_inv[1]*h_inv[1]*-0.174239063182);
	ctx.coeff_A( 12, vi + V3i(0,1,0), 14 ) += (h_inv[1]*h_inv[1]*-0.174239063182);
	ctx.coeff_A( 14, vi + V3i(0,-1,0), 14 ) += (h_inv[1]*h_inv[1]*-0.246753246753);
	ctx.coeff_A( 14, vi + V3i(0,0,0), 14 ) += -(h_inv[1]*h_inv[1]*-0.246753246753);
	ctx.coeff_A( 14, vi + V3i(0,0,0), 14 ) += -(h_inv[1]*h_inv[1]*-0.246753246753);
	ctx.coeff_A( 14, vi + V3i(0,1,0), 14 ) += (h_inv[1]*h_inv[1]*-0.246753246753);
	ctx.coeff_A( 0, vi + V3i(0,0,0), 0 ) += M_9_real.coeffRef(0, 0);
	ctx.coeff_A( 1, vi + V3i(-1,0,0), 0 ) += (0.5*M_9_real.coeffRef(1, 0));
	ctx.coeff_A( 1, vi + V3i(0,0,0), 0 ) += (0.5*M_9_real.coeffRef(1, 0));
	ctx.coeff_A( 2, vi + V3i(0,-1,0), 0 ) += (0.5*M_9_real.coeffRef(2, 0));
	ctx.coeff_A( 2, vi + V3i(0,0,0), 0 ) += (0.5*M_9_real.coeffRef(2, 0));
	ctx.coeff_A( 0, vi + V3i(0,0,0), 1 ) += (0.5*M_9_real.coeffRef(0, 1));
	ctx.coeff_A( 0, vi + V3i(1,0,0), 1 ) += (0.5*M_9_real.coeffRef(0, 1));
	ctx.coeff_A( 1, vi + V3i(0,0,0), 1 ) += M_9_real.coeffRef(1, 1);
	ctx.coeff_A( 3, vi + V3i(0,0,0), 1 ) += (0.5*M_9_real.coeffRef(3, 1));
	ctx.coeff_A( 3, vi + V3i(1,0,0), 1 ) += (0.5*M_9_real.coeffRef(3, 1));
	ctx.coeff_A( 4, vi + V3i(0,-1,0), 1 ) += (0.5*M_9_real.coeffRef(4, 1));
	ctx.coeff_A( 4, vi + V3i(0,0,0), 1 ) += (0.5*M_9_real.coeffRef(4, 1));
	ctx.coeff_A( 0, vi + V3i(0,0,0), 2 ) += (0.5*M_9_real.coeffRef(0, 2));
	ctx.coeff_A( 0, vi + V3i(0,1,0), 2 ) += (0.5*M_9_real.coeffRef(0, 2));
	ctx.coeff_A( 2, vi + V3i(0,0,0), 2 ) += M_9_real.coeffRef(2, 2);
	ctx.coeff_A( 4, vi + V3i(-1,0,0), 2 ) += (0.5*M_9_real.coeffRef(4, 2));
	ctx.coeff_A( 4, vi + V3i(0,0,0), 2 ) += (0.5*M_9_real.coeffRef(4, 2));
	ctx.coeff_A( 5, vi + V3i(0,0,0), 2 ) += (0.5*M_9_real.coeffRef(5, 2));
	ctx.coeff_A( 5, vi + V3i(0,1,0), 2 ) += (0.5*M_9_real.coeffRef(5, 2));
	ctx.coeff_A( 1, vi + V3i(-1,0,0), 3 ) += (0.5*M_9_real.coeffRef(1, 3));
	ctx.coeff_A( 1, vi + V3i(0,0,0), 3 ) += (0.5*M_9_real.coeffRef(1, 3));
	ctx.coeff_A( 3, vi + V3i(0,0,0), 3 ) += M_9_real.coeffRef(3, 3);
	ctx.coeff_A( 6, vi + V3i(-1,0,0), 3 ) += (0.5*M_9_real.coeffRef(6, 3));
	ctx.coeff_A( 6, vi + V3i(0,0,0), 3 ) += (0.5*M_9_real.coeffRef(6, 3));
	ctx.coeff_A( 7, vi + V3i(0,-1,0), 3 ) += (0.5*M_9_real.coeffRef(7, 3));
	ctx.coeff_A( 7, vi + V3i(0,0,0), 3 ) += (0.5*M_9_real.coeffRef(7, 3));
	ctx.coeff_A( 1, vi + V3i(0,0,0), 4 ) += (0.5*M_9_real.coeffRef(1, 4));
	ctx.coeff_A( 1, vi + V3i(0,1,0), 4 ) += (0.5*M_9_real.coeffRef(1, 4));
	ctx.coeff_A( 2, vi + V3i(0,0,0), 4 ) += (0.5*M_9_real.coeffRef(2, 4));
	ctx.coeff_A( 2, vi + V3i(1,0,0), 4 ) += (0.5*M_9_real.coeffRef(2, 4));
	ctx.coeff_A( 4, vi + V3i(0,0,0), 4 ) += M_9_real.coeffRef(4, 4);
	ctx.coeff_A( 7, vi + V3i(0,0,0), 4 ) += (0.5*M_9_real.coeffRef(7, 4));
	ctx.coeff_A( 7, vi + V3i(1,0,0), 4 ) += (0.5*M_9_real.coeffRef(7, 4));
	ctx.coeff_A( 8, vi + V3i(0,0,0), 4 ) += (0.5*M_9_real.coeffRef(8, 4));
	ctx.coeff_A( 8, vi + V3i(0,1,0), 4 ) += (0.5*M_9_real.coeffRef(8, 4));
	ctx.coeff_A( 2, vi + V3i(0,-1,0), 5 ) += (0.5*M_9_real.coeffRef(2, 5));
	ctx.coeff_A( 2, vi + V3i(0,0,0), 5 ) += (0.5*M_9_real.coeffRef(2, 5));
	ctx.coeff_A( 5, vi + V3i(0,0,0), 5 ) += M_9_real.coeffRef(5, 5);
	ctx.coeff_A( 8, vi + V3i(-1,0,0), 5 ) += (0.5*M_9_real.coeffRef(8, 5));
	ctx.coeff_A( 8, vi + V3i(0,0,0), 5 ) += (0.5*M_9_real.coeffRef(8, 5));
	ctx.coeff_A( 9, vi + V3i(0,-1,0), 5 ) += (0.5*M_9_real.coeffRef(9, 5));
	ctx.coeff_A( 9, vi + V3i(0,0,0), 5 ) += (0.5*M_9_real.coeffRef(9, 5));
	ctx.coeff_A( 3, vi + V3i(0,0,0), 6 ) += (0.5*M_9_real.coeffRef(3, 6));
	ctx.coeff_A( 3, vi + V3i(1,0,0), 6 ) += (0.5*M_9_real.coeffRef(3, 6));
	ctx.coeff_A( 6, vi + V3i(0,0,0), 6 ) += M_9_real.coeffRef(6, 6);
	ctx.coeff_A( 10, vi + V3i(0,0,0), 6 ) += (0.5*M_9_real.coeffRef(10, 6));
	ctx.coeff_A( 10, vi + V3i(1,0,0), 6 ) += (0.5*M_9_real.coeffRef(10, 6));
	ctx.coeff_A( 11, vi + V3i(0,-1,0), 6 ) += (0.5*M_9_real.coeffRef(11, 6));
	ctx.coeff_A( 11, vi + V3i(0,0,0), 6 ) += (0.5*M_9_real.coeffRef(11, 6));
	ctx.coeff_A( 3, vi + V3i(0,0,0), 7 ) += (0.5*M_9_real.coeffRef(3, 7));
	ctx.coeff_A( 3, vi + V3i(0,1,0), 7 ) += (0.5*M_9_real.coeffRef(3, 7));
	ctx.coeff_A( 4, vi + V3i(-1,0,0), 7 ) += (0.5*M_9_real.coeffRef(4, 7));
	ctx.coeff_A( 4, vi + V3i(0,0,0), 7 ) += (0.5*M_9_real.coeffRef(4, 7));
	ctx.coeff_A( 7, vi + V3i(0,0,0), 7 ) += M_9_real.coeffRef(7, 7);
	ctx.coeff_A( 11, vi + V3i(-1,0,0), 7 ) += (0.5*M_9_real.coeffRef(11, 7));
	ctx.coeff_A( 11, vi + V3i(0,0,0), 7 ) += (0.5*M_9_real.coeffRef(11, 7));
	ctx.coeff_A( 12, vi + V3i(0,0,0), 7 ) += (0.5*M_9_real.coeffRef(12, 7));
	ctx.coeff_A( 12, vi + V3i(0,1,0), 7 ) += (0.5*M_9_real.coeffRef(12, 7));
	ctx.coeff_A( 4, vi + V3i(0,-1,0), 8 ) += (0.5*M_9_real.coeffRef(4, 8));
	ctx.coeff_A( 4, vi + V3i(0,0,0), 8 ) += (0.5*M_9_real.coeffRef(4, 8));
	ctx.coeff_A( 5, vi + V3i(0,0,0), 8 ) += (0.5*M_9_real.coeffRef(5, 8));
	ctx.coeff_A( 5, vi + V3i(1,0,0), 8 ) += (0.5*M_9_real.coeffRef(5, 8));
	ctx.coeff_A( 8, vi + V3i(0,0,0), 8 ) += M_9_real.coeffRef(8, 8);
	ctx.coeff_A( 12, vi + V3i(0,0,0), 8 ) += (0.5*M_9_real.coeffRef(12, 8));
	ctx.coeff_A( 12, vi + V3i(1,0,0), 8 ) += (0.5*M_9_real.coeffRef(12, 8));
	ctx.coeff_A( 13, vi + V3i(0,-1,0), 8 ) += (0.5*M_9_real.coeffRef(13, 8));
	ctx.coeff_A( 13, vi + V3i(0,0,0), 8 ) += (0.5*M_9_real.coeffRef(13, 8));
	ctx.coeff_A( 5, vi + V3i(0,0,0), 9 ) += (0.5*M_9_real.coeffRef(5, 9));
	ctx.coeff_A( 5, vi + V3i(0,1,0), 9 ) += (0.5*M_9_real.coeffRef(5, 9));
	ctx.coeff_A( 9, vi + V3i(0,0,0), 9 ) += M_9_real.coeffRef(9, 9);
	ctx.coeff_A( 13, vi + V3i(-1,0,0), 9 ) += (0.5*M_9_real.coeffRef(13, 9));
	ctx.coeff_A( 13, vi + V3i(0,0,0), 9 ) += (0.5*M_9_real.coeffRef(13, 9));
	ctx.coeff_A( 14, vi + V3i(0,0,0), 9 ) += (0.5*M_9_real.coeffRef(14, 9));
	ctx.coeff_A( 14, vi + V3i(0,1,0), 9 ) += (0.5*M_9_real.coeffRef(14, 9));
	ctx.coeff_A( 6, vi + V3i(-1,0,0), 10 ) += (0.5*M_9_real.coeffRef(6, 10));
	ctx.coeff_A( 6, vi + V3i(0,0,0), 10 ) += (0.5*M_9_real.coeffRef(6, 10));
	ctx.coeff_A( 10, vi + V3i(0,0,0), 10 ) += M_9_real.coeffRef(10, 10);
	ctx.coeff_A( 6, vi + V3i(0,0,0), 11 ) += (0.5*M_9_real.coeffRef(6, 11));
	ctx.coeff_A( 6, vi + V3i(0,1,0), 11 ) += (0.5*M_9_real.coeffRef(6, 11));
	ctx.coeff_A( 7, vi + V3i(0,0,0), 11 ) += (0.5*M_9_real.coeffRef(7, 11));
	ctx.coeff_A( 7, vi + V3i(1,0,0), 11 ) += (0.5*M_9_real.coeffRef(7, 11));
	ctx.coeff_A( 11, vi + V3i(0,0,0), 11 ) += M_9_real.coeffRef(11, 11);
	ctx.coeff_A( 7, vi + V3i(0,-1,0), 12 ) += (0.5*M_9_real.coeffRef(7, 12));
	ctx.coeff_A( 7, vi + V3i(0,0,0), 12 ) += (0.5*M_9_real.coeffRef(7, 12));
	ctx.coeff_A( 8, vi + V3i(-1,0,0), 12 ) += (0.5*M_9_real.coeffRef(8, 12));
	ctx.coeff_A( 8, vi + V3i(0,0,0), 12 ) += (0.5*M_9_real.coeffRef(8, 12));
	ctx.coeff_A( 12, vi + V3i(0,0,0), 12 ) += M_9_real.coeffRef(12, 12);
	ctx.coeff_A( 8, vi + V3i(0,0,0), 13 ) += (0.5*M_9_real.coeffRef(8, 13));
	ctx.coeff_A( 8, vi + V3i(0,1,0), 13 ) += (0.5*M_9_real.coeffRef(8, 13));
	ctx.coeff_A( 9, vi + V3i(0,0,0), 13 ) += (0.5*M_9_real.coeffRef(9, 13));
	ctx.coeff_A( 9, vi + V3i(1,0,0), 13 ) += (0.5*M_9_real.coeffRef(9, 13));
	ctx.coeff_A( 13, vi + V3i(0,0,0), 13 ) += M_9_real.coeffRef(13, 13);
	ctx.coeff_A( 9, vi + V3i(0,-1,0), 14 ) += (0.5*M_9_real.coeffRef(9, 14));
	ctx.coeff_A( 9, vi + V3i(0,0,0), 14 ) += (0.5*M_9_real.coeffRef(9, 14));
	ctx.coeff_A( 14, vi + V3i(0,0,0), 14 ) += M_9_real.coeffRef(14, 14);
	ctx.coeff_A( 1, vi + V3i(-1,0,0), 0 ) += -(h_inv[0]*M_10_real.coeffRef(1, 0));
	ctx.coeff_A( 1, vi + V3i(0,0,0), 0 ) += (h_inv[0]*M_10_real.coeffRef(1, 0));
	ctx.coeff_A( 2, vi + V3i(-1,-1,0), 0 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(2, 0));
	ctx.coeff_A( 2, vi + V3i(-1,0,0), 0 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(2, 0));
	ctx.coeff_A( 2, vi + V3i(0,-1,0), 0 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(2, 0));
	ctx.coeff_A( 2, vi + V3i(0,0,0), 0 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(2, 0));
	ctx.coeff_A( 2, vi + V3i(0,-1,0), 0 ) += (0.25*h_inv[0]*M_10_real.coeffRef(2, 0));
	ctx.coeff_A( 2, vi + V3i(0,0,0), 0 ) += (0.25*h_inv[0]*M_10_real.coeffRef(2, 0));
	ctx.coeff_A( 2, vi + V3i(1,-1,0), 0 ) += (0.25*h_inv[0]*M_10_real.coeffRef(2, 0));
	ctx.coeff_A( 2, vi + V3i(1,0,0), 0 ) += (0.25*h_inv[0]*M_10_real.coeffRef(2, 0));
	ctx.coeff_A( 0, vi + V3i(0,0,0), 1 ) += -(h_inv[0]*M_10_real.coeffRef(0, 1));
	ctx.coeff_A( 0, vi + V3i(1,0,0), 1 ) += (h_inv[0]*M_10_real.coeffRef(0, 1));
	ctx.coeff_A( 3, vi + V3i(0,0,0), 1 ) += -(h_inv[0]*M_10_real.coeffRef(3, 1));
	ctx.coeff_A( 3, vi + V3i(1,0,0), 1 ) += (h_inv[0]*M_10_real.coeffRef(3, 1));
	ctx.coeff_A( 4, vi + V3i(-1,-1,0), 1 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(4, 1));
	ctx.coeff_A( 4, vi + V3i(-1,0,0), 1 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(4, 1));
	ctx.coeff_A( 4, vi + V3i(0,-1,0), 1 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(4, 1));
	ctx.coeff_A( 4, vi + V3i(0,0,0), 1 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(4, 1));
	ctx.coeff_A( 4, vi + V3i(0,-1,0), 1 ) += (0.25*h_inv[0]*M_10_real.coeffRef(4, 1));
	ctx.coeff_A( 4, vi + V3i(0,0,0), 1 ) += (0.25*h_inv[0]*M_10_real.coeffRef(4, 1));
	ctx.coeff_A( 4, vi + V3i(1,-1,0), 1 ) += (0.25*h_inv[0]*M_10_real.coeffRef(4, 1));
	ctx.coeff_A( 4, vi + V3i(1,0,0), 1 ) += (0.25*h_inv[0]*M_10_real.coeffRef(4, 1));
	ctx.coeff_A( 0, vi + V3i(-1,0,0), 2 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(0, 2));
	ctx.coeff_A( 0, vi + V3i(-1,1,0), 2 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(0, 2));
	ctx.coeff_A( 0, vi + V3i(0,0,0), 2 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(0, 2));
	ctx.coeff_A( 0, vi + V3i(0,1,0), 2 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(0, 2));
	ctx.coeff_A( 0, vi + V3i(0,0,0), 2 ) += (0.25*h_inv[0]*M_10_real.coeffRef(0, 2));
	ctx.coeff_A( 0, vi + V3i(0,1,0), 2 ) += (0.25*h_inv[0]*M_10_real.coeffRef(0, 2));
	ctx.coeff_A( 0, vi + V3i(1,0,0), 2 ) += (0.25*h_inv[0]*M_10_real.coeffRef(0, 2));
	ctx.coeff_A( 0, vi + V3i(1,1,0), 2 ) += (0.25*h_inv[0]*M_10_real.coeffRef(0, 2));
	ctx.coeff_A( 4, vi + V3i(-1,0,0), 2 ) += -(h_inv[0]*M_10_real.coeffRef(4, 2));
	ctx.coeff_A( 4, vi + V3i(0,0,0), 2 ) += (h_inv[0]*M_10_real.coeffRef(4, 2));
	ctx.coeff_A( 5, vi + V3i(-1,0,0), 2 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(5, 2));
	ctx.coeff_A( 5, vi + V3i(-1,1,0), 2 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(5, 2));
	ctx.coeff_A( 5, vi + V3i(0,0,0), 2 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(5, 2));
	ctx.coeff_A( 5, vi + V3i(0,1,0), 2 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(5, 2));
	ctx.coeff_A( 5, vi + V3i(0,0,0), 2 ) += (0.25*h_inv[0]*M_10_real.coeffRef(5, 2));
	ctx.coeff_A( 5, vi + V3i(0,1,0), 2 ) += (0.25*h_inv[0]*M_10_real.coeffRef(5, 2));
	ctx.coeff_A( 5, vi + V3i(1,0,0), 2 ) += (0.25*h_inv[0]*M_10_real.coeffRef(5, 2));
	ctx.coeff_A( 5, vi + V3i(1,1,0), 2 ) += (0.25*h_inv[0]*M_10_real.coeffRef(5, 2));
	ctx.coeff_A( 1, vi + V3i(-1,0,0), 3 ) += -(h_inv[0]*M_10_real.coeffRef(1, 3));
	ctx.coeff_A( 1, vi + V3i(0,0,0), 3 ) += (h_inv[0]*M_10_real.coeffRef(1, 3));
	ctx.coeff_A( 6, vi + V3i(-1,0,0), 3 ) += -(h_inv[0]*M_10_real.coeffRef(6, 3));
	ctx.coeff_A( 6, vi + V3i(0,0,0), 3 ) += (h_inv[0]*M_10_real.coeffRef(6, 3));
	ctx.coeff_A( 7, vi + V3i(-1,-1,0), 3 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(7, 3));
	ctx.coeff_A( 7, vi + V3i(-1,0,0), 3 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(7, 3));
	ctx.coeff_A( 7, vi + V3i(0,-1,0), 3 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(7, 3));
	ctx.coeff_A( 7, vi + V3i(0,0,0), 3 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(7, 3));
	ctx.coeff_A( 7, vi + V3i(0,-1,0), 3 ) += (0.25*h_inv[0]*M_10_real.coeffRef(7, 3));
	ctx.coeff_A( 7, vi + V3i(0,0,0), 3 ) += (0.25*h_inv[0]*M_10_real.coeffRef(7, 3));
	ctx.coeff_A( 7, vi + V3i(1,-1,0), 3 ) += (0.25*h_inv[0]*M_10_real.coeffRef(7, 3));
	ctx.coeff_A( 7, vi + V3i(1,0,0), 3 ) += (0.25*h_inv[0]*M_10_real.coeffRef(7, 3));
	ctx.coeff_A( 1, vi + V3i(-1,0,0), 4 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(1, 4));
	ctx.coeff_A( 1, vi + V3i(-1,1,0), 4 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(1, 4));
	ctx.coeff_A( 1, vi + V3i(0,0,0), 4 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(1, 4));
	ctx.coeff_A( 1, vi + V3i(0,1,0), 4 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(1, 4));
	ctx.coeff_A( 1, vi + V3i(0,0,0), 4 ) += (0.25*h_inv[0]*M_10_real.coeffRef(1, 4));
	ctx.coeff_A( 1, vi + V3i(0,1,0), 4 ) += (0.25*h_inv[0]*M_10_real.coeffRef(1, 4));
	ctx.coeff_A( 1, vi + V3i(1,0,0), 4 ) += (0.25*h_inv[0]*M_10_real.coeffRef(1, 4));
	ctx.coeff_A( 1, vi + V3i(1,1,0), 4 ) += (0.25*h_inv[0]*M_10_real.coeffRef(1, 4));
	ctx.coeff_A( 2, vi + V3i(0,0,0), 4 ) += -(h_inv[0]*M_10_real.coeffRef(2, 4));
	ctx.coeff_A( 2, vi + V3i(1,0,0), 4 ) += (h_inv[0]*M_10_real.coeffRef(2, 4));
	ctx.coeff_A( 7, vi + V3i(0,0,0), 4 ) += -(h_inv[0]*M_10_real.coeffRef(7, 4));
	ctx.coeff_A( 7, vi + V3i(1,0,0), 4 ) += (h_inv[0]*M_10_real.coeffRef(7, 4));
	ctx.coeff_A( 8, vi + V3i(-1,0,0), 4 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(8, 4));
	ctx.coeff_A( 8, vi + V3i(-1,1,0), 4 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(8, 4));
	ctx.coeff_A( 8, vi + V3i(0,0,0), 4 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(8, 4));
	ctx.coeff_A( 8, vi + V3i(0,1,0), 4 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(8, 4));
	ctx.coeff_A( 8, vi + V3i(0,0,0), 4 ) += (0.25*h_inv[0]*M_10_real.coeffRef(8, 4));
	ctx.coeff_A( 8, vi + V3i(0,1,0), 4 ) += (0.25*h_inv[0]*M_10_real.coeffRef(8, 4));
	ctx.coeff_A( 8, vi + V3i(1,0,0), 4 ) += (0.25*h_inv[0]*M_10_real.coeffRef(8, 4));
	ctx.coeff_A( 8, vi + V3i(1,1,0), 4 ) += (0.25*h_inv[0]*M_10_real.coeffRef(8, 4));
	ctx.coeff_A( 2, vi + V3i(-1,-1,0), 5 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(2, 5));
	ctx.coeff_A( 2, vi + V3i(-1,0,0), 5 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(2, 5));
	ctx.coeff_A( 2, vi + V3i(0,-1,0), 5 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(2, 5));
	ctx.coeff_A( 2, vi + V3i(0,0,0), 5 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(2, 5));
	ctx.coeff_A( 2, vi + V3i(0,-1,0), 5 ) += (0.25*h_inv[0]*M_10_real.coeffRef(2, 5));
	ctx.coeff_A( 2, vi + V3i(0,0,0), 5 ) += (0.25*h_inv[0]*M_10_real.coeffRef(2, 5));
	ctx.coeff_A( 2, vi + V3i(1,-1,0), 5 ) += (0.25*h_inv[0]*M_10_real.coeffRef(2, 5));
	ctx.coeff_A( 2, vi + V3i(1,0,0), 5 ) += (0.25*h_inv[0]*M_10_real.coeffRef(2, 5));
	ctx.coeff_A( 8, vi + V3i(-1,0,0), 5 ) += -(h_inv[0]*M_10_real.coeffRef(8, 5));
	ctx.coeff_A( 8, vi + V3i(0,0,0), 5 ) += (h_inv[0]*M_10_real.coeffRef(8, 5));
	ctx.coeff_A( 9, vi + V3i(-1,-1,0), 5 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(9, 5));
	ctx.coeff_A( 9, vi + V3i(-1,0,0), 5 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(9, 5));
	ctx.coeff_A( 9, vi + V3i(0,-1,0), 5 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(9, 5));
	ctx.coeff_A( 9, vi + V3i(0,0,0), 5 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(9, 5));
	ctx.coeff_A( 9, vi + V3i(0,-1,0), 5 ) += (0.25*h_inv[0]*M_10_real.coeffRef(9, 5));
	ctx.coeff_A( 9, vi + V3i(0,0,0), 5 ) += (0.25*h_inv[0]*M_10_real.coeffRef(9, 5));
	ctx.coeff_A( 9, vi + V3i(1,-1,0), 5 ) += (0.25*h_inv[0]*M_10_real.coeffRef(9, 5));
	ctx.coeff_A( 9, vi + V3i(1,0,0), 5 ) += (0.25*h_inv[0]*M_10_real.coeffRef(9, 5));
	ctx.coeff_A( 3, vi + V3i(0,0,0), 6 ) += -(h_inv[0]*M_10_real.coeffRef(3, 6));
	ctx.coeff_A( 3, vi + V3i(1,0,0), 6 ) += (h_inv[0]*M_10_real.coeffRef(3, 6));
	ctx.coeff_A( 10, vi + V3i(0,0,0), 6 ) += -(h_inv[0]*M_10_real.coeffRef(10, 6));
	ctx.coeff_A( 10, vi + V3i(1,0,0), 6 ) += (h_inv[0]*M_10_real.coeffRef(10, 6));
	ctx.coeff_A( 11, vi + V3i(-1,-1,0), 6 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(11, 6));
	ctx.coeff_A( 11, vi + V3i(-1,0,0), 6 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(11, 6));
	ctx.coeff_A( 11, vi + V3i(0,-1,0), 6 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(11, 6));
	ctx.coeff_A( 11, vi + V3i(0,0,0), 6 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(11, 6));
	ctx.coeff_A( 11, vi + V3i(0,-1,0), 6 ) += (0.25*h_inv[0]*M_10_real.coeffRef(11, 6));
	ctx.coeff_A( 11, vi + V3i(0,0,0), 6 ) += (0.25*h_inv[0]*M_10_real.coeffRef(11, 6));
	ctx.coeff_A( 11, vi + V3i(1,-1,0), 6 ) += (0.25*h_inv[0]*M_10_real.coeffRef(11, 6));
	ctx.coeff_A( 11, vi + V3i(1,0,0), 6 ) += (0.25*h_inv[0]*M_10_real.coeffRef(11, 6));
	ctx.coeff_A( 3, vi + V3i(-1,0,0), 7 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(3, 7));
	ctx.coeff_A( 3, vi + V3i(-1,1,0), 7 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(3, 7));
	ctx.coeff_A( 3, vi + V3i(0,0,0), 7 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(3, 7));
	ctx.coeff_A( 3, vi + V3i(0,1,0), 7 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(3, 7));
	ctx.coeff_A( 3, vi + V3i(0,0,0), 7 ) += (0.25*h_inv[0]*M_10_real.coeffRef(3, 7));
	ctx.coeff_A( 3, vi + V3i(0,1,0), 7 ) += (0.25*h_inv[0]*M_10_real.coeffRef(3, 7));
	ctx.coeff_A( 3, vi + V3i(1,0,0), 7 ) += (0.25*h_inv[0]*M_10_real.coeffRef(3, 7));
	ctx.coeff_A( 3, vi + V3i(1,1,0), 7 ) += (0.25*h_inv[0]*M_10_real.coeffRef(3, 7));
	ctx.coeff_A( 4, vi + V3i(-1,0,0), 7 ) += -(h_inv[0]*M_10_real.coeffRef(4, 7));
	ctx.coeff_A( 4, vi + V3i(0,0,0), 7 ) += (h_inv[0]*M_10_real.coeffRef(4, 7));
	ctx.coeff_A( 11, vi + V3i(-1,0,0), 7 ) += -(h_inv[0]*M_10_real.coeffRef(11, 7));
	ctx.coeff_A( 11, vi + V3i(0,0,0), 7 ) += (h_inv[0]*M_10_real.coeffRef(11, 7));
	ctx.coeff_A( 12, vi + V3i(-1,0,0), 7 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(12, 7));
	ctx.coeff_A( 12, vi + V3i(-1,1,0), 7 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(12, 7));
	ctx.coeff_A( 12, vi + V3i(0,0,0), 7 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(12, 7));
	ctx.coeff_A( 12, vi + V3i(0,1,0), 7 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(12, 7));
	ctx.coeff_A( 12, vi + V3i(0,0,0), 7 ) += (0.25*h_inv[0]*M_10_real.coeffRef(12, 7));
	ctx.coeff_A( 12, vi + V3i(0,1,0), 7 ) += (0.25*h_inv[0]*M_10_real.coeffRef(12, 7));
	ctx.coeff_A( 12, vi + V3i(1,0,0), 7 ) += (0.25*h_inv[0]*M_10_real.coeffRef(12, 7));
	ctx.coeff_A( 12, vi + V3i(1,1,0), 7 ) += (0.25*h_inv[0]*M_10_real.coeffRef(12, 7));
	ctx.coeff_A( 4, vi + V3i(-1,-1,0), 8 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(4, 8));
	ctx.coeff_A( 4, vi + V3i(-1,0,0), 8 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(4, 8));
	ctx.coeff_A( 4, vi + V3i(0,-1,0), 8 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(4, 8));
	ctx.coeff_A( 4, vi + V3i(0,0,0), 8 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(4, 8));
	ctx.coeff_A( 4, vi + V3i(0,-1,0), 8 ) += (0.25*h_inv[0]*M_10_real.coeffRef(4, 8));
	ctx.coeff_A( 4, vi + V3i(0,0,0), 8 ) += (0.25*h_inv[0]*M_10_real.coeffRef(4, 8));
	ctx.coeff_A( 4, vi + V3i(1,-1,0), 8 ) += (0.25*h_inv[0]*M_10_real.coeffRef(4, 8));
	ctx.coeff_A( 4, vi + V3i(1,0,0), 8 ) += (0.25*h_inv[0]*M_10_real.coeffRef(4, 8));
	ctx.coeff_A( 5, vi + V3i(0,0,0), 8 ) += -(h_inv[0]*M_10_real.coeffRef(5, 8));
	ctx.coeff_A( 5, vi + V3i(1,0,0), 8 ) += (h_inv[0]*M_10_real.coeffRef(5, 8));
	ctx.coeff_A( 12, vi + V3i(0,0,0), 8 ) += -(h_inv[0]*M_10_real.coeffRef(12, 8));
	ctx.coeff_A( 12, vi + V3i(1,0,0), 8 ) += (h_inv[0]*M_10_real.coeffRef(12, 8));
	ctx.coeff_A( 13, vi + V3i(-1,-1,0), 8 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(13, 8));
	ctx.coeff_A( 13, vi + V3i(-1,0,0), 8 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(13, 8));
	ctx.coeff_A( 13, vi + V3i(0,-1,0), 8 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(13, 8));
	ctx.coeff_A( 13, vi + V3i(0,0,0), 8 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(13, 8));
	ctx.coeff_A( 13, vi + V3i(0,-1,0), 8 ) += (0.25*h_inv[0]*M_10_real.coeffRef(13, 8));
	ctx.coeff_A( 13, vi + V3i(0,0,0), 8 ) += (0.25*h_inv[0]*M_10_real.coeffRef(13, 8));
	ctx.coeff_A( 13, vi + V3i(1,-1,0), 8 ) += (0.25*h_inv[0]*M_10_real.coeffRef(13, 8));
	ctx.coeff_A( 13, vi + V3i(1,0,0), 8 ) += (0.25*h_inv[0]*M_10_real.coeffRef(13, 8));
	ctx.coeff_A( 5, vi + V3i(-1,0,0), 9 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(5, 9));
	ctx.coeff_A( 5, vi + V3i(-1,1,0), 9 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(5, 9));
	ctx.coeff_A( 5, vi + V3i(0,0,0), 9 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(5, 9));
	ctx.coeff_A( 5, vi + V3i(0,1,0), 9 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(5, 9));
	ctx.coeff_A( 5, vi + V3i(0,0,0), 9 ) += (0.25*h_inv[0]*M_10_real.coeffRef(5, 9));
	ctx.coeff_A( 5, vi + V3i(0,1,0), 9 ) += (0.25*h_inv[0]*M_10_real.coeffRef(5, 9));
	ctx.coeff_A( 5, vi + V3i(1,0,0), 9 ) += (0.25*h_inv[0]*M_10_real.coeffRef(5, 9));
	ctx.coeff_A( 5, vi + V3i(1,1,0), 9 ) += (0.25*h_inv[0]*M_10_real.coeffRef(5, 9));
	ctx.coeff_A( 13, vi + V3i(-1,0,0), 9 ) += -(h_inv[0]*M_10_real.coeffRef(13, 9));
	ctx.coeff_A( 13, vi + V3i(0,0,0), 9 ) += (h_inv[0]*M_10_real.coeffRef(13, 9));
	ctx.coeff_A( 14, vi + V3i(-1,0,0), 9 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(14, 9));
	ctx.coeff_A( 14, vi + V3i(-1,1,0), 9 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(14, 9));
	ctx.coeff_A( 14, vi + V3i(0,0,0), 9 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(14, 9));
	ctx.coeff_A( 14, vi + V3i(0,1,0), 9 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(14, 9));
	ctx.coeff_A( 14, vi + V3i(0,0,0), 9 ) += (0.25*h_inv[0]*M_10_real.coeffRef(14, 9));
	ctx.coeff_A( 14, vi + V3i(0,1,0), 9 ) += (0.25*h_inv[0]*M_10_real.coeffRef(14, 9));
	ctx.coeff_A( 14, vi + V3i(1,0,0), 9 ) += (0.25*h_inv[0]*M_10_real.coeffRef(14, 9));
	ctx.coeff_A( 14, vi + V3i(1,1,0), 9 ) += (0.25*h_inv[0]*M_10_real.coeffRef(14, 9));
	ctx.coeff_A( 6, vi + V3i(-1,0,0), 10 ) += -(h_inv[0]*M_10_real.coeffRef(6, 10));
	ctx.coeff_A( 6, vi + V3i(0,0,0), 10 ) += (h_inv[0]*M_10_real.coeffRef(6, 10));
	ctx.coeff_A( 6, vi + V3i(-1,0,0), 11 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(6, 11));
	ctx.coeff_A( 6, vi + V3i(-1,1,0), 11 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(6, 11));
	ctx.coeff_A( 6, vi + V3i(0,0,0), 11 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(6, 11));
	ctx.coeff_A( 6, vi + V3i(0,1,0), 11 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(6, 11));
	ctx.coeff_A( 6, vi + V3i(0,0,0), 11 ) += (0.25*h_inv[0]*M_10_real.coeffRef(6, 11));
	ctx.coeff_A( 6, vi + V3i(0,1,0), 11 ) += (0.25*h_inv[0]*M_10_real.coeffRef(6, 11));
	ctx.coeff_A( 6, vi + V3i(1,0,0), 11 ) += (0.25*h_inv[0]*M_10_real.coeffRef(6, 11));
	ctx.coeff_A( 6, vi + V3i(1,1,0), 11 ) += (0.25*h_inv[0]*M_10_real.coeffRef(6, 11));
	ctx.coeff_A( 7, vi + V3i(0,0,0), 11 ) += -(h_inv[0]*M_10_real.coeffRef(7, 11));
	ctx.coeff_A( 7, vi + V3i(1,0,0), 11 ) += (h_inv[0]*M_10_real.coeffRef(7, 11));
	ctx.coeff_A( 7, vi + V3i(-1,-1,0), 12 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(7, 12));
	ctx.coeff_A( 7, vi + V3i(-1,0,0), 12 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(7, 12));
	ctx.coeff_A( 7, vi + V3i(0,-1,0), 12 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(7, 12));
	ctx.coeff_A( 7, vi + V3i(0,0,0), 12 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(7, 12));
	ctx.coeff_A( 7, vi + V3i(0,-1,0), 12 ) += (0.25*h_inv[0]*M_10_real.coeffRef(7, 12));
	ctx.coeff_A( 7, vi + V3i(0,0,0), 12 ) += (0.25*h_inv[0]*M_10_real.coeffRef(7, 12));
	ctx.coeff_A( 7, vi + V3i(1,-1,0), 12 ) += (0.25*h_inv[0]*M_10_real.coeffRef(7, 12));
	ctx.coeff_A( 7, vi + V3i(1,0,0), 12 ) += (0.25*h_inv[0]*M_10_real.coeffRef(7, 12));
	ctx.coeff_A( 8, vi + V3i(-1,0,0), 12 ) += -(h_inv[0]*M_10_real.coeffRef(8, 12));
	ctx.coeff_A( 8, vi + V3i(0,0,0), 12 ) += (h_inv[0]*M_10_real.coeffRef(8, 12));
	ctx.coeff_A( 8, vi + V3i(-1,0,0), 13 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(8, 13));
	ctx.coeff_A( 8, vi + V3i(-1,1,0), 13 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(8, 13));
	ctx.coeff_A( 8, vi + V3i(0,0,0), 13 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(8, 13));
	ctx.coeff_A( 8, vi + V3i(0,1,0), 13 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(8, 13));
	ctx.coeff_A( 8, vi + V3i(0,0,0), 13 ) += (0.25*h_inv[0]*M_10_real.coeffRef(8, 13));
	ctx.coeff_A( 8, vi + V3i(0,1,0), 13 ) += (0.25*h_inv[0]*M_10_real.coeffRef(8, 13));
	ctx.coeff_A( 8, vi + V3i(1,0,0), 13 ) += (0.25*h_inv[0]*M_10_real.coeffRef(8, 13));
	ctx.coeff_A( 8, vi + V3i(1,1,0), 13 ) += (0.25*h_inv[0]*M_10_real.coeffRef(8, 13));
	ctx.coeff_A( 9, vi + V3i(0,0,0), 13 ) += -(h_inv[0]*M_10_real.coeffRef(9, 13));
	ctx.coeff_A( 9, vi + V3i(1,0,0), 13 ) += (h_inv[0]*M_10_real.coeffRef(9, 13));
	ctx.coeff_A( 9, vi + V3i(-1,-1,0), 14 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(9, 14));
	ctx.coeff_A( 9, vi + V3i(-1,0,0), 14 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(9, 14));
	ctx.coeff_A( 9, vi + V3i(0,-1,0), 14 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(9, 14));
	ctx.coeff_A( 9, vi + V3i(0,0,0), 14 ) += -(0.25*h_inv[0]*M_10_real.coeffRef(9, 14));
	ctx.coeff_A( 9, vi + V3i(0,-1,0), 14 ) += (0.25*h_inv[0]*M_10_real.coeffRef(9, 14));
	ctx.coeff_A( 9, vi + V3i(0,0,0), 14 ) += (0.25*h_inv[0]*M_10_real.coeffRef(9, 14));
	ctx.coeff_A( 9, vi + V3i(1,-1,0), 14 ) += (0.25*h_inv[0]*M_10_real.coeffRef(9, 14));
	ctx.coeff_A( 9, vi + V3i(1,0,0), 14 ) += (0.25*h_inv[0]*M_10_real.coeffRef(9, 14));
	ctx.coeff_A( 1, vi + V3i(-1,-1,0), 0 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(1, 0));
	ctx.coeff_A( 1, vi + V3i(-1,0,0), 0 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(1, 0));
	ctx.coeff_A( 1, vi + V3i(0,-1,0), 0 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(1, 0));
	ctx.coeff_A( 1, vi + V3i(0,0,0), 0 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(1, 0));
	ctx.coeff_A( 1, vi + V3i(-1,0,0), 0 ) += (0.25*h_inv[1]*M_11_real.coeffRef(1, 0));
	ctx.coeff_A( 1, vi + V3i(-1,1,0), 0 ) += (0.25*h_inv[1]*M_11_real.coeffRef(1, 0));
	ctx.coeff_A( 1, vi + V3i(0,0,0), 0 ) += (0.25*h_inv[1]*M_11_real.coeffRef(1, 0));
	ctx.coeff_A( 1, vi + V3i(0,1,0), 0 ) += (0.25*h_inv[1]*M_11_real.coeffRef(1, 0));
	ctx.coeff_A( 2, vi + V3i(0,-1,0), 0 ) += -(h_inv[1]*M_11_real.coeffRef(2, 0));
	ctx.coeff_A( 2, vi + V3i(0,0,0), 0 ) += (h_inv[1]*M_11_real.coeffRef(2, 0));
	ctx.coeff_A( 0, vi + V3i(0,-1,0), 1 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(0, 1));
	ctx.coeff_A( 0, vi + V3i(0,0,0), 1 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(0, 1));
	ctx.coeff_A( 0, vi + V3i(1,-1,0), 1 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(0, 1));
	ctx.coeff_A( 0, vi + V3i(1,0,0), 1 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(0, 1));
	ctx.coeff_A( 0, vi + V3i(0,0,0), 1 ) += (0.25*h_inv[1]*M_11_real.coeffRef(0, 1));
	ctx.coeff_A( 0, vi + V3i(0,1,0), 1 ) += (0.25*h_inv[1]*M_11_real.coeffRef(0, 1));
	ctx.coeff_A( 0, vi + V3i(1,0,0), 1 ) += (0.25*h_inv[1]*M_11_real.coeffRef(0, 1));
	ctx.coeff_A( 0, vi + V3i(1,1,0), 1 ) += (0.25*h_inv[1]*M_11_real.coeffRef(0, 1));
	ctx.coeff_A( 3, vi + V3i(0,-1,0), 1 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(3, 1));
	ctx.coeff_A( 3, vi + V3i(0,0,0), 1 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(3, 1));
	ctx.coeff_A( 3, vi + V3i(1,-1,0), 1 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(3, 1));
	ctx.coeff_A( 3, vi + V3i(1,0,0), 1 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(3, 1));
	ctx.coeff_A( 3, vi + V3i(0,0,0), 1 ) += (0.25*h_inv[1]*M_11_real.coeffRef(3, 1));
	ctx.coeff_A( 3, vi + V3i(0,1,0), 1 ) += (0.25*h_inv[1]*M_11_real.coeffRef(3, 1));
	ctx.coeff_A( 3, vi + V3i(1,0,0), 1 ) += (0.25*h_inv[1]*M_11_real.coeffRef(3, 1));
	ctx.coeff_A( 3, vi + V3i(1,1,0), 1 ) += (0.25*h_inv[1]*M_11_real.coeffRef(3, 1));
	ctx.coeff_A( 4, vi + V3i(0,-1,0), 1 ) += -(h_inv[1]*M_11_real.coeffRef(4, 1));
	ctx.coeff_A( 4, vi + V3i(0,0,0), 1 ) += (h_inv[1]*M_11_real.coeffRef(4, 1));
	ctx.coeff_A( 0, vi + V3i(0,0,0), 2 ) += -(h_inv[1]*M_11_real.coeffRef(0, 2));
	ctx.coeff_A( 0, vi + V3i(0,1,0), 2 ) += (h_inv[1]*M_11_real.coeffRef(0, 2));
	ctx.coeff_A( 4, vi + V3i(-1,-1,0), 2 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(4, 2));
	ctx.coeff_A( 4, vi + V3i(-1,0,0), 2 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(4, 2));
	ctx.coeff_A( 4, vi + V3i(0,-1,0), 2 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(4, 2));
	ctx.coeff_A( 4, vi + V3i(0,0,0), 2 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(4, 2));
	ctx.coeff_A( 4, vi + V3i(-1,0,0), 2 ) += (0.25*h_inv[1]*M_11_real.coeffRef(4, 2));
	ctx.coeff_A( 4, vi + V3i(-1,1,0), 2 ) += (0.25*h_inv[1]*M_11_real.coeffRef(4, 2));
	ctx.coeff_A( 4, vi + V3i(0,0,0), 2 ) += (0.25*h_inv[1]*M_11_real.coeffRef(4, 2));
	ctx.coeff_A( 4, vi + V3i(0,1,0), 2 ) += (0.25*h_inv[1]*M_11_real.coeffRef(4, 2));
	ctx.coeff_A( 5, vi + V3i(0,0,0), 2 ) += -(h_inv[1]*M_11_real.coeffRef(5, 2));
	ctx.coeff_A( 5, vi + V3i(0,1,0), 2 ) += (h_inv[1]*M_11_real.coeffRef(5, 2));
	ctx.coeff_A( 1, vi + V3i(-1,-1,0), 3 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(1, 3));
	ctx.coeff_A( 1, vi + V3i(-1,0,0), 3 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(1, 3));
	ctx.coeff_A( 1, vi + V3i(0,-1,0), 3 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(1, 3));
	ctx.coeff_A( 1, vi + V3i(0,0,0), 3 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(1, 3));
	ctx.coeff_A( 1, vi + V3i(-1,0,0), 3 ) += (0.25*h_inv[1]*M_11_real.coeffRef(1, 3));
	ctx.coeff_A( 1, vi + V3i(-1,1,0), 3 ) += (0.25*h_inv[1]*M_11_real.coeffRef(1, 3));
	ctx.coeff_A( 1, vi + V3i(0,0,0), 3 ) += (0.25*h_inv[1]*M_11_real.coeffRef(1, 3));
	ctx.coeff_A( 1, vi + V3i(0,1,0), 3 ) += (0.25*h_inv[1]*M_11_real.coeffRef(1, 3));
	ctx.coeff_A( 6, vi + V3i(-1,-1,0), 3 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(6, 3));
	ctx.coeff_A( 6, vi + V3i(-1,0,0), 3 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(6, 3));
	ctx.coeff_A( 6, vi + V3i(0,-1,0), 3 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(6, 3));
	ctx.coeff_A( 6, vi + V3i(0,0,0), 3 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(6, 3));
	ctx.coeff_A( 6, vi + V3i(-1,0,0), 3 ) += (0.25*h_inv[1]*M_11_real.coeffRef(6, 3));
	ctx.coeff_A( 6, vi + V3i(-1,1,0), 3 ) += (0.25*h_inv[1]*M_11_real.coeffRef(6, 3));
	ctx.coeff_A( 6, vi + V3i(0,0,0), 3 ) += (0.25*h_inv[1]*M_11_real.coeffRef(6, 3));
	ctx.coeff_A( 6, vi + V3i(0,1,0), 3 ) += (0.25*h_inv[1]*M_11_real.coeffRef(6, 3));
	ctx.coeff_A( 7, vi + V3i(0,-1,0), 3 ) += -(h_inv[1]*M_11_real.coeffRef(7, 3));
	ctx.coeff_A( 7, vi + V3i(0,0,0), 3 ) += (h_inv[1]*M_11_real.coeffRef(7, 3));
	ctx.coeff_A( 1, vi + V3i(0,0,0), 4 ) += -(h_inv[1]*M_11_real.coeffRef(1, 4));
	ctx.coeff_A( 1, vi + V3i(0,1,0), 4 ) += (h_inv[1]*M_11_real.coeffRef(1, 4));
	ctx.coeff_A( 2, vi + V3i(0,-1,0), 4 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(2, 4));
	ctx.coeff_A( 2, vi + V3i(0,0,0), 4 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(2, 4));
	ctx.coeff_A( 2, vi + V3i(1,-1,0), 4 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(2, 4));
	ctx.coeff_A( 2, vi + V3i(1,0,0), 4 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(2, 4));
	ctx.coeff_A( 2, vi + V3i(0,0,0), 4 ) += (0.25*h_inv[1]*M_11_real.coeffRef(2, 4));
	ctx.coeff_A( 2, vi + V3i(0,1,0), 4 ) += (0.25*h_inv[1]*M_11_real.coeffRef(2, 4));
	ctx.coeff_A( 2, vi + V3i(1,0,0), 4 ) += (0.25*h_inv[1]*M_11_real.coeffRef(2, 4));
	ctx.coeff_A( 2, vi + V3i(1,1,0), 4 ) += (0.25*h_inv[1]*M_11_real.coeffRef(2, 4));
	ctx.coeff_A( 7, vi + V3i(0,-1,0), 4 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(7, 4));
	ctx.coeff_A( 7, vi + V3i(0,0,0), 4 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(7, 4));
	ctx.coeff_A( 7, vi + V3i(1,-1,0), 4 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(7, 4));
	ctx.coeff_A( 7, vi + V3i(1,0,0), 4 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(7, 4));
	ctx.coeff_A( 7, vi + V3i(0,0,0), 4 ) += (0.25*h_inv[1]*M_11_real.coeffRef(7, 4));
	ctx.coeff_A( 7, vi + V3i(0,1,0), 4 ) += (0.25*h_inv[1]*M_11_real.coeffRef(7, 4));
	ctx.coeff_A( 7, vi + V3i(1,0,0), 4 ) += (0.25*h_inv[1]*M_11_real.coeffRef(7, 4));
	ctx.coeff_A( 7, vi + V3i(1,1,0), 4 ) += (0.25*h_inv[1]*M_11_real.coeffRef(7, 4));
	ctx.coeff_A( 8, vi + V3i(0,0,0), 4 ) += -(h_inv[1]*M_11_real.coeffRef(8, 4));
	ctx.coeff_A( 8, vi + V3i(0,1,0), 4 ) += (h_inv[1]*M_11_real.coeffRef(8, 4));
	ctx.coeff_A( 2, vi + V3i(0,-1,0), 5 ) += -(h_inv[1]*M_11_real.coeffRef(2, 5));
	ctx.coeff_A( 2, vi + V3i(0,0,0), 5 ) += (h_inv[1]*M_11_real.coeffRef(2, 5));
	ctx.coeff_A( 8, vi + V3i(-1,-1,0), 5 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(8, 5));
	ctx.coeff_A( 8, vi + V3i(-1,0,0), 5 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(8, 5));
	ctx.coeff_A( 8, vi + V3i(0,-1,0), 5 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(8, 5));
	ctx.coeff_A( 8, vi + V3i(0,0,0), 5 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(8, 5));
	ctx.coeff_A( 8, vi + V3i(-1,0,0), 5 ) += (0.25*h_inv[1]*M_11_real.coeffRef(8, 5));
	ctx.coeff_A( 8, vi + V3i(-1,1,0), 5 ) += (0.25*h_inv[1]*M_11_real.coeffRef(8, 5));
	ctx.coeff_A( 8, vi + V3i(0,0,0), 5 ) += (0.25*h_inv[1]*M_11_real.coeffRef(8, 5));
	ctx.coeff_A( 8, vi + V3i(0,1,0), 5 ) += (0.25*h_inv[1]*M_11_real.coeffRef(8, 5));
	ctx.coeff_A( 9, vi + V3i(0,-1,0), 5 ) += -(h_inv[1]*M_11_real.coeffRef(9, 5));
	ctx.coeff_A( 9, vi + V3i(0,0,0), 5 ) += (h_inv[1]*M_11_real.coeffRef(9, 5));
	ctx.coeff_A( 3, vi + V3i(0,-1,0), 6 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(3, 6));
	ctx.coeff_A( 3, vi + V3i(0,0,0), 6 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(3, 6));
	ctx.coeff_A( 3, vi + V3i(1,-1,0), 6 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(3, 6));
	ctx.coeff_A( 3, vi + V3i(1,0,0), 6 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(3, 6));
	ctx.coeff_A( 3, vi + V3i(0,0,0), 6 ) += (0.25*h_inv[1]*M_11_real.coeffRef(3, 6));
	ctx.coeff_A( 3, vi + V3i(0,1,0), 6 ) += (0.25*h_inv[1]*M_11_real.coeffRef(3, 6));
	ctx.coeff_A( 3, vi + V3i(1,0,0), 6 ) += (0.25*h_inv[1]*M_11_real.coeffRef(3, 6));
	ctx.coeff_A( 3, vi + V3i(1,1,0), 6 ) += (0.25*h_inv[1]*M_11_real.coeffRef(3, 6));
	ctx.coeff_A( 10, vi + V3i(0,-1,0), 6 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(10, 6));
	ctx.coeff_A( 10, vi + V3i(0,0,0), 6 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(10, 6));
	ctx.coeff_A( 10, vi + V3i(1,-1,0), 6 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(10, 6));
	ctx.coeff_A( 10, vi + V3i(1,0,0), 6 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(10, 6));
	ctx.coeff_A( 10, vi + V3i(0,0,0), 6 ) += (0.25*h_inv[1]*M_11_real.coeffRef(10, 6));
	ctx.coeff_A( 10, vi + V3i(0,1,0), 6 ) += (0.25*h_inv[1]*M_11_real.coeffRef(10, 6));
	ctx.coeff_A( 10, vi + V3i(1,0,0), 6 ) += (0.25*h_inv[1]*M_11_real.coeffRef(10, 6));
	ctx.coeff_A( 10, vi + V3i(1,1,0), 6 ) += (0.25*h_inv[1]*M_11_real.coeffRef(10, 6));
	ctx.coeff_A( 11, vi + V3i(0,-1,0), 6 ) += -(h_inv[1]*M_11_real.coeffRef(11, 6));
	ctx.coeff_A( 11, vi + V3i(0,0,0), 6 ) += (h_inv[1]*M_11_real.coeffRef(11, 6));
	ctx.coeff_A( 3, vi + V3i(0,0,0), 7 ) += -(h_inv[1]*M_11_real.coeffRef(3, 7));
	ctx.coeff_A( 3, vi + V3i(0,1,0), 7 ) += (h_inv[1]*M_11_real.coeffRef(3, 7));
	ctx.coeff_A( 4, vi + V3i(-1,-1,0), 7 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(4, 7));
	ctx.coeff_A( 4, vi + V3i(-1,0,0), 7 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(4, 7));
	ctx.coeff_A( 4, vi + V3i(0,-1,0), 7 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(4, 7));
	ctx.coeff_A( 4, vi + V3i(0,0,0), 7 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(4, 7));
	ctx.coeff_A( 4, vi + V3i(-1,0,0), 7 ) += (0.25*h_inv[1]*M_11_real.coeffRef(4, 7));
	ctx.coeff_A( 4, vi + V3i(-1,1,0), 7 ) += (0.25*h_inv[1]*M_11_real.coeffRef(4, 7));
	ctx.coeff_A( 4, vi + V3i(0,0,0), 7 ) += (0.25*h_inv[1]*M_11_real.coeffRef(4, 7));
	ctx.coeff_A( 4, vi + V3i(0,1,0), 7 ) += (0.25*h_inv[1]*M_11_real.coeffRef(4, 7));
	ctx.coeff_A( 11, vi + V3i(-1,-1,0), 7 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(11, 7));
	ctx.coeff_A( 11, vi + V3i(-1,0,0), 7 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(11, 7));
	ctx.coeff_A( 11, vi + V3i(0,-1,0), 7 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(11, 7));
	ctx.coeff_A( 11, vi + V3i(0,0,0), 7 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(11, 7));
	ctx.coeff_A( 11, vi + V3i(-1,0,0), 7 ) += (0.25*h_inv[1]*M_11_real.coeffRef(11, 7));
	ctx.coeff_A( 11, vi + V3i(-1,1,0), 7 ) += (0.25*h_inv[1]*M_11_real.coeffRef(11, 7));
	ctx.coeff_A( 11, vi + V3i(0,0,0), 7 ) += (0.25*h_inv[1]*M_11_real.coeffRef(11, 7));
	ctx.coeff_A( 11, vi + V3i(0,1,0), 7 ) += (0.25*h_inv[1]*M_11_real.coeffRef(11, 7));
	ctx.coeff_A( 12, vi + V3i(0,0,0), 7 ) += -(h_inv[1]*M_11_real.coeffRef(12, 7));
	ctx.coeff_A( 12, vi + V3i(0,1,0), 7 ) += (h_inv[1]*M_11_real.coeffRef(12, 7));
	ctx.coeff_A( 4, vi + V3i(0,-1,0), 8 ) += -(h_inv[1]*M_11_real.coeffRef(4, 8));
	ctx.coeff_A( 4, vi + V3i(0,0,0), 8 ) += (h_inv[1]*M_11_real.coeffRef(4, 8));
	ctx.coeff_A( 5, vi + V3i(0,-1,0), 8 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(5, 8));
	ctx.coeff_A( 5, vi + V3i(0,0,0), 8 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(5, 8));
	ctx.coeff_A( 5, vi + V3i(1,-1,0), 8 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(5, 8));
	ctx.coeff_A( 5, vi + V3i(1,0,0), 8 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(5, 8));
	ctx.coeff_A( 5, vi + V3i(0,0,0), 8 ) += (0.25*h_inv[1]*M_11_real.coeffRef(5, 8));
	ctx.coeff_A( 5, vi + V3i(0,1,0), 8 ) += (0.25*h_inv[1]*M_11_real.coeffRef(5, 8));
	ctx.coeff_A( 5, vi + V3i(1,0,0), 8 ) += (0.25*h_inv[1]*M_11_real.coeffRef(5, 8));
	ctx.coeff_A( 5, vi + V3i(1,1,0), 8 ) += (0.25*h_inv[1]*M_11_real.coeffRef(5, 8));
	ctx.coeff_A( 12, vi + V3i(0,-1,0), 8 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(12, 8));
	ctx.coeff_A( 12, vi + V3i(0,0,0), 8 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(12, 8));
	ctx.coeff_A( 12, vi + V3i(1,-1,0), 8 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(12, 8));
	ctx.coeff_A( 12, vi + V3i(1,0,0), 8 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(12, 8));
	ctx.coeff_A( 12, vi + V3i(0,0,0), 8 ) += (0.25*h_inv[1]*M_11_real.coeffRef(12, 8));
	ctx.coeff_A( 12, vi + V3i(0,1,0), 8 ) += (0.25*h_inv[1]*M_11_real.coeffRef(12, 8));
	ctx.coeff_A( 12, vi + V3i(1,0,0), 8 ) += (0.25*h_inv[1]*M_11_real.coeffRef(12, 8));
	ctx.coeff_A( 12, vi + V3i(1,1,0), 8 ) += (0.25*h_inv[1]*M_11_real.coeffRef(12, 8));
	ctx.coeff_A( 13, vi + V3i(0,-1,0), 8 ) += -(h_inv[1]*M_11_real.coeffRef(13, 8));
	ctx.coeff_A( 13, vi + V3i(0,0,0), 8 ) += (h_inv[1]*M_11_real.coeffRef(13, 8));
	ctx.coeff_A( 5, vi + V3i(0,0,0), 9 ) += -(h_inv[1]*M_11_real.coeffRef(5, 9));
	ctx.coeff_A( 5, vi + V3i(0,1,0), 9 ) += (h_inv[1]*M_11_real.coeffRef(5, 9));
	ctx.coeff_A( 13, vi + V3i(-1,-1,0), 9 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(13, 9));
	ctx.coeff_A( 13, vi + V3i(-1,0,0), 9 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(13, 9));
	ctx.coeff_A( 13, vi + V3i(0,-1,0), 9 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(13, 9));
	ctx.coeff_A( 13, vi + V3i(0,0,0), 9 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(13, 9));
	ctx.coeff_A( 13, vi + V3i(-1,0,0), 9 ) += (0.25*h_inv[1]*M_11_real.coeffRef(13, 9));
	ctx.coeff_A( 13, vi + V3i(-1,1,0), 9 ) += (0.25*h_inv[1]*M_11_real.coeffRef(13, 9));
	ctx.coeff_A( 13, vi + V3i(0,0,0), 9 ) += (0.25*h_inv[1]*M_11_real.coeffRef(13, 9));
	ctx.coeff_A( 13, vi + V3i(0,1,0), 9 ) += (0.25*h_inv[1]*M_11_real.coeffRef(13, 9));
	ctx.coeff_A( 14, vi + V3i(0,0,0), 9 ) += -(h_inv[1]*M_11_real.coeffRef(14, 9));
	ctx.coeff_A( 14, vi + V3i(0,1,0), 9 ) += (h_inv[1]*M_11_real.coeffRef(14, 9));
	ctx.coeff_A( 6, vi + V3i(-1,-1,0), 10 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(6, 10));
	ctx.coeff_A( 6, vi + V3i(-1,0,0), 10 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(6, 10));
	ctx.coeff_A( 6, vi + V3i(0,-1,0), 10 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(6, 10));
	ctx.coeff_A( 6, vi + V3i(0,0,0), 10 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(6, 10));
	ctx.coeff_A( 6, vi + V3i(-1,0,0), 10 ) += (0.25*h_inv[1]*M_11_real.coeffRef(6, 10));
	ctx.coeff_A( 6, vi + V3i(-1,1,0), 10 ) += (0.25*h_inv[1]*M_11_real.coeffRef(6, 10));
	ctx.coeff_A( 6, vi + V3i(0,0,0), 10 ) += (0.25*h_inv[1]*M_11_real.coeffRef(6, 10));
	ctx.coeff_A( 6, vi + V3i(0,1,0), 10 ) += (0.25*h_inv[1]*M_11_real.coeffRef(6, 10));
	ctx.coeff_A( 6, vi + V3i(0,0,0), 11 ) += -(h_inv[1]*M_11_real.coeffRef(6, 11));
	ctx.coeff_A( 6, vi + V3i(0,1,0), 11 ) += (h_inv[1]*M_11_real.coeffRef(6, 11));
	ctx.coeff_A( 7, vi + V3i(0,-1,0), 11 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(7, 11));
	ctx.coeff_A( 7, vi + V3i(0,0,0), 11 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(7, 11));
	ctx.coeff_A( 7, vi + V3i(1,-1,0), 11 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(7, 11));
	ctx.coeff_A( 7, vi + V3i(1,0,0), 11 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(7, 11));
	ctx.coeff_A( 7, vi + V3i(0,0,0), 11 ) += (0.25*h_inv[1]*M_11_real.coeffRef(7, 11));
	ctx.coeff_A( 7, vi + V3i(0,1,0), 11 ) += (0.25*h_inv[1]*M_11_real.coeffRef(7, 11));
	ctx.coeff_A( 7, vi + V3i(1,0,0), 11 ) += (0.25*h_inv[1]*M_11_real.coeffRef(7, 11));
	ctx.coeff_A( 7, vi + V3i(1,1,0), 11 ) += (0.25*h_inv[1]*M_11_real.coeffRef(7, 11));
	ctx.coeff_A( 7, vi + V3i(0,-1,0), 12 ) += -(h_inv[1]*M_11_real.coeffRef(7, 12));
	ctx.coeff_A( 7, vi + V3i(0,0,0), 12 ) += (h_inv[1]*M_11_real.coeffRef(7, 12));
	ctx.coeff_A( 8, vi + V3i(-1,-1,0), 12 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(8, 12));
	ctx.coeff_A( 8, vi + V3i(-1,0,0), 12 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(8, 12));
	ctx.coeff_A( 8, vi + V3i(0,-1,0), 12 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(8, 12));
	ctx.coeff_A( 8, vi + V3i(0,0,0), 12 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(8, 12));
	ctx.coeff_A( 8, vi + V3i(-1,0,0), 12 ) += (0.25*h_inv[1]*M_11_real.coeffRef(8, 12));
	ctx.coeff_A( 8, vi + V3i(-1,1,0), 12 ) += (0.25*h_inv[1]*M_11_real.coeffRef(8, 12));
	ctx.coeff_A( 8, vi + V3i(0,0,0), 12 ) += (0.25*h_inv[1]*M_11_real.coeffRef(8, 12));
	ctx.coeff_A( 8, vi + V3i(0,1,0), 12 ) += (0.25*h_inv[1]*M_11_real.coeffRef(8, 12));
	ctx.coeff_A( 8, vi + V3i(0,0,0), 13 ) += -(h_inv[1]*M_11_real.coeffRef(8, 13));
	ctx.coeff_A( 8, vi + V3i(0,1,0), 13 ) += (h_inv[1]*M_11_real.coeffRef(8, 13));
	ctx.coeff_A( 9, vi + V3i(0,-1,0), 13 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(9, 13));
	ctx.coeff_A( 9, vi + V3i(0,0,0), 13 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(9, 13));
	ctx.coeff_A( 9, vi + V3i(1,-1,0), 13 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(9, 13));
	ctx.coeff_A( 9, vi + V3i(1,0,0), 13 ) += -(0.25*h_inv[1]*M_11_real.coeffRef(9, 13));
	ctx.coeff_A( 9, vi + V3i(0,0,0), 13 ) += (0.25*h_inv[1]*M_11_real.coeffRef(9, 13));
	ctx.coeff_A( 9, vi + V3i(0,1,0), 13 ) += (0.25*h_inv[1]*M_11_real.coeffRef(9, 13));
	ctx.coeff_A( 9, vi + V3i(1,0,0), 13 ) += (0.25*h_inv[1]*M_11_real.coeffRef(9, 13));
	ctx.coeff_A( 9, vi + V3i(1,1,0), 13 ) += (0.25*h_inv[1]*M_11_real.coeffRef(9, 13));
	ctx.coeff_A( 9, vi + V3i(0,-1,0), 14 ) += -(h_inv[1]*M_11_real.coeffRef(9, 14));
	ctx.coeff_A( 9, vi + V3i(0,0,0), 14 ) += (h_inv[1]*M_11_real.coeffRef(9, 14));
	ctx.coeff_b( 0 ) += b_real.coeffRef(0, 0);
	ctx.coeff_b( 1 ) += b_real.coeffRef(1, 0);
	ctx.coeff_b( 2 ) += b_real.coeffRef(2, 0);
	ctx.coeff_b( 3 ) += b_real.coeffRef(3, 0);
	ctx.coeff_b( 4 ) += b_real.coeffRef(4, 0);
	ctx.coeff_b( 5 ) += b_real.coeffRef(5, 0);
	ctx.coeff_b( 6 ) += b_real.coeffRef(6, 0);
	ctx.coeff_b( 7 ) += b_real.coeffRef(7, 0);
	ctx.coeff_b( 8 ) += b_real.coeffRef(8, 0);
	ctx.coeff_b( 9 ) += b_real.coeffRef(9, 0);
	ctx.coeff_b( 10 ) += b_real.coeffRef(10, 0);
	ctx.coeff_b( 11 ) += b_real.coeffRef(11, 0);
	ctx.coeff_b( 12 ) += b_real.coeffRef(12, 0);
	ctx.coeff_b( 13 ) += b_real.coeffRef(13, 0);
	ctx.coeff_b( 14 ) += b_real.coeffRef(14, 0);
}
V3i stencil_sopn_p4_sg_get_offset(int coeff)
{
	switch(coeff)
	{
		case 0:return V3i(1, 1, 1);break;
		case 1:return V3i(0, 1, 1);break;
		case 2:return V3i(1, 0, 1);break;
		case 3:return V3i(1, 1, 1);break;
		case 4:return V3i(0, 0, 1);break;
		case 5:return V3i(1, 1, 1);break;
		case 6:return V3i(0, 1, 1);break;
		case 7:return V3i(1, 0, 1);break;
		case 8:return V3i(0, 1, 1);break;
		case 9:return V3i(1, 0, 1);break;
		case 10:return V3i(1, 1, 1);break;
		case 11:return V3i(0, 0, 1);break;
		case 12:return V3i(1, 1, 1);break;
		case 13:return V3i(0, 0, 1);break;
		case 14:return V3i(1, 1, 1);break;
		default:throw std::runtime_error("unexpected coefficient index");break;
	};
}
REGISTER_STENCIL(stencil_sopn_p4_sg, 4, 15, 1)
