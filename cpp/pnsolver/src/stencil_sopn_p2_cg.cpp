// This file was generated by stencil.py

#include <PNSystem.h>

void stencil_sopn_p2_cg(PNSystem::Stencil::Context& ctx)
{
	V2i vi = ctx.getVoxel();
	V2d vd = vi.cast<double>();
	const Domain& domain = ctx.getDomain();
	const PNSystem::Fields& fields = ctx.getFields();
	V2d h_inv( 1.0/(2*domain.getVoxelSize()[0]), 1.0/(2*domain.getVoxelSize()[1]) );

	Eigen::Matrix<std::complex<double>, 6, 6> S;
	S.coeffRef(0, 0) = std::complex<double>(1.0, 0.0);
	S.coeffRef(1, 1) = std::complex<double>(0.7071067811865475, 0.0);
	S.coeffRef(1, 2) = std::complex<double>(-0.7071067811865475, 0.0);
	S.coeffRef(2, 1) = std::complex<double>(-0.0, -0.7071067811865475);
	S.coeffRef(2, 2) = std::complex<double>(-0.0, -0.7071067811865475);
	S.coeffRef(3, 3) = std::complex<double>(0.7071067811865475, 0.0);
	S.coeffRef(3, 5) = std::complex<double>(0.7071067811865475, 0.0);
	S.coeffRef(4, 3) = std::complex<double>(-0.0, -0.7071067811865475);
	S.coeffRef(4, 5) = std::complex<double>(0.0, 0.7071067811865475);
	S.coeffRef(5, 4) = std::complex<double>(1.0, 0.0);
	Eigen::Matrix<std::complex<double>, 6, 6> SInv;
	SInv.coeffRef(0, 0) = std::complex<double>(1.0, 0.0);
	SInv.coeffRef(1, 1) = std::complex<double>(0.7071067811865476, 0.0);
	SInv.coeffRef(1, 2) = std::complex<double>(0.0, 0.7071067811865476);
	SInv.coeffRef(2, 1) = std::complex<double>(-0.7071067811865476, 0.0);
	SInv.coeffRef(2, 2) = std::complex<double>(-0.0, 0.7071067811865476);
	SInv.coeffRef(3, 3) = std::complex<double>(0.7071067811865476, 0.0);
	SInv.coeffRef(3, 4) = std::complex<double>(0.0, 0.7071067811865476);
	SInv.coeffRef(4, 5) = std::complex<double>(1.0, 0.0);
	SInv.coeffRef(5, 3) = std::complex<double>(0.7071067811865476, 0.0);
	SInv.coeffRef(5, 4) = std::complex<double>(0.0, -0.7071067811865476);

	//Producing complex-valued matrices =============
	//M_0dxdxL + M_1dxdyL + M_2dxdzL + M_3dydxL + M_4dydyL + M_5dydzL + M_6dzdxL + M_7dzdyL + M_8dzdzL + M_9L + M_10dxL + M_11dyL + M_12dzL = b

	//M_0 ---
	// is constant

	//M_1 ---
	// is constant

	//M_2 ---
	// all components vanish

	//M_3 ---
	// is constant

	//M_4 ---
	// is constant

	//M_5 ---
	// all components vanish

	//M_6 ---
	// all components vanish

	//M_7 ---
	// all components vanish

	//M_8 ---
	// is constant

	//M_9 ---
	Eigen::Matrix<std::complex<double>, 6, 6> M_9;
	M_9(0, 0) = (std::pow(fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5))), 2)+
			-(fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(0, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5)))));
	M_9(0, 1) = (-(0.408248290464*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			(std::complex<double>(0.0, 0.408248290463863)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, 1.5))))))+
			(0.408248290464*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(1.5, 0.5)))))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))))+
			(0.408248290464*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*((-h_inv[0]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			-(std::complex<double>(0.0, 0.408248290463863)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 1.5)))))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))))+
			-(std::complex<double>(0.0, 0.408248290463863)*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*((-h_inv[1]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, 1.5)))))));
	M_9(0, 2) = ((0.408248290464*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			(std::complex<double>(0.0, 0.408248290463863)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, 1.5))))))+
			-(0.408248290464*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(1.5, 0.5)))))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))))+
			-(0.408248290464*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*((-h_inv[0]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			-(std::complex<double>(0.0, 0.408248290463863)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 1.5)))))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))))+
			-(std::complex<double>(0.0, 0.408248290463863)*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*((-h_inv[1]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, 1.5)))))));
	M_9(1, 0) = (-(0.408248290464*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			-(std::complex<double>(0.0, 0.408248290463863)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, 1.5))))))+
			(0.408248290464*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(1.5, 0.5)))))*fields.f_p->eval(0, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))))+
			(0.408248290464*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*((-h_inv[0]*fields.f_p->eval(0, 0, domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.f_p->eval(0, 0, domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			(std::complex<double>(0.0, 0.408248290463863)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 1.5)))))*fields.f_p->eval(0, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))))+
			(std::complex<double>(0.0, 0.408248290463863)*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*((-h_inv[1]*fields.f_p->eval(0, 0, domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.f_p->eval(0, 0, domain.voxelToWorld(vd+V2d(0.5, 1.5)))))));
	M_9(1, 1) = (std::pow(fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5))), 2)+
			-(fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5)))));
	M_9(1, 3) = (-(0.4472135955*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			(std::complex<double>(0.0, 0.4472135954999579)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, 1.5))))))+
			(0.4472135955*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(1.5, 0.5)))))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))))+
			(0.4472135955*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*((-h_inv[0]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			-(std::complex<double>(0.0, 0.4472135954999579)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 1.5)))))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))))+
			-(std::complex<double>(0.0, 0.4472135954999579)*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*((-h_inv[1]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(0.5, 1.5)))))));
	M_9(1, 4) = ((0.182574185835*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			(std::complex<double>(0.0, 0.18257418583505536)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, 1.5))))))+
			-(0.182574185835*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(1.5, 0.5)))))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))))+
			-(0.182574185835*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*((-h_inv[0]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			-(std::complex<double>(0.0, 0.18257418583505536)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 1.5)))))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))))+
			-(std::complex<double>(0.0, 0.18257418583505536)*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*((-h_inv[1]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(0.5, 1.5)))))));
	M_9(2, 0) = ((0.408248290464*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			-(std::complex<double>(0.0, 0.408248290463863)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, 1.5))))))+
			-(0.408248290464*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(1.5, 0.5)))))*fields.f_p->eval(0, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))))+
			-(0.408248290464*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*((-h_inv[0]*fields.f_p->eval(0, 0, domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.f_p->eval(0, 0, domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			(std::complex<double>(0.0, 0.408248290463863)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 1.5)))))*fields.f_p->eval(0, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))))+
			(std::complex<double>(0.0, 0.408248290463863)*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*((-h_inv[1]*fields.f_p->eval(0, 0, domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.f_p->eval(0, 0, domain.voxelToWorld(vd+V2d(0.5, 1.5)))))));
	M_9(2, 2) = (std::pow(fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5))), 2)+
			-(fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5)))));
	M_9(2, 4) = (-(0.182574185835*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			(std::complex<double>(0.0, 0.18257418583505536)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, 1.5))))))+
			(0.182574185835*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(1.5, 0.5)))))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))))+
			(0.182574185835*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*((-h_inv[0]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			-(std::complex<double>(0.0, 0.18257418583505536)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 1.5)))))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))))+
			-(std::complex<double>(0.0, 0.18257418583505536)*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*((-h_inv[1]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(0.5, 1.5)))))));
	M_9(2, 5) = ((0.4472135955*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			(std::complex<double>(0.0, 0.4472135954999579)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, 1.5))))))+
			-(0.4472135955*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(1.5, 0.5)))))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))))+
			-(0.4472135955*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*((-h_inv[0]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			-(std::complex<double>(0.0, 0.4472135954999579)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 1.5)))))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))))+
			-(std::complex<double>(0.0, 0.4472135954999579)*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*((-h_inv[1]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(0.5, 1.5)))))));
	M_9(3, 1) = (-(0.4472135955*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			-(std::complex<double>(0.0, 0.4472135954999579)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, 1.5))))))+
			(0.4472135955*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(1.5, 0.5)))))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))))+
			(0.4472135955*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*((-h_inv[0]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			(std::complex<double>(0.0, 0.4472135954999579)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 1.5)))))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))))+
			(std::complex<double>(0.0, 0.4472135954999579)*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*((-h_inv[1]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, 1.5)))))));
	M_9(3, 3) = (std::pow(fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5))), 2)+
			-(fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5)))));
	M_9(4, 1) = ((0.182574185835*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			-(std::complex<double>(0.0, 0.18257418583505536)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, 1.5))))))+
			-(0.182574185835*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(1.5, 0.5)))))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))))+
			-(0.182574185835*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*((-h_inv[0]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			(std::complex<double>(0.0, 0.18257418583505536)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 1.5)))))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))))+
			(std::complex<double>(0.0, 0.18257418583505536)*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*((-h_inv[1]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, 1.5)))))));
	M_9(4, 2) = (-(0.182574185835*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			-(std::complex<double>(0.0, 0.18257418583505536)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, 1.5))))))+
			(0.182574185835*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(1.5, 0.5)))))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))))+
			(0.182574185835*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*((-h_inv[0]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			(std::complex<double>(0.0, 0.18257418583505536)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 1.5)))))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))))+
			(std::complex<double>(0.0, 0.18257418583505536)*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*((-h_inv[1]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, 1.5)))))));
	M_9(4, 4) = (std::pow(fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5))), 2)+
			-(fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5)))));
	M_9(5, 2) = ((0.4472135955*((-h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			-(std::complex<double>(0.0, 0.4472135954999579)*((-h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, 1.5))))))+
			-(0.4472135955*((-h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(1.5, 0.5)))))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))))+
			-(0.4472135955*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*((-h_inv[0]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			(std::complex<double>(0.0, 0.4472135954999579)*((-h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 1.5)))))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))))+
			(std::complex<double>(0.0, 0.4472135954999579)*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*((-h_inv[1]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, 1.5)))))));
	M_9(5, 5) = (std::pow(fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5))), 2)+
			-(fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5)))));
	Eigen::Matrix<double, 6, 6> M_9_real = (S*M_9*SInv).real();

	//M_10 ---
	Eigen::Matrix<std::complex<double>, 6, 6> M_10;
	M_10(0, 1) = (0.408248290464*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))));
	M_10(0, 2) = -(0.408248290464*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))));
	M_10(1, 0) = (0.408248290464*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(0, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))));
	M_10(1, 3) = (0.4472135955*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))));
	M_10(1, 4) = -(0.182574185835*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))));
	M_10(2, 0) = -(0.408248290464*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(0, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))));
	M_10(2, 4) = (0.182574185835*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))));
	M_10(2, 5) = -(0.4472135955*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))));
	M_10(3, 1) = (0.4472135955*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))));
	M_10(4, 1) = -(0.182574185835*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))));
	M_10(4, 2) = (0.182574185835*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))));
	M_10(5, 2) = -(0.4472135955*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))));
	Eigen::Matrix<double, 6, 6> M_10_real = (S*M_10*SInv).real();

	//M_11 ---
	Eigen::Matrix<std::complex<double>, 6, 6> M_11;
	M_11(0, 1) = -(std::complex<double>(0.0, 0.408248290463863)*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))));
	M_11(0, 2) = -(std::complex<double>(0.0, 0.408248290463863)*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))));
	M_11(1, 0) = (std::complex<double>(0.0, 0.408248290463863)*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(0, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))));
	M_11(1, 3) = -(std::complex<double>(0.0, 0.4472135954999579)*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))));
	M_11(1, 4) = -(std::complex<double>(0.0, 0.18257418583505536)*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))));
	M_11(2, 0) = (std::complex<double>(0.0, 0.408248290463863)*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(0, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))));
	M_11(2, 4) = -(std::complex<double>(0.0, 0.18257418583505536)*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))));
	M_11(2, 5) = -(std::complex<double>(0.0, 0.4472135954999579)*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(2, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))));
	M_11(3, 1) = (std::complex<double>(0.0, 0.4472135954999579)*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))));
	M_11(4, 1) = (std::complex<double>(0.0, 0.18257418583505536)*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))));
	M_11(4, 2) = (std::complex<double>(0.0, 0.18257418583505536)*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))));
	M_11(5, 2) = (std::complex<double>(0.0, 0.4472135954999579)*fields.sigma_s->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(1, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5))));
	Eigen::Matrix<double, 6, 6> M_11_real = (S*M_11*SInv).real();

	//M_12 ---
	// all components vanish

	//b ---
	Eigen::Matrix<std::complex<double>, 6, 1> b;
	b(0, 0) = (-(0.408248290464*((-h_inv[0]*fields.q->eval(1, -1, domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.q->eval(1, -1, domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			(0.408248290464*((-h_inv[0]*fields.q->eval(1, 1, domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.q->eval(1, 1, domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			(std::complex<double>(0.0, 0.408248290463863)*((-h_inv[1]*fields.q->eval(1, -1, domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.q->eval(1, -1, domain.voxelToWorld(vd+V2d(0.5, 1.5))))))+
			(std::complex<double>(0.0, 0.408248290463863)*((-h_inv[1]*fields.q->eval(1, 1, domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.q->eval(1, 1, domain.voxelToWorld(vd+V2d(0.5, 1.5))))))+
			(fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.q->eval(0, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5)))));
	b(1, 0) = (-(0.4472135955*((-h_inv[0]*fields.q->eval(2, -2, domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.q->eval(2, -2, domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			-(0.408248290464*((-h_inv[0]*fields.q->eval(0, 0, domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.q->eval(0, 0, domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			(0.182574185835*((-h_inv[0]*fields.q->eval(2, 0, domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.q->eval(2, 0, domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			(std::complex<double>(0.0, 0.4472135954999579)*((-h_inv[1]*fields.q->eval(2, -2, domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.q->eval(2, -2, domain.voxelToWorld(vd+V2d(0.5, 1.5))))))+
			-(std::complex<double>(0.0, 0.408248290463863)*((-h_inv[1]*fields.q->eval(0, 0, domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.q->eval(0, 0, domain.voxelToWorld(vd+V2d(0.5, 1.5))))))+
			(std::complex<double>(0.0, 0.18257418583505536)*((-h_inv[1]*fields.q->eval(2, 0, domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.q->eval(2, 0, domain.voxelToWorld(vd+V2d(0.5, 1.5))))))+
			(fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.q->eval(1, -1, domain.voxelToWorld(vd+V2d(0.5, 0.5)))));
	b(2, 0) = ((0.408248290464*((-h_inv[0]*fields.q->eval(0, 0, domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.q->eval(0, 0, domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			-(0.182574185835*((-h_inv[0]*fields.q->eval(2, 0, domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.q->eval(2, 0, domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			(0.4472135955*((-h_inv[0]*fields.q->eval(2, 2, domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.q->eval(2, 2, domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			-(std::complex<double>(0.0, 0.408248290463863)*((-h_inv[1]*fields.q->eval(0, 0, domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.q->eval(0, 0, domain.voxelToWorld(vd+V2d(0.5, 1.5))))))+
			(std::complex<double>(0.0, 0.18257418583505536)*((-h_inv[1]*fields.q->eval(2, 0, domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.q->eval(2, 0, domain.voxelToWorld(vd+V2d(0.5, 1.5))))))+
			(std::complex<double>(0.0, 0.4472135954999579)*((-h_inv[1]*fields.q->eval(2, 2, domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.q->eval(2, 2, domain.voxelToWorld(vd+V2d(0.5, 1.5))))))+
			(fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.q->eval(1, 1, domain.voxelToWorld(vd+V2d(0.5, 0.5)))));
	b(3, 0) = (-(0.4472135955*((-h_inv[0]*fields.q->eval(1, -1, domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.q->eval(1, -1, domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			-(std::complex<double>(0.0, 0.4472135954999579)*((-h_inv[1]*fields.q->eval(1, -1, domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.q->eval(1, -1, domain.voxelToWorld(vd+V2d(0.5, 1.5))))))+
			(fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.q->eval(2, -2, domain.voxelToWorld(vd+V2d(0.5, 0.5)))));
	b(4, 0) = ((0.182574185835*((-h_inv[0]*fields.q->eval(1, -1, domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.q->eval(1, -1, domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			-(0.182574185835*((-h_inv[0]*fields.q->eval(1, 1, domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.q->eval(1, 1, domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			-(std::complex<double>(0.0, 0.18257418583505536)*((-h_inv[1]*fields.q->eval(1, -1, domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.q->eval(1, -1, domain.voxelToWorld(vd+V2d(0.5, 1.5))))))+
			-(std::complex<double>(0.0, 0.18257418583505536)*((-h_inv[1]*fields.q->eval(1, 1, domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.q->eval(1, 1, domain.voxelToWorld(vd+V2d(0.5, 1.5))))))+
			(fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.q->eval(2, 0, domain.voxelToWorld(vd+V2d(0.5, 0.5)))));
	b(5, 0) = ((0.4472135955*((-h_inv[0]*fields.q->eval(1, 1, domain.voxelToWorld(vd+V2d(-0.5, 0.5))))+
			(h_inv[0]*fields.q->eval(1, 1, domain.voxelToWorld(vd+V2d(1.5, 0.5))))))+
			-(std::complex<double>(0.0, 0.4472135954999579)*((-h_inv[1]*fields.q->eval(1, 1, domain.voxelToWorld(vd+V2d(0.5, -0.5))))+
			(h_inv[1]*fields.q->eval(1, 1, domain.voxelToWorld(vd+V2d(0.5, 1.5))))))+
			(fields.sigma_t->eval(domain.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.q->eval(2, 2, domain.voxelToWorld(vd+V2d(0.5, 0.5)))));
	Eigen::Matrix<double, 6, 1> b_real = (S*b).real();

	// Assembling global system =============
	ctx.coeff_A( 0, vi + V2i(-2,0), 0 ) += (h_inv[0]*h_inv[0]*-0.333333333333);
	ctx.coeff_A( 0, vi + V2i(0,0), 0 ) += -(h_inv[0]*h_inv[0]*-0.333333333333);
	ctx.coeff_A( 0, vi + V2i(0,0), 0 ) += -(h_inv[0]*h_inv[0]*-0.333333333333);
	ctx.coeff_A( 0, vi + V2i(2,0), 0 ) += (h_inv[0]*h_inv[0]*-0.333333333333);
	ctx.coeff_A( 3, vi + V2i(-2,0), 0 ) += (h_inv[0]*h_inv[0]*-0.258198889747);
	ctx.coeff_A( 3, vi + V2i(0,0), 0 ) += -(h_inv[0]*h_inv[0]*-0.258198889747);
	ctx.coeff_A( 3, vi + V2i(0,0), 0 ) += -(h_inv[0]*h_inv[0]*-0.258198889747);
	ctx.coeff_A( 3, vi + V2i(2,0), 0 ) += (h_inv[0]*h_inv[0]*-0.258198889747);
	ctx.coeff_A( 5, vi + V2i(-2,0), 0 ) += (h_inv[0]*h_inv[0]*0.1490711985);
	ctx.coeff_A( 5, vi + V2i(0,0), 0 ) += -(h_inv[0]*h_inv[0]*0.1490711985);
	ctx.coeff_A( 5, vi + V2i(0,0), 0 ) += -(h_inv[0]*h_inv[0]*0.1490711985);
	ctx.coeff_A( 5, vi + V2i(2,0), 0 ) += (h_inv[0]*h_inv[0]*0.1490711985);
	ctx.coeff_A( 1, vi + V2i(-2,0), 1 ) += (h_inv[0]*h_inv[0]*-0.6);
	ctx.coeff_A( 1, vi + V2i(0,0), 1 ) += -(h_inv[0]*h_inv[0]*-0.6);
	ctx.coeff_A( 1, vi + V2i(0,0), 1 ) += -(h_inv[0]*h_inv[0]*-0.6);
	ctx.coeff_A( 1, vi + V2i(2,0), 1 ) += (h_inv[0]*h_inv[0]*-0.6);
	ctx.coeff_A( 2, vi + V2i(-2,0), 2 ) += (h_inv[0]*h_inv[0]*-0.2);
	ctx.coeff_A( 2, vi + V2i(0,0), 2 ) += -(h_inv[0]*h_inv[0]*-0.2);
	ctx.coeff_A( 2, vi + V2i(0,0), 2 ) += -(h_inv[0]*h_inv[0]*-0.2);
	ctx.coeff_A( 2, vi + V2i(2,0), 2 ) += (h_inv[0]*h_inv[0]*-0.2);
	ctx.coeff_A( 0, vi + V2i(-2,0), 3 ) += (h_inv[0]*h_inv[0]*-0.258198889747);
	ctx.coeff_A( 0, vi + V2i(0,0), 3 ) += -(h_inv[0]*h_inv[0]*-0.258198889747);
	ctx.coeff_A( 0, vi + V2i(0,0), 3 ) += -(h_inv[0]*h_inv[0]*-0.258198889747);
	ctx.coeff_A( 0, vi + V2i(2,0), 3 ) += (h_inv[0]*h_inv[0]*-0.258198889747);
	ctx.coeff_A( 3, vi + V2i(-2,0), 3 ) += (h_inv[0]*h_inv[0]*-0.428571428571);
	ctx.coeff_A( 3, vi + V2i(0,0), 3 ) += -(h_inv[0]*h_inv[0]*-0.428571428571);
	ctx.coeff_A( 3, vi + V2i(0,0), 3 ) += -(h_inv[0]*h_inv[0]*-0.428571428571);
	ctx.coeff_A( 3, vi + V2i(2,0), 3 ) += (h_inv[0]*h_inv[0]*-0.428571428571);
	ctx.coeff_A( 5, vi + V2i(-2,0), 3 ) += (h_inv[0]*h_inv[0]*0.164957219768);
	ctx.coeff_A( 5, vi + V2i(0,0), 3 ) += -(h_inv[0]*h_inv[0]*0.164957219768);
	ctx.coeff_A( 5, vi + V2i(0,0), 3 ) += -(h_inv[0]*h_inv[0]*0.164957219768);
	ctx.coeff_A( 5, vi + V2i(2,0), 3 ) += (h_inv[0]*h_inv[0]*0.164957219768);
	ctx.coeff_A( 4, vi + V2i(-2,0), 4 ) += (h_inv[0]*h_inv[0]*-0.428571428571);
	ctx.coeff_A( 4, vi + V2i(0,0), 4 ) += -(h_inv[0]*h_inv[0]*-0.428571428571);
	ctx.coeff_A( 4, vi + V2i(0,0), 4 ) += -(h_inv[0]*h_inv[0]*-0.428571428571);
	ctx.coeff_A( 4, vi + V2i(2,0), 4 ) += (h_inv[0]*h_inv[0]*-0.428571428571);
	ctx.coeff_A( 0, vi + V2i(-2,0), 5 ) += (h_inv[0]*h_inv[0]*0.1490711985);
	ctx.coeff_A( 0, vi + V2i(0,0), 5 ) += -(h_inv[0]*h_inv[0]*0.1490711985);
	ctx.coeff_A( 0, vi + V2i(0,0), 5 ) += -(h_inv[0]*h_inv[0]*0.1490711985);
	ctx.coeff_A( 0, vi + V2i(2,0), 5 ) += (h_inv[0]*h_inv[0]*0.1490711985);
	ctx.coeff_A( 3, vi + V2i(-2,0), 5 ) += (h_inv[0]*h_inv[0]*0.164957219768);
	ctx.coeff_A( 3, vi + V2i(0,0), 5 ) += -(h_inv[0]*h_inv[0]*0.164957219768);
	ctx.coeff_A( 3, vi + V2i(0,0), 5 ) += -(h_inv[0]*h_inv[0]*0.164957219768);
	ctx.coeff_A( 3, vi + V2i(2,0), 5 ) += (h_inv[0]*h_inv[0]*0.164957219768);
	ctx.coeff_A( 5, vi + V2i(-2,0), 5 ) += (h_inv[0]*h_inv[0]*-0.238095238095);
	ctx.coeff_A( 5, vi + V2i(0,0), 5 ) += -(h_inv[0]*h_inv[0]*-0.238095238095);
	ctx.coeff_A( 5, vi + V2i(0,0), 5 ) += -(h_inv[0]*h_inv[0]*-0.238095238095);
	ctx.coeff_A( 5, vi + V2i(2,0), 5 ) += (h_inv[0]*h_inv[0]*-0.238095238095);
	ctx.coeff_A( 4, vi + V2i(-1,-1), 0 ) += (h_inv[1]*h_inv[0]*-0.258198889747);
	ctx.coeff_A( 4, vi + V2i(-1,1), 0 ) += -(h_inv[1]*h_inv[0]*-0.258198889747);
	ctx.coeff_A( 4, vi + V2i(1,-1), 0 ) += -(h_inv[1]*h_inv[0]*-0.258198889747);
	ctx.coeff_A( 4, vi + V2i(1,1), 0 ) += (h_inv[1]*h_inv[0]*-0.258198889747);
	ctx.coeff_A( 2, vi + V2i(-1,-1), 1 ) += (h_inv[1]*h_inv[0]*-0.2);
	ctx.coeff_A( 2, vi + V2i(-1,1), 1 ) += -(h_inv[1]*h_inv[0]*-0.2);
	ctx.coeff_A( 2, vi + V2i(1,-1), 1 ) += -(h_inv[1]*h_inv[0]*-0.2);
	ctx.coeff_A( 2, vi + V2i(1,1), 1 ) += (h_inv[1]*h_inv[0]*-0.2);
	ctx.coeff_A( 1, vi + V2i(-1,-1), 2 ) += (h_inv[1]*h_inv[0]*-0.2);
	ctx.coeff_A( 1, vi + V2i(-1,1), 2 ) += -(h_inv[1]*h_inv[0]*-0.2);
	ctx.coeff_A( 1, vi + V2i(1,-1), 2 ) += -(h_inv[1]*h_inv[0]*-0.2);
	ctx.coeff_A( 1, vi + V2i(1,1), 2 ) += (h_inv[1]*h_inv[0]*-0.2);
	ctx.coeff_A( 0, vi + V2i(-1,-1), 4 ) += (h_inv[1]*h_inv[0]*-0.258198889747);
	ctx.coeff_A( 0, vi + V2i(-1,1), 4 ) += -(h_inv[1]*h_inv[0]*-0.258198889747);
	ctx.coeff_A( 0, vi + V2i(1,-1), 4 ) += -(h_inv[1]*h_inv[0]*-0.258198889747);
	ctx.coeff_A( 0, vi + V2i(1,1), 4 ) += (h_inv[1]*h_inv[0]*-0.258198889747);
	ctx.coeff_A( 5, vi + V2i(-1,-1), 4 ) += (h_inv[1]*h_inv[0]*0.164957219768);
	ctx.coeff_A( 5, vi + V2i(-1,1), 4 ) += -(h_inv[1]*h_inv[0]*0.164957219768);
	ctx.coeff_A( 5, vi + V2i(1,-1), 4 ) += -(h_inv[1]*h_inv[0]*0.164957219768);
	ctx.coeff_A( 5, vi + V2i(1,1), 4 ) += (h_inv[1]*h_inv[0]*0.164957219768);
	ctx.coeff_A( 4, vi + V2i(-1,-1), 5 ) += (h_inv[1]*h_inv[0]*0.164957219768);
	ctx.coeff_A( 4, vi + V2i(-1,1), 5 ) += -(h_inv[1]*h_inv[0]*0.164957219768);
	ctx.coeff_A( 4, vi + V2i(1,-1), 5 ) += -(h_inv[1]*h_inv[0]*0.164957219768);
	ctx.coeff_A( 4, vi + V2i(1,1), 5 ) += (h_inv[1]*h_inv[0]*0.164957219768);
	ctx.coeff_A( 4, vi + V2i(-1,-1), 0 ) += (h_inv[0]*h_inv[1]*-0.258198889747);
	ctx.coeff_A( 4, vi + V2i(1,-1), 0 ) += -(h_inv[0]*h_inv[1]*-0.258198889747);
	ctx.coeff_A( 4, vi + V2i(-1,1), 0 ) += -(h_inv[0]*h_inv[1]*-0.258198889747);
	ctx.coeff_A( 4, vi + V2i(1,1), 0 ) += (h_inv[0]*h_inv[1]*-0.258198889747);
	ctx.coeff_A( 2, vi + V2i(-1,-1), 1 ) += (h_inv[0]*h_inv[1]*-0.2);
	ctx.coeff_A( 2, vi + V2i(1,-1), 1 ) += -(h_inv[0]*h_inv[1]*-0.2);
	ctx.coeff_A( 2, vi + V2i(-1,1), 1 ) += -(h_inv[0]*h_inv[1]*-0.2);
	ctx.coeff_A( 2, vi + V2i(1,1), 1 ) += (h_inv[0]*h_inv[1]*-0.2);
	ctx.coeff_A( 1, vi + V2i(-1,-1), 2 ) += (h_inv[0]*h_inv[1]*-0.2);
	ctx.coeff_A( 1, vi + V2i(1,-1), 2 ) += -(h_inv[0]*h_inv[1]*-0.2);
	ctx.coeff_A( 1, vi + V2i(-1,1), 2 ) += -(h_inv[0]*h_inv[1]*-0.2);
	ctx.coeff_A( 1, vi + V2i(1,1), 2 ) += (h_inv[0]*h_inv[1]*-0.2);
	ctx.coeff_A( 0, vi + V2i(-1,-1), 4 ) += (h_inv[0]*h_inv[1]*-0.258198889747);
	ctx.coeff_A( 0, vi + V2i(1,-1), 4 ) += -(h_inv[0]*h_inv[1]*-0.258198889747);
	ctx.coeff_A( 0, vi + V2i(-1,1), 4 ) += -(h_inv[0]*h_inv[1]*-0.258198889747);
	ctx.coeff_A( 0, vi + V2i(1,1), 4 ) += (h_inv[0]*h_inv[1]*-0.258198889747);
	ctx.coeff_A( 5, vi + V2i(-1,-1), 4 ) += (h_inv[0]*h_inv[1]*0.164957219768);
	ctx.coeff_A( 5, vi + V2i(1,-1), 4 ) += -(h_inv[0]*h_inv[1]*0.164957219768);
	ctx.coeff_A( 5, vi + V2i(-1,1), 4 ) += -(h_inv[0]*h_inv[1]*0.164957219768);
	ctx.coeff_A( 5, vi + V2i(1,1), 4 ) += (h_inv[0]*h_inv[1]*0.164957219768);
	ctx.coeff_A( 4, vi + V2i(-1,-1), 5 ) += (h_inv[0]*h_inv[1]*0.164957219768);
	ctx.coeff_A( 4, vi + V2i(1,-1), 5 ) += -(h_inv[0]*h_inv[1]*0.164957219768);
	ctx.coeff_A( 4, vi + V2i(-1,1), 5 ) += -(h_inv[0]*h_inv[1]*0.164957219768);
	ctx.coeff_A( 4, vi + V2i(1,1), 5 ) += (h_inv[0]*h_inv[1]*0.164957219768);
	ctx.coeff_A( 0, vi + V2i(0,-2), 0 ) += (h_inv[1]*h_inv[1]*-0.333333333333);
	ctx.coeff_A( 0, vi + V2i(0,0), 0 ) += -(h_inv[1]*h_inv[1]*-0.333333333333);
	ctx.coeff_A( 0, vi + V2i(0,0), 0 ) += -(h_inv[1]*h_inv[1]*-0.333333333333);
	ctx.coeff_A( 0, vi + V2i(0,2), 0 ) += (h_inv[1]*h_inv[1]*-0.333333333333);
	ctx.coeff_A( 3, vi + V2i(0,-2), 0 ) += (h_inv[1]*h_inv[1]*0.258198889747);
	ctx.coeff_A( 3, vi + V2i(0,0), 0 ) += -(h_inv[1]*h_inv[1]*0.258198889747);
	ctx.coeff_A( 3, vi + V2i(0,0), 0 ) += -(h_inv[1]*h_inv[1]*0.258198889747);
	ctx.coeff_A( 3, vi + V2i(0,2), 0 ) += (h_inv[1]*h_inv[1]*0.258198889747);
	ctx.coeff_A( 5, vi + V2i(0,-2), 0 ) += (h_inv[1]*h_inv[1]*0.1490711985);
	ctx.coeff_A( 5, vi + V2i(0,0), 0 ) += -(h_inv[1]*h_inv[1]*0.1490711985);
	ctx.coeff_A( 5, vi + V2i(0,0), 0 ) += -(h_inv[1]*h_inv[1]*0.1490711985);
	ctx.coeff_A( 5, vi + V2i(0,2), 0 ) += (h_inv[1]*h_inv[1]*0.1490711985);
	ctx.coeff_A( 1, vi + V2i(0,-2), 1 ) += (h_inv[1]*h_inv[1]*-0.2);
	ctx.coeff_A( 1, vi + V2i(0,0), 1 ) += -(h_inv[1]*h_inv[1]*-0.2);
	ctx.coeff_A( 1, vi + V2i(0,0), 1 ) += -(h_inv[1]*h_inv[1]*-0.2);
	ctx.coeff_A( 1, vi + V2i(0,2), 1 ) += (h_inv[1]*h_inv[1]*-0.2);
	ctx.coeff_A( 2, vi + V2i(0,-2), 2 ) += (h_inv[1]*h_inv[1]*-0.6);
	ctx.coeff_A( 2, vi + V2i(0,0), 2 ) += -(h_inv[1]*h_inv[1]*-0.6);
	ctx.coeff_A( 2, vi + V2i(0,0), 2 ) += -(h_inv[1]*h_inv[1]*-0.6);
	ctx.coeff_A( 2, vi + V2i(0,2), 2 ) += (h_inv[1]*h_inv[1]*-0.6);
	ctx.coeff_A( 0, vi + V2i(0,-2), 3 ) += (h_inv[1]*h_inv[1]*0.258198889747);
	ctx.coeff_A( 0, vi + V2i(0,0), 3 ) += -(h_inv[1]*h_inv[1]*0.258198889747);
	ctx.coeff_A( 0, vi + V2i(0,0), 3 ) += -(h_inv[1]*h_inv[1]*0.258198889747);
	ctx.coeff_A( 0, vi + V2i(0,2), 3 ) += (h_inv[1]*h_inv[1]*0.258198889747);
	ctx.coeff_A( 3, vi + V2i(0,-2), 3 ) += (h_inv[1]*h_inv[1]*-0.428571428571);
	ctx.coeff_A( 3, vi + V2i(0,0), 3 ) += -(h_inv[1]*h_inv[1]*-0.428571428571);
	ctx.coeff_A( 3, vi + V2i(0,0), 3 ) += -(h_inv[1]*h_inv[1]*-0.428571428571);
	ctx.coeff_A( 3, vi + V2i(0,2), 3 ) += (h_inv[1]*h_inv[1]*-0.428571428571);
	ctx.coeff_A( 5, vi + V2i(0,-2), 3 ) += (h_inv[1]*h_inv[1]*-0.164957219768);
	ctx.coeff_A( 5, vi + V2i(0,0), 3 ) += -(h_inv[1]*h_inv[1]*-0.164957219768);
	ctx.coeff_A( 5, vi + V2i(0,0), 3 ) += -(h_inv[1]*h_inv[1]*-0.164957219768);
	ctx.coeff_A( 5, vi + V2i(0,2), 3 ) += (h_inv[1]*h_inv[1]*-0.164957219768);
	ctx.coeff_A( 4, vi + V2i(0,-2), 4 ) += (h_inv[1]*h_inv[1]*-0.428571428571);
	ctx.coeff_A( 4, vi + V2i(0,0), 4 ) += -(h_inv[1]*h_inv[1]*-0.428571428571);
	ctx.coeff_A( 4, vi + V2i(0,0), 4 ) += -(h_inv[1]*h_inv[1]*-0.428571428571);
	ctx.coeff_A( 4, vi + V2i(0,2), 4 ) += (h_inv[1]*h_inv[1]*-0.428571428571);
	ctx.coeff_A( 0, vi + V2i(0,-2), 5 ) += (h_inv[1]*h_inv[1]*0.1490711985);
	ctx.coeff_A( 0, vi + V2i(0,0), 5 ) += -(h_inv[1]*h_inv[1]*0.1490711985);
	ctx.coeff_A( 0, vi + V2i(0,0), 5 ) += -(h_inv[1]*h_inv[1]*0.1490711985);
	ctx.coeff_A( 0, vi + V2i(0,2), 5 ) += (h_inv[1]*h_inv[1]*0.1490711985);
	ctx.coeff_A( 3, vi + V2i(0,-2), 5 ) += (h_inv[1]*h_inv[1]*-0.164957219768);
	ctx.coeff_A( 3, vi + V2i(0,0), 5 ) += -(h_inv[1]*h_inv[1]*-0.164957219768);
	ctx.coeff_A( 3, vi + V2i(0,0), 5 ) += -(h_inv[1]*h_inv[1]*-0.164957219768);
	ctx.coeff_A( 3, vi + V2i(0,2), 5 ) += (h_inv[1]*h_inv[1]*-0.164957219768);
	ctx.coeff_A( 5, vi + V2i(0,-2), 5 ) += (h_inv[1]*h_inv[1]*-0.238095238095);
	ctx.coeff_A( 5, vi + V2i(0,0), 5 ) += -(h_inv[1]*h_inv[1]*-0.238095238095);
	ctx.coeff_A( 5, vi + V2i(0,0), 5 ) += -(h_inv[1]*h_inv[1]*-0.238095238095);
	ctx.coeff_A( 5, vi + V2i(0,2), 5 ) += (h_inv[1]*h_inv[1]*-0.238095238095);
	ctx.coeff_A( 0, vi + V2i(0,0), 0 ) += M_9_real.coeffRef(0, 0);
	ctx.coeff_A( 1, vi + V2i(0,0), 0 ) += M_9_real.coeffRef(1, 0);
	ctx.coeff_A( 2, vi + V2i(0,0), 0 ) += M_9_real.coeffRef(2, 0);
	ctx.coeff_A( 0, vi + V2i(0,0), 1 ) += M_9_real.coeffRef(0, 1);
	ctx.coeff_A( 1, vi + V2i(0,0), 1 ) += M_9_real.coeffRef(1, 1);
	ctx.coeff_A( 3, vi + V2i(0,0), 1 ) += M_9_real.coeffRef(3, 1);
	ctx.coeff_A( 4, vi + V2i(0,0), 1 ) += M_9_real.coeffRef(4, 1);
	ctx.coeff_A( 0, vi + V2i(0,0), 2 ) += M_9_real.coeffRef(0, 2);
	ctx.coeff_A( 2, vi + V2i(0,0), 2 ) += M_9_real.coeffRef(2, 2);
	ctx.coeff_A( 4, vi + V2i(0,0), 2 ) += M_9_real.coeffRef(4, 2);
	ctx.coeff_A( 5, vi + V2i(0,0), 2 ) += M_9_real.coeffRef(5, 2);
	ctx.coeff_A( 1, vi + V2i(0,0), 3 ) += M_9_real.coeffRef(1, 3);
	ctx.coeff_A( 3, vi + V2i(0,0), 3 ) += M_9_real.coeffRef(3, 3);
	ctx.coeff_A( 1, vi + V2i(0,0), 4 ) += M_9_real.coeffRef(1, 4);
	ctx.coeff_A( 2, vi + V2i(0,0), 4 ) += M_9_real.coeffRef(2, 4);
	ctx.coeff_A( 4, vi + V2i(0,0), 4 ) += M_9_real.coeffRef(4, 4);
	ctx.coeff_A( 2, vi + V2i(0,0), 5 ) += M_9_real.coeffRef(2, 5);
	ctx.coeff_A( 5, vi + V2i(0,0), 5 ) += M_9_real.coeffRef(5, 5);
	ctx.coeff_A( 1, vi + V2i(-1,0), 0 ) += -(h_inv[0]*M_10_real.coeffRef(1, 0));
	ctx.coeff_A( 1, vi + V2i(1,0), 0 ) += (h_inv[0]*M_10_real.coeffRef(1, 0));
	ctx.coeff_A( 2, vi + V2i(-1,0), 0 ) += -(h_inv[0]*M_10_real.coeffRef(2, 0));
	ctx.coeff_A( 2, vi + V2i(1,0), 0 ) += (h_inv[0]*M_10_real.coeffRef(2, 0));
	ctx.coeff_A( 0, vi + V2i(-1,0), 1 ) += -(h_inv[0]*M_10_real.coeffRef(0, 1));
	ctx.coeff_A( 0, vi + V2i(1,0), 1 ) += (h_inv[0]*M_10_real.coeffRef(0, 1));
	ctx.coeff_A( 3, vi + V2i(-1,0), 1 ) += -(h_inv[0]*M_10_real.coeffRef(3, 1));
	ctx.coeff_A( 3, vi + V2i(1,0), 1 ) += (h_inv[0]*M_10_real.coeffRef(3, 1));
	ctx.coeff_A( 4, vi + V2i(-1,0), 1 ) += -(h_inv[0]*M_10_real.coeffRef(4, 1));
	ctx.coeff_A( 4, vi + V2i(1,0), 1 ) += (h_inv[0]*M_10_real.coeffRef(4, 1));
	ctx.coeff_A( 0, vi + V2i(-1,0), 2 ) += -(h_inv[0]*M_10_real.coeffRef(0, 2));
	ctx.coeff_A( 0, vi + V2i(1,0), 2 ) += (h_inv[0]*M_10_real.coeffRef(0, 2));
	ctx.coeff_A( 4, vi + V2i(-1,0), 2 ) += -(h_inv[0]*M_10_real.coeffRef(4, 2));
	ctx.coeff_A( 4, vi + V2i(1,0), 2 ) += (h_inv[0]*M_10_real.coeffRef(4, 2));
	ctx.coeff_A( 5, vi + V2i(-1,0), 2 ) += -(h_inv[0]*M_10_real.coeffRef(5, 2));
	ctx.coeff_A( 5, vi + V2i(1,0), 2 ) += (h_inv[0]*M_10_real.coeffRef(5, 2));
	ctx.coeff_A( 1, vi + V2i(-1,0), 3 ) += -(h_inv[0]*M_10_real.coeffRef(1, 3));
	ctx.coeff_A( 1, vi + V2i(1,0), 3 ) += (h_inv[0]*M_10_real.coeffRef(1, 3));
	ctx.coeff_A( 1, vi + V2i(-1,0), 4 ) += -(h_inv[0]*M_10_real.coeffRef(1, 4));
	ctx.coeff_A( 1, vi + V2i(1,0), 4 ) += (h_inv[0]*M_10_real.coeffRef(1, 4));
	ctx.coeff_A( 2, vi + V2i(-1,0), 4 ) += -(h_inv[0]*M_10_real.coeffRef(2, 4));
	ctx.coeff_A( 2, vi + V2i(1,0), 4 ) += (h_inv[0]*M_10_real.coeffRef(2, 4));
	ctx.coeff_A( 2, vi + V2i(-1,0), 5 ) += -(h_inv[0]*M_10_real.coeffRef(2, 5));
	ctx.coeff_A( 2, vi + V2i(1,0), 5 ) += (h_inv[0]*M_10_real.coeffRef(2, 5));
	ctx.coeff_A( 1, vi + V2i(0,-1), 0 ) += -(h_inv[1]*M_11_real.coeffRef(1, 0));
	ctx.coeff_A( 1, vi + V2i(0,1), 0 ) += (h_inv[1]*M_11_real.coeffRef(1, 0));
	ctx.coeff_A( 2, vi + V2i(0,-1), 0 ) += -(h_inv[1]*M_11_real.coeffRef(2, 0));
	ctx.coeff_A( 2, vi + V2i(0,1), 0 ) += (h_inv[1]*M_11_real.coeffRef(2, 0));
	ctx.coeff_A( 0, vi + V2i(0,-1), 1 ) += -(h_inv[1]*M_11_real.coeffRef(0, 1));
	ctx.coeff_A( 0, vi + V2i(0,1), 1 ) += (h_inv[1]*M_11_real.coeffRef(0, 1));
	ctx.coeff_A( 3, vi + V2i(0,-1), 1 ) += -(h_inv[1]*M_11_real.coeffRef(3, 1));
	ctx.coeff_A( 3, vi + V2i(0,1), 1 ) += (h_inv[1]*M_11_real.coeffRef(3, 1));
	ctx.coeff_A( 4, vi + V2i(0,-1), 1 ) += -(h_inv[1]*M_11_real.coeffRef(4, 1));
	ctx.coeff_A( 4, vi + V2i(0,1), 1 ) += (h_inv[1]*M_11_real.coeffRef(4, 1));
	ctx.coeff_A( 0, vi + V2i(0,-1), 2 ) += -(h_inv[1]*M_11_real.coeffRef(0, 2));
	ctx.coeff_A( 0, vi + V2i(0,1), 2 ) += (h_inv[1]*M_11_real.coeffRef(0, 2));
	ctx.coeff_A( 4, vi + V2i(0,-1), 2 ) += -(h_inv[1]*M_11_real.coeffRef(4, 2));
	ctx.coeff_A( 4, vi + V2i(0,1), 2 ) += (h_inv[1]*M_11_real.coeffRef(4, 2));
	ctx.coeff_A( 5, vi + V2i(0,-1), 2 ) += -(h_inv[1]*M_11_real.coeffRef(5, 2));
	ctx.coeff_A( 5, vi + V2i(0,1), 2 ) += (h_inv[1]*M_11_real.coeffRef(5, 2));
	ctx.coeff_A( 1, vi + V2i(0,-1), 3 ) += -(h_inv[1]*M_11_real.coeffRef(1, 3));
	ctx.coeff_A( 1, vi + V2i(0,1), 3 ) += (h_inv[1]*M_11_real.coeffRef(1, 3));
	ctx.coeff_A( 1, vi + V2i(0,-1), 4 ) += -(h_inv[1]*M_11_real.coeffRef(1, 4));
	ctx.coeff_A( 1, vi + V2i(0,1), 4 ) += (h_inv[1]*M_11_real.coeffRef(1, 4));
	ctx.coeff_A( 2, vi + V2i(0,-1), 4 ) += -(h_inv[1]*M_11_real.coeffRef(2, 4));
	ctx.coeff_A( 2, vi + V2i(0,1), 4 ) += (h_inv[1]*M_11_real.coeffRef(2, 4));
	ctx.coeff_A( 2, vi + V2i(0,-1), 5 ) += -(h_inv[1]*M_11_real.coeffRef(2, 5));
	ctx.coeff_A( 2, vi + V2i(0,1), 5 ) += (h_inv[1]*M_11_real.coeffRef(2, 5));
	ctx.coeff_b( 0 ) += b_real.coeffRef(0, 0);
	ctx.coeff_b( 1 ) += b_real.coeffRef(1, 0);
	ctx.coeff_b( 2 ) += b_real.coeffRef(2, 0);
	ctx.coeff_b( 3 ) += b_real.coeffRef(3, 0);
	ctx.coeff_b( 4 ) += b_real.coeffRef(4, 0);
	ctx.coeff_b( 5 ) += b_real.coeffRef(5, 0);
}
V2i stencil_sopn_p2_cg_get_offset(int coeff)
{
	switch(coeff)
	{
		case 0:return V2i(1, 1);break;
		case 1:return V2i(1, 1);break;
		case 2:return V2i(1, 1);break;
		case 3:return V2i(1, 1);break;
		case 4:return V2i(1, 1);break;
		case 5:return V2i(1, 1);break;
		default:throw std::runtime_error("unexpected coefficient index");break;
	};
}
REGISTER_STENCIL(stencil_sopn_p2_cg, 2, 2)
