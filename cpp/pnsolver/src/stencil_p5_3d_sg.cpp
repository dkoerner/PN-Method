// This file was generated by stencil2.py on Wednesday, 07. February 2018 03:24PM

#include <PNSystem.h>

void stencil_p5_3d_sg(PNSystem::Stencil::Context& ctx)
{
	V3i vi = ctx.getVoxelCoord();
	V3d vd = vi.cast<double>();
	const Domain& domain = ctx.getDomain();
	const PNVolume& problem = ctx.getProblem();
	V3d h_inv( 1.0/(1*domain.getVoxelSize()[0]), 1.0/(1*domain.getVoxelSize()[1]), 1.0/(1*domain.getVoxelSize()[2]) );
	int color_channel = 0;

	// row=0 l=0 m=0 --------------------------
	ctx.coeff_A( 0, vi+V3i(0, 0, 0), 3 ) += (0.57735026919*h_inv[0]);
	ctx.coeff_A( 0, vi+V3i(1, 0, 0), 3 ) += -(0.57735026919*h_inv[0]);
	ctx.coeff_A( 0, vi+V3i(0, 0, 0), 1 ) += (0.57735026919*h_inv[1]);
	ctx.coeff_A( 0, vi+V3i(0, 1, 0), 1 ) += -(0.57735026919*h_inv[1]);
	ctx.coeff_A( 0, vi+V3i(0, 0, 0), 2 ) += -(0.36514837167*h_inv[2]);
	ctx.coeff_A( 0, vi+V3i(0, 0, 1), 2 ) += (0.36514837167*h_inv[2]);
	{
		double c = 0.0;
		c+=ctx.evalExtinction(0, 0, 0)[color_channel];
		c+=-(3.54490770181*ctx.evalScattering(0, 0, 0)[color_channel]*ctx.evalPhase(0, 0, 0, 0, 0)[color_channel]);
		ctx.coeff_A( 0, vi+V3i(0, 0, 0), 0 ) += c;
	}
	{
		double c = 0.0;
		c+=ctx.evalEmission(0, 0, 0, 0, 0)[color_channel];
		ctx.coeff_b( 0 ) += c;
	}
	// row=1 l=1 m=-1 --------------------------
	ctx.coeff_A( 1, vi+V3i(0, -1, 0), 8 ) += -(0.4472135955*h_inv[1]);
	ctx.coeff_A( 1, vi+V3i(0, 0, 0), 8 ) += (0.4472135955*h_inv[1]);
	ctx.coeff_A( 1, vi+V3i(0, -1, 0), 0 ) += (0.57735026919*h_inv[1]);
	ctx.coeff_A( 1, vi+V3i(0, 0, 0), 0 ) += -(0.57735026919*h_inv[1]);
	ctx.coeff_A( 1, vi+V3i(0, -1, 0), 6 ) += -(0.258198889747*h_inv[1]);
	ctx.coeff_A( 1, vi+V3i(0, 0, 0), 6 ) += (0.258198889747*h_inv[1]);
	ctx.coeff_A( 1, vi+V3i(0, 0, 0), 4 ) += (0.4472135955*h_inv[0]);
	ctx.coeff_A( 1, vi+V3i(1, 0, 0), 4 ) += -(0.4472135955*h_inv[0]);
	ctx.coeff_A( 1, vi+V3i(0, 0, 0), 5 ) += -(0.478091443734*h_inv[2]);
	ctx.coeff_A( 1, vi+V3i(0, 0, 1), 5 ) += (0.478091443734*h_inv[2]);
	{
		double c = 0.0;
		c+=(0.5*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(0.5*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.511663353973*ctx.evalPhase(1, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.511663353973*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.511663353973*ctx.evalPhase(1, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.511663353973*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 1, vi+V3i(0, 0, 0), 1 ) += c;
	}
	{
		double c = 0.0;
		c+=(0.5*ctx.evalEmission(1, -1, 0, -1, 0)[color_channel]);
		c+=(0.5*ctx.evalEmission(1, -1, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 1 ) += c;
	}
	// row=2 l=1 m=0 --------------------------
	ctx.coeff_A( 2, vi+V3i(0, 0, 0), 7 ) += (0.4472135955*h_inv[0]);
	ctx.coeff_A( 2, vi+V3i(1, 0, 0), 7 ) += -(0.4472135955*h_inv[0]);
	ctx.coeff_A( 2, vi+V3i(0, 0, 0), 5 ) += (0.4472135955*h_inv[1]);
	ctx.coeff_A( 2, vi+V3i(0, 1, 0), 5 ) += -(0.4472135955*h_inv[1]);
	ctx.coeff_A( 2, vi+V3i(0, 0, -1), 0 ) += -(0.408248290464*h_inv[2]);
	ctx.coeff_A( 2, vi+V3i(0, 0, 0), 0 ) += (0.408248290464*h_inv[2]);
	ctx.coeff_A( 2, vi+V3i(0, 0, -1), 6 ) += -(0.3585685828*h_inv[2]);
	ctx.coeff_A( 2, vi+V3i(0, 0, 0), 6 ) += (0.3585685828*h_inv[2]);
	{
		double c = 0.0;
		c+=(0.5*ctx.evalExtinction(0, 0, -1)[color_channel]);
		c+=(0.5*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.511663353973*ctx.evalPhase(1, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.511663353973*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.511663353973*ctx.evalPhase(1, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.511663353973*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 2, vi+V3i(0, 0, 0), 2 ) += c;
	}
	{
		double c = 0.0;
		c+=(0.5*ctx.evalEmission(1, 0, 0, 0, -1)[color_channel]);
		c+=(0.5*ctx.evalEmission(1, 0, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 2 ) += c;
	}
	// row=3 l=1 m=1 --------------------------
	ctx.coeff_A( 3, vi+V3i(-1, 0, 0), 8 ) += (0.4472135955*h_inv[0]);
	ctx.coeff_A( 3, vi+V3i(0, 0, 0), 8 ) += -(0.4472135955*h_inv[0]);
	ctx.coeff_A( 3, vi+V3i(-1, 0, 0), 0 ) += (0.57735026919*h_inv[0]);
	ctx.coeff_A( 3, vi+V3i(0, 0, 0), 0 ) += -(0.57735026919*h_inv[0]);
	ctx.coeff_A( 3, vi+V3i(-1, 0, 0), 6 ) += -(0.258198889747*h_inv[0]);
	ctx.coeff_A( 3, vi+V3i(0, 0, 0), 6 ) += (0.258198889747*h_inv[0]);
	ctx.coeff_A( 3, vi+V3i(0, 0, 0), 4 ) += (0.4472135955*h_inv[1]);
	ctx.coeff_A( 3, vi+V3i(0, 1, 0), 4 ) += -(0.4472135955*h_inv[1]);
	ctx.coeff_A( 3, vi+V3i(0, 0, 0), 7 ) += -(0.478091443734*h_inv[2]);
	ctx.coeff_A( 3, vi+V3i(0, 0, 1), 7 ) += (0.478091443734*h_inv[2]);
	{
		double c = 0.0;
		c+=(0.5*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(0.5*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.511663353973*ctx.evalPhase(1, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.511663353973*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.511663353973*ctx.evalPhase(1, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.511663353973*ctx.evalPhase(1, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 3, vi+V3i(0, 0, 0), 3 ) += c;
	}
	{
		double c = 0.0;
		c+=(0.5*ctx.evalEmission(1, 1, -1, 0, 0)[color_channel]);
		c+=(0.5*ctx.evalEmission(1, 1, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 3 ) += c;
	}
	// row=4 l=2 m=-2 --------------------------
	ctx.coeff_A( 4, vi+V3i(0, -1, 0), 15 ) += -(0.462910049886*h_inv[1]);
	ctx.coeff_A( 4, vi+V3i(0, 0, 0), 15 ) += (0.462910049886*h_inv[1]);
	ctx.coeff_A( 4, vi+V3i(0, -1, 0), 3 ) += (0.4472135955*h_inv[1]);
	ctx.coeff_A( 4, vi+V3i(0, 0, 0), 3 ) += -(0.4472135955*h_inv[1]);
	ctx.coeff_A( 4, vi+V3i(0, -1, 0), 13 ) += -(0.119522860933*h_inv[1]);
	ctx.coeff_A( 4, vi+V3i(0, 0, 0), 13 ) += (0.119522860933*h_inv[1]);
	ctx.coeff_A( 4, vi+V3i(-1, 0, 0), 1 ) += (0.4472135955*h_inv[0]);
	ctx.coeff_A( 4, vi+V3i(0, 0, 0), 1 ) += -(0.4472135955*h_inv[0]);
	ctx.coeff_A( 4, vi+V3i(-1, 0, 0), 11 ) += -(0.119522860933*h_inv[0]);
	ctx.coeff_A( 4, vi+V3i(0, 0, 0), 11 ) += (0.119522860933*h_inv[0]);
	ctx.coeff_A( 4, vi+V3i(-1, 0, 0), 9 ) += (0.462910049886*h_inv[0]);
	ctx.coeff_A( 4, vi+V3i(0, 0, 0), 9 ) += -(0.462910049886*h_inv[0]);
	ctx.coeff_A( 4, vi+V3i(0, 0, 0), 10 ) += -(0.436435780472*h_inv[2]);
	ctx.coeff_A( 4, vi+V3i(0, 0, 1), 10 ) += (0.436435780472*h_inv[2]);
	{
		double c = 0.0;
		c+=(0.25*ctx.evalExtinction(-1, -1, 0)[color_channel]);
		c+=(0.25*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(0.25*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(0.25*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 4, vi+V3i(0, 0, 0), 4 ) += c;
	}
	{
		double c = 0.0;
		c+=(0.25*ctx.evalEmission(2, -2, -1, -1, 0)[color_channel]);
		c+=(0.25*ctx.evalEmission(2, -2, -1, 0, 0)[color_channel]);
		c+=(0.25*ctx.evalEmission(2, -2, 0, -1, 0)[color_channel]);
		c+=(0.25*ctx.evalEmission(2, -2, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 4 ) += c;
	}
	// row=5 l=2 m=-1 --------------------------
	ctx.coeff_A( 5, vi+V3i(0, -1, 0), 14 ) += -(0.377964473009*h_inv[1]);
	ctx.coeff_A( 5, vi+V3i(0, 0, 0), 14 ) += (0.377964473009*h_inv[1]);
	ctx.coeff_A( 5, vi+V3i(0, -1, 0), 2 ) += (0.4472135955*h_inv[1]);
	ctx.coeff_A( 5, vi+V3i(0, 0, 0), 2 ) += -(0.4472135955*h_inv[1]);
	ctx.coeff_A( 5, vi+V3i(0, -1, 0), 12 ) += -(0.292770021885*h_inv[1]);
	ctx.coeff_A( 5, vi+V3i(0, 0, 0), 12 ) += (0.292770021885*h_inv[1]);
	ctx.coeff_A( 5, vi+V3i(0, 0, 0), 10 ) += (0.377964473009*h_inv[0]);
	ctx.coeff_A( 5, vi+V3i(1, 0, 0), 10 ) += -(0.377964473009*h_inv[0]);
	ctx.coeff_A( 5, vi+V3i(0, 0, -1), 1 ) += -(0.4472135955*h_inv[2]);
	ctx.coeff_A( 5, vi+V3i(0, 0, 0), 1 ) += (0.4472135955*h_inv[2]);
	ctx.coeff_A( 5, vi+V3i(0, 0, -1), 11 ) += -(0.487950036474*h_inv[2]);
	ctx.coeff_A( 5, vi+V3i(0, 0, 0), 11 ) += (0.487950036474*h_inv[2]);
	{
		double c = 0.0;
		c+=(0.25*ctx.evalExtinction(0, -1, -1)[color_channel]);
		c+=(0.25*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(0.25*ctx.evalExtinction(0, 0, -1)[color_channel]);
		c+=(0.25*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 5, vi+V3i(0, 0, 0), 5 ) += c;
	}
	{
		double c = 0.0;
		c+=(0.25*ctx.evalEmission(2, -1, 0, -1, -1)[color_channel]);
		c+=(0.25*ctx.evalEmission(2, -1, 0, -1, 0)[color_channel]);
		c+=(0.25*ctx.evalEmission(2, -1, 0, 0, -1)[color_channel]);
		c+=(0.25*ctx.evalEmission(2, -1, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 5 ) += c;
	}
	// row=6 l=2 m=0 --------------------------
	ctx.coeff_A( 6, vi+V3i(0, 0, 0), 3 ) += -(0.258198889747*h_inv[0]);
	ctx.coeff_A( 6, vi+V3i(1, 0, 0), 3 ) += (0.258198889747*h_inv[0]);
	ctx.coeff_A( 6, vi+V3i(0, 0, 0), 13 ) += (0.414039335605*h_inv[0]);
	ctx.coeff_A( 6, vi+V3i(1, 0, 0), 13 ) += -(0.414039335605*h_inv[0]);
	ctx.coeff_A( 6, vi+V3i(0, 0, 0), 1 ) += -(0.258198889747*h_inv[1]);
	ctx.coeff_A( 6, vi+V3i(0, 1, 0), 1 ) += (0.258198889747*h_inv[1]);
	ctx.coeff_A( 6, vi+V3i(0, 0, 0), 11 ) += (0.414039335605*h_inv[1]);
	ctx.coeff_A( 6, vi+V3i(0, 1, 0), 11 ) += -(0.414039335605*h_inv[1]);
	ctx.coeff_A( 6, vi+V3i(0, 0, 0), 2 ) += -(0.36514837167*h_inv[2]);
	ctx.coeff_A( 6, vi+V3i(0, 0, 1), 2 ) += (0.36514837167*h_inv[2]);
	ctx.coeff_A( 6, vi+V3i(0, 0, 0), 12 ) += -(0.35634832255*h_inv[2]);
	ctx.coeff_A( 6, vi+V3i(0, 0, 1), 12 ) += (0.35634832255*h_inv[2]);
	{
		double c = 0.0;
		c+=ctx.evalExtinction(0, 0, 0)[color_channel];
		c+=-(1.58533091904*ctx.evalScattering(0, 0, 0)[color_channel]*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]);
		ctx.coeff_A( 6, vi+V3i(0, 0, 0), 6 ) += c;
	}
	{
		double c = 0.0;
		c+=ctx.evalEmission(2, 0, 0, 0, 0)[color_channel];
		ctx.coeff_b( 6 ) += c;
	}
	// row=7 l=2 m=1 --------------------------
	ctx.coeff_A( 7, vi+V3i(-1, 0, 0), 14 ) += (0.377964473009*h_inv[0]);
	ctx.coeff_A( 7, vi+V3i(0, 0, 0), 14 ) += -(0.377964473009*h_inv[0]);
	ctx.coeff_A( 7, vi+V3i(-1, 0, 0), 2 ) += (0.4472135955*h_inv[0]);
	ctx.coeff_A( 7, vi+V3i(0, 0, 0), 2 ) += -(0.4472135955*h_inv[0]);
	ctx.coeff_A( 7, vi+V3i(-1, 0, 0), 12 ) += -(0.292770021885*h_inv[0]);
	ctx.coeff_A( 7, vi+V3i(0, 0, 0), 12 ) += (0.292770021885*h_inv[0]);
	ctx.coeff_A( 7, vi+V3i(0, 0, 0), 10 ) += (0.377964473009*h_inv[1]);
	ctx.coeff_A( 7, vi+V3i(0, 1, 0), 10 ) += -(0.377964473009*h_inv[1]);
	ctx.coeff_A( 7, vi+V3i(-1, 0, -1), 1 ) += -(0.111803398875*h_inv[2]);
	ctx.coeff_A( 7, vi+V3i(-1, 1, -1), 1 ) += -(0.111803398875*h_inv[2]);
	ctx.coeff_A( 7, vi+V3i(0, 0, -1), 1 ) += -(0.111803398875*h_inv[2]);
	ctx.coeff_A( 7, vi+V3i(0, 1, -1), 1 ) += -(0.111803398875*h_inv[2]);
	ctx.coeff_A( 7, vi+V3i(-1, 0, 0), 1 ) += (0.111803398875*h_inv[2]);
	ctx.coeff_A( 7, vi+V3i(-1, 1, 0), 1 ) += (0.111803398875*h_inv[2]);
	ctx.coeff_A( 7, vi+V3i(0, 0, 0), 1 ) += (0.111803398875*h_inv[2]);
	ctx.coeff_A( 7, vi+V3i(0, 1, 0), 1 ) += (0.111803398875*h_inv[2]);
	ctx.coeff_A( 7, vi+V3i(0, 0, -1), 13 ) += -(0.487950036474*h_inv[2]);
	ctx.coeff_A( 7, vi+V3i(0, 0, 0), 13 ) += (0.487950036474*h_inv[2]);
	{
		double c = 0.0;
		c+=(0.25*ctx.evalExtinction(-1, 0, -1)[color_channel]);
		c+=(0.25*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(0.25*ctx.evalExtinction(0, 0, -1)[color_channel]);
		c+=(0.25*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0990831824402*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 7, vi+V3i(0, 0, 0), 7 ) += c;
	}
	{
		double c = 0.0;
		c+=(0.25*ctx.evalEmission(2, 1, -1, 0, -1)[color_channel]);
		c+=(0.25*ctx.evalEmission(2, 1, -1, 0, 0)[color_channel]);
		c+=(0.25*ctx.evalEmission(2, 1, 0, 0, -1)[color_channel]);
		c+=(0.25*ctx.evalEmission(2, 1, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 7 ) += c;
	}
	// row=8 l=2 m=2 --------------------------
	ctx.coeff_A( 8, vi+V3i(0, 0, 0), 15 ) += (0.462910049886*h_inv[0]);
	ctx.coeff_A( 8, vi+V3i(1, 0, 0), 15 ) += -(0.462910049886*h_inv[0]);
	ctx.coeff_A( 8, vi+V3i(0, 0, 0), 3 ) += (0.4472135955*h_inv[0]);
	ctx.coeff_A( 8, vi+V3i(1, 0, 0), 3 ) += -(0.4472135955*h_inv[0]);
	ctx.coeff_A( 8, vi+V3i(0, 0, 0), 13 ) += -(0.119522860933*h_inv[0]);
	ctx.coeff_A( 8, vi+V3i(1, 0, 0), 13 ) += (0.119522860933*h_inv[0]);
	ctx.coeff_A( 8, vi+V3i(0, 0, 0), 9 ) += (0.462910049886*h_inv[1]);
	ctx.coeff_A( 8, vi+V3i(0, 1, 0), 9 ) += -(0.462910049886*h_inv[1]);
	ctx.coeff_A( 8, vi+V3i(0, 0, 0), 1 ) += -(0.4472135955*h_inv[1]);
	ctx.coeff_A( 8, vi+V3i(0, 1, 0), 1 ) += (0.4472135955*h_inv[1]);
	ctx.coeff_A( 8, vi+V3i(0, 0, 0), 11 ) += (0.119522860933*h_inv[1]);
	ctx.coeff_A( 8, vi+V3i(0, 1, 0), 11 ) += -(0.119522860933*h_inv[1]);
	ctx.coeff_A( 8, vi+V3i(0, 0, 0), 14 ) += -(0.436435780472*h_inv[2]);
	ctx.coeff_A( 8, vi+V3i(0, 0, 1), 14 ) += (0.436435780472*h_inv[2]);
	{
		double c = 0.0;
		c+=ctx.evalExtinction(0, 0, 0)[color_channel];
		c+=-(1.58533091904*ctx.evalScattering(0, 0, 0)[color_channel]*ctx.evalPhase(2, 0, 0, 0, 0)[color_channel]);
		ctx.coeff_A( 8, vi+V3i(0, 0, 0), 8 ) += c;
	}
	{
		double c = 0.0;
		c+=ctx.evalEmission(2, 2, 0, 0, 0)[color_channel];
		ctx.coeff_b( 8 ) += c;
	}
	// row=9 l=3 m=-3 --------------------------
	ctx.coeff_A( 9, vi+V3i(0, -1, 0), 24 ) += -(0.471404520791*h_inv[1]);
	ctx.coeff_A( 9, vi+V3i(0, 0, 0), 24 ) += (0.471404520791*h_inv[1]);
	ctx.coeff_A( 9, vi+V3i(0, -1, 0), 8 ) += (0.462910049886*h_inv[1]);
	ctx.coeff_A( 9, vi+V3i(0, 0, 0), 8 ) += -(0.462910049886*h_inv[1]);
	ctx.coeff_A( 9, vi+V3i(0, -1, 0), 22 ) += -(0.0890870806375*h_inv[1]);
	ctx.coeff_A( 9, vi+V3i(0, 0, 0), 22 ) += (0.0890870806375*h_inv[1]);
	ctx.coeff_A( 9, vi+V3i(0, 0, 0), 4 ) += (0.462910049886*h_inv[0]);
	ctx.coeff_A( 9, vi+V3i(1, 0, 0), 4 ) += -(0.462910049886*h_inv[0]);
	ctx.coeff_A( 9, vi+V3i(0, 0, 0), 18 ) += -(0.0890870806375*h_inv[0]);
	ctx.coeff_A( 9, vi+V3i(1, 0, 0), 18 ) += (0.0890870806375*h_inv[0]);
	ctx.coeff_A( 9, vi+V3i(0, 0, 0), 16 ) += (0.471404520791*h_inv[0]);
	ctx.coeff_A( 9, vi+V3i(1, 0, 0), 16 ) += -(0.471404520791*h_inv[0]);
	ctx.coeff_A( 9, vi+V3i(0, 0, 0), 17 ) += -(0.402015126104*h_inv[2]);
	ctx.coeff_A( 9, vi+V3i(0, 0, 1), 17 ) += (0.402015126104*h_inv[2]);
	{
		double c = 0.0;
		c+=(0.5*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(0.5*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.334962292845*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.334962292845*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.334962292845*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.334962292845*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 9, vi+V3i(0, 0, 0), 9 ) += c;
	}
	{
		double c = 0.0;
		c+=(0.5*ctx.evalEmission(3, -3, 0, -1, 0)[color_channel]);
		c+=(0.5*ctx.evalEmission(3, -3, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 9 ) += c;
	}
	// row=10 l=3 m=-2 --------------------------
	ctx.coeff_A( 10, vi+V3i(0, -1, 0), 23 ) += -(0.408248290464*h_inv[1]);
	ctx.coeff_A( 10, vi+V3i(0, 0, 0), 23 ) += (0.408248290464*h_inv[1]);
	ctx.coeff_A( 10, vi+V3i(0, -1, 0), 7 ) += (0.377964473009*h_inv[1]);
	ctx.coeff_A( 10, vi+V3i(0, 0, 0), 7 ) += -(0.377964473009*h_inv[1]);
	ctx.coeff_A( 10, vi+V3i(0, -1, 0), 21 ) += -(0.154303349962*h_inv[1]);
	ctx.coeff_A( 10, vi+V3i(0, 0, 0), 21 ) += (0.154303349962*h_inv[1]);
	ctx.coeff_A( 10, vi+V3i(-1, 0, 0), 5 ) += (0.377964473009*h_inv[0]);
	ctx.coeff_A( 10, vi+V3i(0, 0, 0), 5 ) += -(0.377964473009*h_inv[0]);
	ctx.coeff_A( 10, vi+V3i(-1, 0, 0), 19 ) += -(0.154303349962*h_inv[0]);
	ctx.coeff_A( 10, vi+V3i(0, 0, 0), 19 ) += (0.154303349962*h_inv[0]);
	ctx.coeff_A( 10, vi+V3i(-1, 0, 0), 17 ) += (0.408248290464*h_inv[0]);
	ctx.coeff_A( 10, vi+V3i(0, 0, 0), 17 ) += -(0.408248290464*h_inv[0]);
	ctx.coeff_A( 10, vi+V3i(0, 0, -1), 4 ) += -(0.377964473009*h_inv[2]);
	ctx.coeff_A( 10, vi+V3i(0, 0, 0), 4 ) += (0.377964473009*h_inv[2]);
	ctx.coeff_A( 10, vi+V3i(0, 0, -1), 18 ) += -(0.460566186472*h_inv[2]);
	ctx.coeff_A( 10, vi+V3i(0, 0, 0), 18 ) += (0.460566186472*h_inv[2]);
	{
		double c = 0.0;
		c+=(0.125*ctx.evalExtinction(-1, -1, -1)[color_channel]);
		c+=(0.125*ctx.evalExtinction(-1, -1, 0)[color_channel]);
		c+=(0.125*ctx.evalExtinction(-1, 0, -1)[color_channel]);
		c+=(0.125*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(0.125*ctx.evalExtinction(0, -1, -1)[color_channel]);
		c+=(0.125*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(0.125*ctx.evalExtinction(0, 0, -1)[color_channel]);
		c+=(0.125*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, -1, -1, -1)[color_channel]*ctx.evalScattering(-1, -1, -1)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, -1)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(-1, -1, -1)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, -1)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(-1, -1, -1)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, -1)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(-1, -1, -1)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, -1)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, -1, -1, -1)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, -1, -1, -1)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, -1, -1, -1)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, -1, -1, -1)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, -1, -1, -1)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, -1, -1, -1)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, -1, -1, -1)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0209351433028*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 10, vi+V3i(0, 0, 0), 10 ) += c;
	}
	{
		double c = 0.0;
		c+=(0.125*ctx.evalEmission(3, -2, -1, -1, -1)[color_channel]);
		c+=(0.125*ctx.evalEmission(3, -2, -1, -1, 0)[color_channel]);
		c+=(0.125*ctx.evalEmission(3, -2, -1, 0, -1)[color_channel]);
		c+=(0.125*ctx.evalEmission(3, -2, -1, 0, 0)[color_channel]);
		c+=(0.125*ctx.evalEmission(3, -2, 0, -1, -1)[color_channel]);
		c+=(0.125*ctx.evalEmission(3, -2, 0, -1, 0)[color_channel]);
		c+=(0.125*ctx.evalEmission(3, -2, 0, 0, -1)[color_channel]);
		c+=(0.125*ctx.evalEmission(3, -2, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 10 ) += c;
	}
	// row=11 l=3 m=-1 --------------------------
	ctx.coeff_A( 11, vi+V3i(0, -1, 0), 8 ) += (0.119522860933*h_inv[1]);
	ctx.coeff_A( 11, vi+V3i(0, 0, 0), 8 ) += -(0.119522860933*h_inv[1]);
	ctx.coeff_A( 11, vi+V3i(0, -1, 0), 22 ) += -(0.345032779671*h_inv[1]);
	ctx.coeff_A( 11, vi+V3i(0, 0, 0), 22 ) += (0.345032779671*h_inv[1]);
	ctx.coeff_A( 11, vi+V3i(0, -1, 0), 6 ) += (0.414039335605*h_inv[1]);
	ctx.coeff_A( 11, vi+V3i(0, 0, 0), 6 ) += -(0.414039335605*h_inv[1]);
	ctx.coeff_A( 11, vi+V3i(0, -1, 0), 20 ) += -(0.308606699924*h_inv[1]);
	ctx.coeff_A( 11, vi+V3i(0, 0, 0), 20 ) += (0.308606699924*h_inv[1]);
	ctx.coeff_A( 11, vi+V3i(0, 0, 0), 4 ) += -(0.119522860933*h_inv[0]);
	ctx.coeff_A( 11, vi+V3i(1, 0, 0), 4 ) += (0.119522860933*h_inv[0]);
	ctx.coeff_A( 11, vi+V3i(0, 0, 0), 18 ) += (0.345032779671*h_inv[0]);
	ctx.coeff_A( 11, vi+V3i(1, 0, 0), 18 ) += -(0.345032779671*h_inv[0]);
	ctx.coeff_A( 11, vi+V3i(0, 0, 0), 5 ) += -(0.478091443734*h_inv[2]);
	ctx.coeff_A( 11, vi+V3i(0, 0, 1), 5 ) += (0.478091443734*h_inv[2]);
	ctx.coeff_A( 11, vi+V3i(0, 0, 0), 19 ) += -(0.492365963917*h_inv[2]);
	ctx.coeff_A( 11, vi+V3i(0, 0, 1), 19 ) += (0.492365963917*h_inv[2]);
	{
		double c = 0.0;
		c+=(0.5*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(0.5*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.334962292845*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.334962292845*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.334962292845*ctx.evalPhase(3, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.334962292845*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 11, vi+V3i(0, 0, 0), 11 ) += c;
	}
	{
		double c = 0.0;
		c+=(0.5*ctx.evalEmission(3, -1, 0, -1, 0)[color_channel]);
		c+=(0.5*ctx.evalEmission(3, -1, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 11 ) += c;
	}
	// row=12 l=3 m=0 --------------------------
	ctx.coeff_A( 12, vi+V3i(0, 0, 0), 7 ) += -(0.292770021885*h_inv[0]);
	ctx.coeff_A( 12, vi+V3i(1, 0, 0), 7 ) += (0.292770021885*h_inv[0]);
	ctx.coeff_A( 12, vi+V3i(0, 0, 0), 21 ) += (0.398409536445*h_inv[0]);
	ctx.coeff_A( 12, vi+V3i(1, 0, 0), 21 ) += -(0.398409536445*h_inv[0]);
	ctx.coeff_A( 12, vi+V3i(0, 0, 0), 5 ) += -(0.292770021885*h_inv[1]);
	ctx.coeff_A( 12, vi+V3i(0, 1, 0), 5 ) += (0.292770021885*h_inv[1]);
	ctx.coeff_A( 12, vi+V3i(0, 0, 0), 19 ) += (0.398409536445*h_inv[1]);
	ctx.coeff_A( 12, vi+V3i(0, 1, 0), 19 ) += -(0.398409536445*h_inv[1]);
	ctx.coeff_A( 12, vi+V3i(0, 0, -1), 6 ) += -(0.3585685828*h_inv[2]);
	ctx.coeff_A( 12, vi+V3i(0, 0, 0), 6 ) += (0.3585685828*h_inv[2]);
	ctx.coeff_A( 12, vi+V3i(0, 0, -1), 20 ) += -(0.355334527259*h_inv[2]);
	ctx.coeff_A( 12, vi+V3i(0, 0, 0), 20 ) += (0.355334527259*h_inv[2]);
	{
		double c = 0.0;
		c+=(0.5*ctx.evalExtinction(0, 0, -1)[color_channel]);
		c+=(0.5*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.334962292845*ctx.evalPhase(3, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.334962292845*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.334962292845*ctx.evalPhase(3, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.334962292845*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 12, vi+V3i(0, 0, 0), 12 ) += c;
	}
	{
		double c = 0.0;
		c+=(0.5*ctx.evalEmission(3, 0, 0, 0, -1)[color_channel]);
		c+=(0.5*ctx.evalEmission(3, 0, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 12 ) += c;
	}
	// row=13 l=3 m=1 --------------------------
	ctx.coeff_A( 13, vi+V3i(-1, 0, 0), 8 ) += -(0.119522860933*h_inv[0]);
	ctx.coeff_A( 13, vi+V3i(0, 0, 0), 8 ) += (0.119522860933*h_inv[0]);
	ctx.coeff_A( 13, vi+V3i(-1, 0, 0), 22 ) += (0.345032779671*h_inv[0]);
	ctx.coeff_A( 13, vi+V3i(0, 0, 0), 22 ) += -(0.345032779671*h_inv[0]);
	ctx.coeff_A( 13, vi+V3i(-1, 0, 0), 6 ) += (0.414039335605*h_inv[0]);
	ctx.coeff_A( 13, vi+V3i(0, 0, 0), 6 ) += -(0.414039335605*h_inv[0]);
	ctx.coeff_A( 13, vi+V3i(-1, 0, 0), 20 ) += -(0.308606699924*h_inv[0]);
	ctx.coeff_A( 13, vi+V3i(0, 0, 0), 20 ) += (0.308606699924*h_inv[0]);
	ctx.coeff_A( 13, vi+V3i(0, 0, 0), 4 ) += -(0.119522860933*h_inv[1]);
	ctx.coeff_A( 13, vi+V3i(0, 1, 0), 4 ) += (0.119522860933*h_inv[1]);
	ctx.coeff_A( 13, vi+V3i(0, 0, 0), 18 ) += (0.345032779671*h_inv[1]);
	ctx.coeff_A( 13, vi+V3i(0, 1, 0), 18 ) += -(0.345032779671*h_inv[1]);
	ctx.coeff_A( 13, vi+V3i(-1, 0, 0), 5 ) += -(0.119522860933*h_inv[2]);
	ctx.coeff_A( 13, vi+V3i(-1, 1, 0), 5 ) += -(0.119522860933*h_inv[2]);
	ctx.coeff_A( 13, vi+V3i(0, 0, 0), 5 ) += -(0.119522860933*h_inv[2]);
	ctx.coeff_A( 13, vi+V3i(0, 1, 0), 5 ) += -(0.119522860933*h_inv[2]);
	ctx.coeff_A( 13, vi+V3i(-1, 0, 1), 5 ) += (0.119522860933*h_inv[2]);
	ctx.coeff_A( 13, vi+V3i(-1, 1, 1), 5 ) += (0.119522860933*h_inv[2]);
	ctx.coeff_A( 13, vi+V3i(0, 0, 1), 5 ) += (0.119522860933*h_inv[2]);
	ctx.coeff_A( 13, vi+V3i(0, 1, 1), 5 ) += (0.119522860933*h_inv[2]);
	ctx.coeff_A( 13, vi+V3i(0, 0, 0), 21 ) += -(0.492365963917*h_inv[2]);
	ctx.coeff_A( 13, vi+V3i(0, 0, 1), 21 ) += (0.492365963917*h_inv[2]);
	{
		double c = 0.0;
		c+=(0.5*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(0.5*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.334962292845*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.334962292845*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.334962292845*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.334962292845*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 13, vi+V3i(0, 0, 0), 13 ) += c;
	}
	{
		double c = 0.0;
		c+=(0.5*ctx.evalEmission(3, 1, -1, 0, 0)[color_channel]);
		c+=(0.5*ctx.evalEmission(3, 1, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 13 ) += c;
	}
	// row=14 l=3 m=2 --------------------------
	ctx.coeff_A( 14, vi+V3i(0, 0, 0), 23 ) += (0.408248290464*h_inv[0]);
	ctx.coeff_A( 14, vi+V3i(1, 0, 0), 23 ) += -(0.408248290464*h_inv[0]);
	ctx.coeff_A( 14, vi+V3i(0, 0, 0), 7 ) += (0.377964473009*h_inv[0]);
	ctx.coeff_A( 14, vi+V3i(1, 0, 0), 7 ) += -(0.377964473009*h_inv[0]);
	ctx.coeff_A( 14, vi+V3i(0, 0, 0), 21 ) += -(0.154303349962*h_inv[0]);
	ctx.coeff_A( 14, vi+V3i(1, 0, 0), 21 ) += (0.154303349962*h_inv[0]);
	ctx.coeff_A( 14, vi+V3i(0, 0, 0), 17 ) += (0.408248290464*h_inv[1]);
	ctx.coeff_A( 14, vi+V3i(0, 1, 0), 17 ) += -(0.408248290464*h_inv[1]);
	ctx.coeff_A( 14, vi+V3i(0, 0, 0), 5 ) += -(0.377964473009*h_inv[1]);
	ctx.coeff_A( 14, vi+V3i(0, 1, 0), 5 ) += (0.377964473009*h_inv[1]);
	ctx.coeff_A( 14, vi+V3i(0, 0, 0), 19 ) += (0.154303349962*h_inv[1]);
	ctx.coeff_A( 14, vi+V3i(0, 1, 0), 19 ) += -(0.154303349962*h_inv[1]);
	ctx.coeff_A( 14, vi+V3i(0, 0, -1), 4 ) += -(0.0944911182523*h_inv[2]);
	ctx.coeff_A( 14, vi+V3i(0, 1, -1), 4 ) += -(0.0944911182523*h_inv[2]);
	ctx.coeff_A( 14, vi+V3i(1, 0, -1), 4 ) += -(0.0944911182523*h_inv[2]);
	ctx.coeff_A( 14, vi+V3i(1, 1, -1), 4 ) += -(0.0944911182523*h_inv[2]);
	ctx.coeff_A( 14, vi+V3i(0, 0, 0), 4 ) += (0.0944911182523*h_inv[2]);
	ctx.coeff_A( 14, vi+V3i(0, 1, 0), 4 ) += (0.0944911182523*h_inv[2]);
	ctx.coeff_A( 14, vi+V3i(1, 0, 0), 4 ) += (0.0944911182523*h_inv[2]);
	ctx.coeff_A( 14, vi+V3i(1, 1, 0), 4 ) += (0.0944911182523*h_inv[2]);
	ctx.coeff_A( 14, vi+V3i(0, 0, -1), 22 ) += -(0.460566186472*h_inv[2]);
	ctx.coeff_A( 14, vi+V3i(0, 0, 0), 22 ) += (0.460566186472*h_inv[2]);
	{
		double c = 0.0;
		c+=(0.5*ctx.evalExtinction(0, 0, -1)[color_channel]);
		c+=(0.5*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.334962292845*ctx.evalPhase(3, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.334962292845*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.334962292845*ctx.evalPhase(3, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.334962292845*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 14, vi+V3i(0, 0, 0), 14 ) += c;
	}
	{
		double c = 0.0;
		c+=(0.5*ctx.evalEmission(3, 2, 0, 0, -1)[color_channel]);
		c+=(0.5*ctx.evalEmission(3, 2, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 14 ) += c;
	}
	// row=15 l=3 m=3 --------------------------
	ctx.coeff_A( 15, vi+V3i(-1, 0, 0), 24 ) += (0.471404520791*h_inv[0]);
	ctx.coeff_A( 15, vi+V3i(0, 0, 0), 24 ) += -(0.471404520791*h_inv[0]);
	ctx.coeff_A( 15, vi+V3i(-1, 0, 0), 8 ) += (0.462910049886*h_inv[0]);
	ctx.coeff_A( 15, vi+V3i(0, 0, 0), 8 ) += -(0.462910049886*h_inv[0]);
	ctx.coeff_A( 15, vi+V3i(-1, 0, 0), 22 ) += -(0.0890870806375*h_inv[0]);
	ctx.coeff_A( 15, vi+V3i(0, 0, 0), 22 ) += (0.0890870806375*h_inv[0]);
	ctx.coeff_A( 15, vi+V3i(0, 0, 0), 16 ) += (0.471404520791*h_inv[1]);
	ctx.coeff_A( 15, vi+V3i(0, 1, 0), 16 ) += -(0.471404520791*h_inv[1]);
	ctx.coeff_A( 15, vi+V3i(0, 0, 0), 4 ) += -(0.462910049886*h_inv[1]);
	ctx.coeff_A( 15, vi+V3i(0, 1, 0), 4 ) += (0.462910049886*h_inv[1]);
	ctx.coeff_A( 15, vi+V3i(0, 0, 0), 18 ) += (0.0890870806375*h_inv[1]);
	ctx.coeff_A( 15, vi+V3i(0, 1, 0), 18 ) += -(0.0890870806375*h_inv[1]);
	ctx.coeff_A( 15, vi+V3i(0, 0, 0), 23 ) += -(0.402015126104*h_inv[2]);
	ctx.coeff_A( 15, vi+V3i(0, 0, 1), 23 ) += (0.402015126104*h_inv[2]);
	{
		double c = 0.0;
		c+=(0.5*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(0.5*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.334962292845*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.334962292845*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.334962292845*ctx.evalPhase(3, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.334962292845*ctx.evalPhase(3, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 15, vi+V3i(0, 0, 0), 15 ) += c;
	}
	{
		double c = 0.0;
		c+=(0.5*ctx.evalEmission(3, 3, -1, 0, 0)[color_channel]);
		c+=(0.5*ctx.evalEmission(3, 3, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 15 ) += c;
	}
	// row=16 l=4 m=-4 --------------------------
	ctx.coeff_A( 16, vi+V3i(0, -1, 0), 35 ) += -(0.476731294623*h_inv[1]);
	ctx.coeff_A( 16, vi+V3i(0, 0, 0), 35 ) += (0.476731294623*h_inv[1]);
	ctx.coeff_A( 16, vi+V3i(0, -1, 0), 15 ) += (0.471404520791*h_inv[1]);
	ctx.coeff_A( 16, vi+V3i(0, 0, 0), 15 ) += -(0.471404520791*h_inv[1]);
	ctx.coeff_A( 16, vi+V3i(0, -1, 0), 33 ) += -(0.0710669054519*h_inv[1]);
	ctx.coeff_A( 16, vi+V3i(0, 0, 0), 33 ) += (0.0710669054519*h_inv[1]);
	ctx.coeff_A( 16, vi+V3i(-1, 0, 0), 9 ) += (0.471404520791*h_inv[0]);
	ctx.coeff_A( 16, vi+V3i(0, 0, 0), 9 ) += -(0.471404520791*h_inv[0]);
	ctx.coeff_A( 16, vi+V3i(-1, 0, 0), 27 ) += -(0.0710669054519*h_inv[0]);
	ctx.coeff_A( 16, vi+V3i(0, 0, 0), 27 ) += (0.0710669054519*h_inv[0]);
	ctx.coeff_A( 16, vi+V3i(-1, 0, 0), 25 ) += (0.476731294623*h_inv[0]);
	ctx.coeff_A( 16, vi+V3i(0, 0, 0), 25 ) += -(0.476731294623*h_inv[0]);
	ctx.coeff_A( 16, vi+V3i(0, 0, 0), 26 ) += -(0.373978796003*h_inv[2]);
	ctx.coeff_A( 16, vi+V3i(0, 0, 1), 26 ) += (0.373978796003*h_inv[2]);
	{
		double c = 0.0;
		c+=(0.25*ctx.evalExtinction(-1, -1, 0)[color_channel]);
		c+=(0.25*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(0.25*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(0.25*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 16, vi+V3i(0, 0, 0), 16 ) += c;
	}
	{
		double c = 0.0;
		c+=(0.25*ctx.evalEmission(4, -4, -1, -1, 0)[color_channel]);
		c+=(0.25*ctx.evalEmission(4, -4, -1, 0, 0)[color_channel]);
		c+=(0.25*ctx.evalEmission(4, -4, 0, -1, 0)[color_channel]);
		c+=(0.25*ctx.evalEmission(4, -4, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 16 ) += c;
	}
	// row=17 l=4 m=-3 --------------------------
	ctx.coeff_A( 17, vi+V3i(0, -1, 0), 34 ) += -(0.426401432711*h_inv[1]);
	ctx.coeff_A( 17, vi+V3i(0, 0, 0), 34 ) += (0.426401432711*h_inv[1]);
	ctx.coeff_A( 17, vi+V3i(0, -1, 0), 14 ) += (0.408248290464*h_inv[1]);
	ctx.coeff_A( 17, vi+V3i(0, 0, 0), 14 ) += -(0.408248290464*h_inv[1]);
	ctx.coeff_A( 17, vi+V3i(0, -1, 0), 32 ) += -(0.123091490979*h_inv[1]);
	ctx.coeff_A( 17, vi+V3i(0, 0, 0), 32 ) += (0.123091490979*h_inv[1]);
	ctx.coeff_A( 17, vi+V3i(0, 0, 0), 10 ) += (0.408248290464*h_inv[0]);
	ctx.coeff_A( 17, vi+V3i(1, 0, 0), 10 ) += -(0.408248290464*h_inv[0]);
	ctx.coeff_A( 17, vi+V3i(0, 0, 0), 28 ) += -(0.123091490979*h_inv[0]);
	ctx.coeff_A( 17, vi+V3i(1, 0, 0), 28 ) += (0.123091490979*h_inv[0]);
	ctx.coeff_A( 17, vi+V3i(0, 0, 0), 26 ) += (0.426401432711*h_inv[0]);
	ctx.coeff_A( 17, vi+V3i(1, 0, 0), 26 ) += -(0.426401432711*h_inv[0]);
	ctx.coeff_A( 17, vi+V3i(0, 0, -1), 9 ) += -(0.333333333333*h_inv[2]);
	ctx.coeff_A( 17, vi+V3i(0, 0, 0), 9 ) += (0.333333333333*h_inv[2]);
	ctx.coeff_A( 17, vi+V3i(0, 0, -1), 27 ) += -(0.434524094627*h_inv[2]);
	ctx.coeff_A( 17, vi+V3i(0, 0, 0), 27 ) += (0.434524094627*h_inv[2]);
	{
		double c = 0.0;
		c+=(0.25*ctx.evalExtinction(0, -1, -1)[color_channel]);
		c+=(0.25*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(0.25*ctx.evalExtinction(0, 0, -1)[color_channel]);
		c+=(0.25*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 17, vi+V3i(0, 0, 0), 17 ) += c;
	}
	{
		double c = 0.0;
		c+=(0.25*ctx.evalEmission(4, -3, 0, -1, -1)[color_channel]);
		c+=(0.25*ctx.evalEmission(4, -3, 0, -1, 0)[color_channel]);
		c+=(0.25*ctx.evalEmission(4, -3, 0, 0, -1)[color_channel]);
		c+=(0.25*ctx.evalEmission(4, -3, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 17 ) += c;
	}
	// row=18 l=4 m=-2 --------------------------
	ctx.coeff_A( 18, vi+V3i(0, -1, 0), 15 ) += (0.0890870806375*h_inv[1]);
	ctx.coeff_A( 18, vi+V3i(0, 0, 0), 15 ) += -(0.0890870806375*h_inv[1]);
	ctx.coeff_A( 18, vi+V3i(0, -1, 0), 33 ) += -(0.376050716545*h_inv[1]);
	ctx.coeff_A( 18, vi+V3i(0, 0, 0), 33 ) += (0.376050716545*h_inv[1]);
	ctx.coeff_A( 18, vi+V3i(0, -1, 0), 13 ) += (0.345032779671*h_inv[1]);
	ctx.coeff_A( 18, vi+V3i(0, 0, 0), 13 ) += -(0.345032779671*h_inv[1]);
	ctx.coeff_A( 18, vi+V3i(0, -1, 0), 31 ) += -(0.174077655956*h_inv[1]);
	ctx.coeff_A( 18, vi+V3i(0, 0, 0), 31 ) += (0.174077655956*h_inv[1]);
	ctx.coeff_A( 18, vi+V3i(-1, 0, 0), 9 ) += -(0.0890870806375*h_inv[0]);
	ctx.coeff_A( 18, vi+V3i(0, 0, 0), 9 ) += (0.0890870806375*h_inv[0]);
	ctx.coeff_A( 18, vi+V3i(-1, 0, 0), 11 ) += (0.345032779671*h_inv[0]);
	ctx.coeff_A( 18, vi+V3i(0, 0, 0), 11 ) += -(0.345032779671*h_inv[0]);
	ctx.coeff_A( 18, vi+V3i(-1, 0, 0), 29 ) += -(0.174077655956*h_inv[0]);
	ctx.coeff_A( 18, vi+V3i(0, 0, 0), 29 ) += (0.174077655956*h_inv[0]);
	ctx.coeff_A( 18, vi+V3i(-1, 0, 0), 27 ) += (0.376050716545*h_inv[0]);
	ctx.coeff_A( 18, vi+V3i(0, 0, 0), 27 ) += -(0.376050716545*h_inv[0]);
	ctx.coeff_A( 18, vi+V3i(0, 0, 0), 10 ) += -(0.436435780472*h_inv[2]);
	ctx.coeff_A( 18, vi+V3i(0, 0, 1), 10 ) += (0.436435780472*h_inv[2]);
	ctx.coeff_A( 18, vi+V3i(0, 0, 0), 28 ) += -(0.473049916791*h_inv[2]);
	ctx.coeff_A( 18, vi+V3i(0, 0, 1), 28 ) += (0.473049916791*h_inv[2]);
	{
		double c = 0.0;
		c+=(0.25*ctx.evalExtinction(-1, -1, 0)[color_channel]);
		c+=(0.25*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(0.25*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(0.25*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 18, vi+V3i(0, 0, 0), 18 ) += c;
	}
	{
		double c = 0.0;
		c+=(0.25*ctx.evalEmission(4, -2, -1, -1, 0)[color_channel]);
		c+=(0.25*ctx.evalEmission(4, -2, -1, 0, 0)[color_channel]);
		c+=(0.25*ctx.evalEmission(4, -2, 0, -1, 0)[color_channel]);
		c+=(0.25*ctx.evalEmission(4, -2, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 18 ) += c;
	}
	// row=19 l=4 m=-1 --------------------------
	ctx.coeff_A( 19, vi+V3i(0, -1, 0), 14 ) += (0.154303349962*h_inv[1]);
	ctx.coeff_A( 19, vi+V3i(0, 0, 0), 14 ) += -(0.154303349962*h_inv[1]);
	ctx.coeff_A( 19, vi+V3i(0, -1, 0), 32 ) += -(0.325669473639*h_inv[1]);
	ctx.coeff_A( 19, vi+V3i(0, 0, 0), 32 ) += (0.325669473639*h_inv[1]);
	ctx.coeff_A( 19, vi+V3i(0, -1, 0), 12 ) += (0.398409536445*h_inv[1]);
	ctx.coeff_A( 19, vi+V3i(0, 0, 0), 12 ) += -(0.398409536445*h_inv[1]);
	ctx.coeff_A( 19, vi+V3i(0, -1, 0), 30 ) += -(0.317820863082*h_inv[1]);
	ctx.coeff_A( 19, vi+V3i(0, 0, 0), 30 ) += (0.317820863082*h_inv[1]);
	ctx.coeff_A( 19, vi+V3i(0, 0, 0), 10 ) += -(0.154303349962*h_inv[0]);
	ctx.coeff_A( 19, vi+V3i(1, 0, 0), 10 ) += (0.154303349962*h_inv[0]);
	ctx.coeff_A( 19, vi+V3i(0, 0, 0), 28 ) += (0.325669473639*h_inv[0]);
	ctx.coeff_A( 19, vi+V3i(1, 0, 0), 28 ) += -(0.325669473639*h_inv[0]);
	ctx.coeff_A( 19, vi+V3i(0, 0, -1), 11 ) += -(0.487950036474*h_inv[2]);
	ctx.coeff_A( 19, vi+V3i(0, 0, 0), 11 ) += (0.487950036474*h_inv[2]);
	ctx.coeff_A( 19, vi+V3i(0, 0, -1), 29 ) += -(0.494727444918*h_inv[2]);
	ctx.coeff_A( 19, vi+V3i(0, 0, 0), 29 ) += (0.494727444918*h_inv[2]);
	{
		double c = 0.0;
		c+=(0.25*ctx.evalExtinction(0, -1, -1)[color_channel]);
		c+=(0.25*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(0.25*ctx.evalExtinction(0, 0, -1)[color_channel]);
		c+=(0.25*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 19, vi+V3i(0, 0, 0), 19 ) += c;
	}
	{
		double c = 0.0;
		c+=(0.25*ctx.evalEmission(4, -1, 0, -1, -1)[color_channel]);
		c+=(0.25*ctx.evalEmission(4, -1, 0, -1, 0)[color_channel]);
		c+=(0.25*ctx.evalEmission(4, -1, 0, 0, -1)[color_channel]);
		c+=(0.25*ctx.evalEmission(4, -1, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 19 ) += c;
	}
	// row=20 l=4 m=0 --------------------------
	ctx.coeff_A( 20, vi+V3i(0, 0, 0), 13 ) += -(0.308606699924*h_inv[0]);
	ctx.coeff_A( 20, vi+V3i(1, 0, 0), 13 ) += (0.308606699924*h_inv[0]);
	ctx.coeff_A( 20, vi+V3i(0, 0, 0), 31 ) += (0.389249472081*h_inv[0]);
	ctx.coeff_A( 20, vi+V3i(1, 0, 0), 31 ) += -(0.389249472081*h_inv[0]);
	ctx.coeff_A( 20, vi+V3i(0, 0, 0), 11 ) += -(0.308606699924*h_inv[1]);
	ctx.coeff_A( 20, vi+V3i(0, 1, 0), 11 ) += (0.308606699924*h_inv[1]);
	ctx.coeff_A( 20, vi+V3i(0, 0, 0), 29 ) += (0.389249472081*h_inv[1]);
	ctx.coeff_A( 20, vi+V3i(0, 1, 0), 29 ) += -(0.389249472081*h_inv[1]);
	ctx.coeff_A( 20, vi+V3i(0, 0, 0), 12 ) += -(0.35634832255*h_inv[2]);
	ctx.coeff_A( 20, vi+V3i(0, 0, 1), 12 ) += (0.35634832255*h_inv[2]);
	ctx.coeff_A( 20, vi+V3i(0, 0, 0), 30 ) += -(0.354787437593*h_inv[2]);
	ctx.coeff_A( 20, vi+V3i(0, 0, 1), 30 ) += (0.354787437593*h_inv[2]);
	{
		double c = 0.0;
		c+=ctx.evalExtinction(0, 0, 0)[color_channel];
		c+=-(1.1816359006*ctx.evalScattering(0, 0, 0)[color_channel]*ctx.evalPhase(4, 0, 0, 0, 0)[color_channel]);
		ctx.coeff_A( 20, vi+V3i(0, 0, 0), 20 ) += c;
	}
	{
		double c = 0.0;
		c+=ctx.evalEmission(4, 0, 0, 0, 0)[color_channel];
		ctx.coeff_b( 20 ) += c;
	}
	// row=21 l=4 m=1 --------------------------
	ctx.coeff_A( 21, vi+V3i(-1, 0, 0), 14 ) += -(0.154303349962*h_inv[0]);
	ctx.coeff_A( 21, vi+V3i(0, 0, 0), 14 ) += (0.154303349962*h_inv[0]);
	ctx.coeff_A( 21, vi+V3i(-1, 0, 0), 32 ) += (0.325669473639*h_inv[0]);
	ctx.coeff_A( 21, vi+V3i(0, 0, 0), 32 ) += -(0.325669473639*h_inv[0]);
	ctx.coeff_A( 21, vi+V3i(-1, 0, 0), 12 ) += (0.398409536445*h_inv[0]);
	ctx.coeff_A( 21, vi+V3i(0, 0, 0), 12 ) += -(0.398409536445*h_inv[0]);
	ctx.coeff_A( 21, vi+V3i(-1, 0, 0), 30 ) += -(0.317820863082*h_inv[0]);
	ctx.coeff_A( 21, vi+V3i(0, 0, 0), 30 ) += (0.317820863082*h_inv[0]);
	ctx.coeff_A( 21, vi+V3i(0, 0, 0), 10 ) += -(0.154303349962*h_inv[1]);
	ctx.coeff_A( 21, vi+V3i(0, 1, 0), 10 ) += (0.154303349962*h_inv[1]);
	ctx.coeff_A( 21, vi+V3i(0, 0, 0), 28 ) += (0.325669473639*h_inv[1]);
	ctx.coeff_A( 21, vi+V3i(0, 1, 0), 28 ) += -(0.325669473639*h_inv[1]);
	ctx.coeff_A( 21, vi+V3i(-1, 0, -1), 11 ) += -(0.121987509119*h_inv[2]);
	ctx.coeff_A( 21, vi+V3i(-1, 1, -1), 11 ) += -(0.121987509119*h_inv[2]);
	ctx.coeff_A( 21, vi+V3i(0, 0, -1), 11 ) += -(0.121987509119*h_inv[2]);
	ctx.coeff_A( 21, vi+V3i(0, 1, -1), 11 ) += -(0.121987509119*h_inv[2]);
	ctx.coeff_A( 21, vi+V3i(-1, 0, 0), 11 ) += (0.121987509119*h_inv[2]);
	ctx.coeff_A( 21, vi+V3i(-1, 1, 0), 11 ) += (0.121987509119*h_inv[2]);
	ctx.coeff_A( 21, vi+V3i(0, 0, 0), 11 ) += (0.121987509119*h_inv[2]);
	ctx.coeff_A( 21, vi+V3i(0, 1, 0), 11 ) += (0.121987509119*h_inv[2]);
	ctx.coeff_A( 21, vi+V3i(0, 0, -1), 31 ) += -(0.494727444918*h_inv[2]);
	ctx.coeff_A( 21, vi+V3i(0, 0, 0), 31 ) += (0.494727444918*h_inv[2]);
	{
		double c = 0.0;
		c+=(0.25*ctx.evalExtinction(-1, 0, -1)[color_channel]);
		c+=(0.25*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(0.25*ctx.evalExtinction(0, 0, -1)[color_channel]);
		c+=(0.25*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 21, vi+V3i(0, 0, 0), 21 ) += c;
	}
	{
		double c = 0.0;
		c+=(0.25*ctx.evalEmission(4, 1, -1, 0, -1)[color_channel]);
		c+=(0.25*ctx.evalEmission(4, 1, -1, 0, 0)[color_channel]);
		c+=(0.25*ctx.evalEmission(4, 1, 0, 0, -1)[color_channel]);
		c+=(0.25*ctx.evalEmission(4, 1, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 21 ) += c;
	}
	// row=22 l=4 m=2 --------------------------
	ctx.coeff_A( 22, vi+V3i(0, 0, 0), 15 ) += -(0.0890870806375*h_inv[0]);
	ctx.coeff_A( 22, vi+V3i(1, 0, 0), 15 ) += (0.0890870806375*h_inv[0]);
	ctx.coeff_A( 22, vi+V3i(0, 0, 0), 33 ) += (0.376050716545*h_inv[0]);
	ctx.coeff_A( 22, vi+V3i(1, 0, 0), 33 ) += -(0.376050716545*h_inv[0]);
	ctx.coeff_A( 22, vi+V3i(0, 0, 0), 13 ) += (0.345032779671*h_inv[0]);
	ctx.coeff_A( 22, vi+V3i(1, 0, 0), 13 ) += -(0.345032779671*h_inv[0]);
	ctx.coeff_A( 22, vi+V3i(0, 0, 0), 31 ) += -(0.174077655956*h_inv[0]);
	ctx.coeff_A( 22, vi+V3i(1, 0, 0), 31 ) += (0.174077655956*h_inv[0]);
	ctx.coeff_A( 22, vi+V3i(0, 0, 0), 9 ) += -(0.0890870806375*h_inv[1]);
	ctx.coeff_A( 22, vi+V3i(0, 1, 0), 9 ) += (0.0890870806375*h_inv[1]);
	ctx.coeff_A( 22, vi+V3i(0, 0, 0), 27 ) += (0.376050716545*h_inv[1]);
	ctx.coeff_A( 22, vi+V3i(0, 1, 0), 27 ) += -(0.376050716545*h_inv[1]);
	ctx.coeff_A( 22, vi+V3i(0, 0, 0), 11 ) += -(0.345032779671*h_inv[1]);
	ctx.coeff_A( 22, vi+V3i(0, 1, 0), 11 ) += (0.345032779671*h_inv[1]);
	ctx.coeff_A( 22, vi+V3i(0, 0, 0), 29 ) += (0.174077655956*h_inv[1]);
	ctx.coeff_A( 22, vi+V3i(0, 1, 0), 29 ) += -(0.174077655956*h_inv[1]);
	ctx.coeff_A( 22, vi+V3i(0, 0, 0), 10 ) += -(0.109108945118*h_inv[2]);
	ctx.coeff_A( 22, vi+V3i(0, 1, 0), 10 ) += -(0.109108945118*h_inv[2]);
	ctx.coeff_A( 22, vi+V3i(1, 0, 0), 10 ) += -(0.109108945118*h_inv[2]);
	ctx.coeff_A( 22, vi+V3i(1, 1, 0), 10 ) += -(0.109108945118*h_inv[2]);
	ctx.coeff_A( 22, vi+V3i(0, 0, 1), 10 ) += (0.109108945118*h_inv[2]);
	ctx.coeff_A( 22, vi+V3i(0, 1, 1), 10 ) += (0.109108945118*h_inv[2]);
	ctx.coeff_A( 22, vi+V3i(1, 0, 1), 10 ) += (0.109108945118*h_inv[2]);
	ctx.coeff_A( 22, vi+V3i(1, 1, 1), 10 ) += (0.109108945118*h_inv[2]);
	ctx.coeff_A( 22, vi+V3i(0, 0, 0), 32 ) += -(0.473049916791*h_inv[2]);
	ctx.coeff_A( 22, vi+V3i(0, 0, 1), 32 ) += (0.473049916791*h_inv[2]);
	{
		double c = 0.0;
		c+=ctx.evalExtinction(0, 0, 0)[color_channel];
		c+=-(1.1816359006*ctx.evalScattering(0, 0, 0)[color_channel]*ctx.evalPhase(4, 0, 0, 0, 0)[color_channel]);
		ctx.coeff_A( 22, vi+V3i(0, 0, 0), 22 ) += c;
	}
	{
		double c = 0.0;
		c+=ctx.evalEmission(4, 2, 0, 0, 0)[color_channel];
		ctx.coeff_b( 22 ) += c;
	}
	// row=23 l=4 m=3 --------------------------
	ctx.coeff_A( 23, vi+V3i(-1, 0, 0), 34 ) += (0.426401432711*h_inv[0]);
	ctx.coeff_A( 23, vi+V3i(0, 0, 0), 34 ) += -(0.426401432711*h_inv[0]);
	ctx.coeff_A( 23, vi+V3i(-1, 0, 0), 14 ) += (0.408248290464*h_inv[0]);
	ctx.coeff_A( 23, vi+V3i(0, 0, 0), 14 ) += -(0.408248290464*h_inv[0]);
	ctx.coeff_A( 23, vi+V3i(-1, 0, 0), 32 ) += -(0.123091490979*h_inv[0]);
	ctx.coeff_A( 23, vi+V3i(0, 0, 0), 32 ) += (0.123091490979*h_inv[0]);
	ctx.coeff_A( 23, vi+V3i(0, 0, 0), 26 ) += (0.426401432711*h_inv[1]);
	ctx.coeff_A( 23, vi+V3i(0, 1, 0), 26 ) += -(0.426401432711*h_inv[1]);
	ctx.coeff_A( 23, vi+V3i(0, 0, 0), 10 ) += -(0.408248290464*h_inv[1]);
	ctx.coeff_A( 23, vi+V3i(0, 1, 0), 10 ) += (0.408248290464*h_inv[1]);
	ctx.coeff_A( 23, vi+V3i(0, 0, 0), 28 ) += (0.123091490979*h_inv[1]);
	ctx.coeff_A( 23, vi+V3i(0, 1, 0), 28 ) += -(0.123091490979*h_inv[1]);
	ctx.coeff_A( 23, vi+V3i(-1, 0, -1), 9 ) += -(0.0833333333333*h_inv[2]);
	ctx.coeff_A( 23, vi+V3i(-1, 1, -1), 9 ) += -(0.0833333333333*h_inv[2]);
	ctx.coeff_A( 23, vi+V3i(0, 0, -1), 9 ) += -(0.0833333333333*h_inv[2]);
	ctx.coeff_A( 23, vi+V3i(0, 1, -1), 9 ) += -(0.0833333333333*h_inv[2]);
	ctx.coeff_A( 23, vi+V3i(-1, 0, 0), 9 ) += (0.0833333333333*h_inv[2]);
	ctx.coeff_A( 23, vi+V3i(-1, 1, 0), 9 ) += (0.0833333333333*h_inv[2]);
	ctx.coeff_A( 23, vi+V3i(0, 0, 0), 9 ) += (0.0833333333333*h_inv[2]);
	ctx.coeff_A( 23, vi+V3i(0, 1, 0), 9 ) += (0.0833333333333*h_inv[2]);
	ctx.coeff_A( 23, vi+V3i(0, 0, -1), 33 ) += -(0.434524094627*h_inv[2]);
	ctx.coeff_A( 23, vi+V3i(0, 0, 0), 33 ) += (0.434524094627*h_inv[2]);
	{
		double c = 0.0;
		c+=(0.25*ctx.evalExtinction(-1, 0, -1)[color_channel]);
		c+=(0.25*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(0.25*ctx.evalExtinction(0, 0, -1)[color_channel]);
		c+=(0.25*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0738522437877*ctx.evalPhase(4, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 23, vi+V3i(0, 0, 0), 23 ) += c;
	}
	{
		double c = 0.0;
		c+=(0.25*ctx.evalEmission(4, 3, -1, 0, -1)[color_channel]);
		c+=(0.25*ctx.evalEmission(4, 3, -1, 0, 0)[color_channel]);
		c+=(0.25*ctx.evalEmission(4, 3, 0, 0, -1)[color_channel]);
		c+=(0.25*ctx.evalEmission(4, 3, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 23 ) += c;
	}
	// row=24 l=4 m=4 --------------------------
	ctx.coeff_A( 24, vi+V3i(0, 0, 0), 35 ) += (0.476731294623*h_inv[0]);
	ctx.coeff_A( 24, vi+V3i(1, 0, 0), 35 ) += -(0.476731294623*h_inv[0]);
	ctx.coeff_A( 24, vi+V3i(0, 0, 0), 15 ) += (0.471404520791*h_inv[0]);
	ctx.coeff_A( 24, vi+V3i(1, 0, 0), 15 ) += -(0.471404520791*h_inv[0]);
	ctx.coeff_A( 24, vi+V3i(0, 0, 0), 33 ) += -(0.0710669054519*h_inv[0]);
	ctx.coeff_A( 24, vi+V3i(1, 0, 0), 33 ) += (0.0710669054519*h_inv[0]);
	ctx.coeff_A( 24, vi+V3i(0, 0, 0), 25 ) += (0.476731294623*h_inv[1]);
	ctx.coeff_A( 24, vi+V3i(0, 1, 0), 25 ) += -(0.476731294623*h_inv[1]);
	ctx.coeff_A( 24, vi+V3i(0, 0, 0), 9 ) += -(0.471404520791*h_inv[1]);
	ctx.coeff_A( 24, vi+V3i(0, 1, 0), 9 ) += (0.471404520791*h_inv[1]);
	ctx.coeff_A( 24, vi+V3i(0, 0, 0), 27 ) += (0.0710669054519*h_inv[1]);
	ctx.coeff_A( 24, vi+V3i(0, 1, 0), 27 ) += -(0.0710669054519*h_inv[1]);
	ctx.coeff_A( 24, vi+V3i(0, 0, 0), 34 ) += -(0.373978796003*h_inv[2]);
	ctx.coeff_A( 24, vi+V3i(0, 0, 1), 34 ) += (0.373978796003*h_inv[2]);
	{
		double c = 0.0;
		c+=ctx.evalExtinction(0, 0, 0)[color_channel];
		c+=-(1.1816359006*ctx.evalScattering(0, 0, 0)[color_channel]*ctx.evalPhase(4, 0, 0, 0, 0)[color_channel]);
		ctx.coeff_A( 24, vi+V3i(0, 0, 0), 24 ) += c;
	}
	{
		double c = 0.0;
		c+=ctx.evalEmission(4, 4, 0, 0, 0)[color_channel];
		ctx.coeff_b( 24 ) += c;
	}
	// row=25 l=5 m=-5 --------------------------
	ctx.coeff_A( 25, vi+V3i(0, -1, 0), 24 ) += (0.476731294623*h_inv[1]);
	ctx.coeff_A( 25, vi+V3i(0, 0, 0), 24 ) += -(0.476731294623*h_inv[1]);
	ctx.coeff_A( 25, vi+V3i(0, 0, 0), 16 ) += (0.476731294623*h_inv[0]);
	ctx.coeff_A( 25, vi+V3i(1, 0, 0), 16 ) += -(0.476731294623*h_inv[0]);
	{
		double c = 0.0;
		c+=(0.5*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(0.5*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 25, vi+V3i(0, 0, 0), 25 ) += c;
	}
	{
		double c = 0.0;
		c+=(0.5*ctx.evalEmission(5, -5, 0, -1, 0)[color_channel]);
		c+=(0.5*ctx.evalEmission(5, -5, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 25 ) += c;
	}
	// row=26 l=5 m=-4 --------------------------
	ctx.coeff_A( 26, vi+V3i(0, -1, 0), 23 ) += (0.426401432711*h_inv[1]);
	ctx.coeff_A( 26, vi+V3i(0, 0, 0), 23 ) += -(0.426401432711*h_inv[1]);
	ctx.coeff_A( 26, vi+V3i(-1, 0, 0), 17 ) += (0.426401432711*h_inv[0]);
	ctx.coeff_A( 26, vi+V3i(0, 0, 0), 17 ) += -(0.426401432711*h_inv[0]);
	ctx.coeff_A( 26, vi+V3i(0, 0, -1), 16 ) += -(0.301511344578*h_inv[2]);
	ctx.coeff_A( 26, vi+V3i(0, 0, 0), 16 ) += (0.301511344578*h_inv[2]);
	{
		double c = 0.0;
		c+=(0.125*ctx.evalExtinction(-1, -1, -1)[color_channel]);
		c+=(0.125*ctx.evalExtinction(-1, -1, 0)[color_channel]);
		c+=(0.125*ctx.evalExtinction(-1, 0, -1)[color_channel]);
		c+=(0.125*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(0.125*ctx.evalExtinction(0, -1, -1)[color_channel]);
		c+=(0.125*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(0.125*ctx.evalExtinction(0, 0, -1)[color_channel]);
		c+=(0.125*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, -1, -1)[color_channel]*ctx.evalScattering(-1, -1, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(-1, -1, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(-1, -1, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(-1, -1, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, -1, -1)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, -1, -1)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, -1, -1)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, -1, -1)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, -1, -1)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, -1, -1)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, -1, -1)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 26, vi+V3i(0, 0, 0), 26 ) += c;
	}
	{
		double c = 0.0;
		c+=(0.125*ctx.evalEmission(5, -4, -1, -1, -1)[color_channel]);
		c+=(0.125*ctx.evalEmission(5, -4, -1, -1, 0)[color_channel]);
		c+=(0.125*ctx.evalEmission(5, -4, -1, 0, -1)[color_channel]);
		c+=(0.125*ctx.evalEmission(5, -4, -1, 0, 0)[color_channel]);
		c+=(0.125*ctx.evalEmission(5, -4, 0, -1, -1)[color_channel]);
		c+=(0.125*ctx.evalEmission(5, -4, 0, -1, 0)[color_channel]);
		c+=(0.125*ctx.evalEmission(5, -4, 0, 0, -1)[color_channel]);
		c+=(0.125*ctx.evalEmission(5, -4, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 26 ) += c;
	}
	// row=27 l=5 m=-3 --------------------------
	ctx.coeff_A( 27, vi+V3i(0, -1, 0), 24 ) += (0.0710669054519*h_inv[1]);
	ctx.coeff_A( 27, vi+V3i(0, 0, 0), 24 ) += -(0.0710669054519*h_inv[1]);
	ctx.coeff_A( 27, vi+V3i(0, -1, 0), 22 ) += (0.376050716545*h_inv[1]);
	ctx.coeff_A( 27, vi+V3i(0, 0, 0), 22 ) += -(0.376050716545*h_inv[1]);
	ctx.coeff_A( 27, vi+V3i(0, 0, 0), 16 ) += -(0.0710669054519*h_inv[0]);
	ctx.coeff_A( 27, vi+V3i(1, 0, 0), 16 ) += (0.0710669054519*h_inv[0]);
	ctx.coeff_A( 27, vi+V3i(0, 0, 0), 18 ) += (0.376050716545*h_inv[0]);
	ctx.coeff_A( 27, vi+V3i(1, 0, 0), 18 ) += -(0.376050716545*h_inv[0]);
	ctx.coeff_A( 27, vi+V3i(0, 0, 0), 17 ) += -(0.402015126104*h_inv[2]);
	ctx.coeff_A( 27, vi+V3i(0, 0, 1), 17 ) += (0.402015126104*h_inv[2]);
	{
		double c = 0.0;
		c+=(0.5*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(0.5*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 27, vi+V3i(0, 0, 0), 27 ) += c;
	}
	{
		double c = 0.0;
		c+=(0.5*ctx.evalEmission(5, -3, 0, -1, 0)[color_channel]);
		c+=(0.5*ctx.evalEmission(5, -3, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 27 ) += c;
	}
	// row=28 l=5 m=-2 --------------------------
	ctx.coeff_A( 28, vi+V3i(0, -1, 0), 23 ) += (0.123091490979*h_inv[1]);
	ctx.coeff_A( 28, vi+V3i(0, 0, 0), 23 ) += -(0.123091490979*h_inv[1]);
	ctx.coeff_A( 28, vi+V3i(0, -1, 0), 21 ) += (0.325669473639*h_inv[1]);
	ctx.coeff_A( 28, vi+V3i(0, 0, 0), 21 ) += -(0.325669473639*h_inv[1]);
	ctx.coeff_A( 28, vi+V3i(-1, 0, 0), 17 ) += -(0.123091490979*h_inv[0]);
	ctx.coeff_A( 28, vi+V3i(0, 0, 0), 17 ) += (0.123091490979*h_inv[0]);
	ctx.coeff_A( 28, vi+V3i(-1, 0, 0), 19 ) += (0.325669473639*h_inv[0]);
	ctx.coeff_A( 28, vi+V3i(0, 0, 0), 19 ) += -(0.325669473639*h_inv[0]);
	ctx.coeff_A( 28, vi+V3i(0, 0, -1), 18 ) += -(0.460566186472*h_inv[2]);
	ctx.coeff_A( 28, vi+V3i(0, 0, 0), 18 ) += (0.460566186472*h_inv[2]);
	{
		double c = 0.0;
		c+=(0.125*ctx.evalExtinction(-1, -1, -1)[color_channel]);
		c+=(0.125*ctx.evalExtinction(-1, -1, 0)[color_channel]);
		c+=(0.125*ctx.evalExtinction(-1, 0, -1)[color_channel]);
		c+=(0.125*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(0.125*ctx.evalExtinction(0, -1, -1)[color_channel]);
		c+=(0.125*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(0.125*ctx.evalExtinction(0, 0, -1)[color_channel]);
		c+=(0.125*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, -1, -1)[color_channel]*ctx.evalScattering(-1, -1, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(-1, -1, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(-1, -1, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(-1, -1, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, -1, -1)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, -1, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, -1, -1)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, -1, -1)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, -1, -1)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, -1, -1)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, -1, -1)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, -1, -1)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, 0, -1)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, -1, -1)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.0167004669934*ctx.evalPhase(5, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 28, vi+V3i(0, 0, 0), 28 ) += c;
	}
	{
		double c = 0.0;
		c+=(0.125*ctx.evalEmission(5, -2, -1, -1, -1)[color_channel]);
		c+=(0.125*ctx.evalEmission(5, -2, -1, -1, 0)[color_channel]);
		c+=(0.125*ctx.evalEmission(5, -2, -1, 0, -1)[color_channel]);
		c+=(0.125*ctx.evalEmission(5, -2, -1, 0, 0)[color_channel]);
		c+=(0.125*ctx.evalEmission(5, -2, 0, -1, -1)[color_channel]);
		c+=(0.125*ctx.evalEmission(5, -2, 0, -1, 0)[color_channel]);
		c+=(0.125*ctx.evalEmission(5, -2, 0, 0, -1)[color_channel]);
		c+=(0.125*ctx.evalEmission(5, -2, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 28 ) += c;
	}
	// row=29 l=5 m=-1 --------------------------
	ctx.coeff_A( 29, vi+V3i(0, -1, 0), 22 ) += (0.174077655956*h_inv[1]);
	ctx.coeff_A( 29, vi+V3i(0, 0, 0), 22 ) += -(0.174077655956*h_inv[1]);
	ctx.coeff_A( 29, vi+V3i(0, -1, 0), 20 ) += (0.389249472081*h_inv[1]);
	ctx.coeff_A( 29, vi+V3i(0, 0, 0), 20 ) += -(0.389249472081*h_inv[1]);
	ctx.coeff_A( 29, vi+V3i(0, 0, 0), 18 ) += -(0.174077655956*h_inv[0]);
	ctx.coeff_A( 29, vi+V3i(1, 0, 0), 18 ) += (0.174077655956*h_inv[0]);
	ctx.coeff_A( 29, vi+V3i(0, 0, 0), 19 ) += -(0.492365963917*h_inv[2]);
	ctx.coeff_A( 29, vi+V3i(0, 0, 1), 19 ) += (0.492365963917*h_inv[2]);
	{
		double c = 0.0;
		c+=(0.5*ctx.evalExtinction(0, -1, 0)[color_channel]);
		c+=(0.5*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, -1, 0)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, 0, -1, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 29, vi+V3i(0, 0, 0), 29 ) += c;
	}
	{
		double c = 0.0;
		c+=(0.5*ctx.evalEmission(5, -1, 0, -1, 0)[color_channel]);
		c+=(0.5*ctx.evalEmission(5, -1, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 29 ) += c;
	}
	// row=30 l=5 m=0 --------------------------
	ctx.coeff_A( 30, vi+V3i(0, 0, 0), 21 ) += -(0.317820863082*h_inv[0]);
	ctx.coeff_A( 30, vi+V3i(1, 0, 0), 21 ) += (0.317820863082*h_inv[0]);
	ctx.coeff_A( 30, vi+V3i(0, 0, 0), 19 ) += -(0.317820863082*h_inv[1]);
	ctx.coeff_A( 30, vi+V3i(0, 1, 0), 19 ) += (0.317820863082*h_inv[1]);
	ctx.coeff_A( 30, vi+V3i(0, 0, -1), 20 ) += -(0.355334527259*h_inv[2]);
	ctx.coeff_A( 30, vi+V3i(0, 0, 0), 20 ) += (0.355334527259*h_inv[2]);
	{
		double c = 0.0;
		c+=(0.5*ctx.evalExtinction(0, 0, -1)[color_channel]);
		c+=(0.5*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 30, vi+V3i(0, 0, 0), 30 ) += c;
	}
	{
		double c = 0.0;
		c+=(0.5*ctx.evalEmission(5, 0, 0, 0, -1)[color_channel]);
		c+=(0.5*ctx.evalEmission(5, 0, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 30 ) += c;
	}
	// row=31 l=5 m=1 --------------------------
	ctx.coeff_A( 31, vi+V3i(-1, 0, 0), 22 ) += -(0.174077655956*h_inv[0]);
	ctx.coeff_A( 31, vi+V3i(0, 0, 0), 22 ) += (0.174077655956*h_inv[0]);
	ctx.coeff_A( 31, vi+V3i(-1, 0, 0), 20 ) += (0.389249472081*h_inv[0]);
	ctx.coeff_A( 31, vi+V3i(0, 0, 0), 20 ) += -(0.389249472081*h_inv[0]);
	ctx.coeff_A( 31, vi+V3i(0, 0, 0), 18 ) += -(0.174077655956*h_inv[1]);
	ctx.coeff_A( 31, vi+V3i(0, 1, 0), 18 ) += (0.174077655956*h_inv[1]);
	ctx.coeff_A( 31, vi+V3i(-1, 0, 0), 19 ) += -(0.123091490979*h_inv[2]);
	ctx.coeff_A( 31, vi+V3i(-1, 1, 0), 19 ) += -(0.123091490979*h_inv[2]);
	ctx.coeff_A( 31, vi+V3i(0, 0, 0), 19 ) += -(0.123091490979*h_inv[2]);
	ctx.coeff_A( 31, vi+V3i(0, 1, 0), 19 ) += -(0.123091490979*h_inv[2]);
	ctx.coeff_A( 31, vi+V3i(-1, 0, 1), 19 ) += (0.123091490979*h_inv[2]);
	ctx.coeff_A( 31, vi+V3i(-1, 1, 1), 19 ) += (0.123091490979*h_inv[2]);
	ctx.coeff_A( 31, vi+V3i(0, 0, 1), 19 ) += (0.123091490979*h_inv[2]);
	ctx.coeff_A( 31, vi+V3i(0, 1, 1), 19 ) += (0.123091490979*h_inv[2]);
	{
		double c = 0.0;
		c+=(0.5*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(0.5*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 31, vi+V3i(0, 0, 0), 31 ) += c;
	}
	{
		double c = 0.0;
		c+=(0.5*ctx.evalEmission(5, 1, -1, 0, 0)[color_channel]);
		c+=(0.5*ctx.evalEmission(5, 1, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 31 ) += c;
	}
	// row=32 l=5 m=2 --------------------------
	ctx.coeff_A( 32, vi+V3i(0, 0, 0), 23 ) += -(0.123091490979*h_inv[0]);
	ctx.coeff_A( 32, vi+V3i(1, 0, 0), 23 ) += (0.123091490979*h_inv[0]);
	ctx.coeff_A( 32, vi+V3i(0, 0, 0), 21 ) += (0.325669473639*h_inv[0]);
	ctx.coeff_A( 32, vi+V3i(1, 0, 0), 21 ) += -(0.325669473639*h_inv[0]);
	ctx.coeff_A( 32, vi+V3i(0, 0, 0), 17 ) += -(0.123091490979*h_inv[1]);
	ctx.coeff_A( 32, vi+V3i(0, 1, 0), 17 ) += (0.123091490979*h_inv[1]);
	ctx.coeff_A( 32, vi+V3i(0, 0, 0), 19 ) += -(0.325669473639*h_inv[1]);
	ctx.coeff_A( 32, vi+V3i(0, 1, 0), 19 ) += (0.325669473639*h_inv[1]);
	ctx.coeff_A( 32, vi+V3i(0, 0, -1), 18 ) += -(0.115141546618*h_inv[2]);
	ctx.coeff_A( 32, vi+V3i(0, 1, -1), 18 ) += -(0.115141546618*h_inv[2]);
	ctx.coeff_A( 32, vi+V3i(1, 0, -1), 18 ) += -(0.115141546618*h_inv[2]);
	ctx.coeff_A( 32, vi+V3i(1, 1, -1), 18 ) += -(0.115141546618*h_inv[2]);
	ctx.coeff_A( 32, vi+V3i(0, 0, 0), 18 ) += (0.115141546618*h_inv[2]);
	ctx.coeff_A( 32, vi+V3i(0, 1, 0), 18 ) += (0.115141546618*h_inv[2]);
	ctx.coeff_A( 32, vi+V3i(1, 0, 0), 18 ) += (0.115141546618*h_inv[2]);
	ctx.coeff_A( 32, vi+V3i(1, 1, 0), 18 ) += (0.115141546618*h_inv[2]);
	{
		double c = 0.0;
		c+=(0.5*ctx.evalExtinction(0, 0, -1)[color_channel]);
		c+=(0.5*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 32, vi+V3i(0, 0, 0), 32 ) += c;
	}
	{
		double c = 0.0;
		c+=(0.5*ctx.evalEmission(5, 2, 0, 0, -1)[color_channel]);
		c+=(0.5*ctx.evalEmission(5, 2, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 32 ) += c;
	}
	// row=33 l=5 m=3 --------------------------
	ctx.coeff_A( 33, vi+V3i(-1, 0, 0), 24 ) += -(0.0710669054519*h_inv[0]);
	ctx.coeff_A( 33, vi+V3i(0, 0, 0), 24 ) += (0.0710669054519*h_inv[0]);
	ctx.coeff_A( 33, vi+V3i(-1, 0, 0), 22 ) += (0.376050716545*h_inv[0]);
	ctx.coeff_A( 33, vi+V3i(0, 0, 0), 22 ) += -(0.376050716545*h_inv[0]);
	ctx.coeff_A( 33, vi+V3i(0, 0, 0), 16 ) += -(0.0710669054519*h_inv[1]);
	ctx.coeff_A( 33, vi+V3i(0, 1, 0), 16 ) += (0.0710669054519*h_inv[1]);
	ctx.coeff_A( 33, vi+V3i(0, 0, 0), 18 ) += -(0.376050716545*h_inv[1]);
	ctx.coeff_A( 33, vi+V3i(0, 1, 0), 18 ) += (0.376050716545*h_inv[1]);
	ctx.coeff_A( 33, vi+V3i(-1, 0, 0), 17 ) += -(0.100503781526*h_inv[2]);
	ctx.coeff_A( 33, vi+V3i(-1, 1, 0), 17 ) += -(0.100503781526*h_inv[2]);
	ctx.coeff_A( 33, vi+V3i(0, 0, 0), 17 ) += -(0.100503781526*h_inv[2]);
	ctx.coeff_A( 33, vi+V3i(0, 1, 0), 17 ) += -(0.100503781526*h_inv[2]);
	ctx.coeff_A( 33, vi+V3i(-1, 0, 1), 17 ) += (0.100503781526*h_inv[2]);
	ctx.coeff_A( 33, vi+V3i(-1, 1, 1), 17 ) += (0.100503781526*h_inv[2]);
	ctx.coeff_A( 33, vi+V3i(0, 0, 1), 17 ) += (0.100503781526*h_inv[2]);
	ctx.coeff_A( 33, vi+V3i(0, 1, 1), 17 ) += (0.100503781526*h_inv[2]);
	{
		double c = 0.0;
		c+=(0.5*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(0.5*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 33, vi+V3i(0, 0, 0), 33 ) += c;
	}
	{
		double c = 0.0;
		c+=(0.5*ctx.evalEmission(5, 3, -1, 0, 0)[color_channel]);
		c+=(0.5*ctx.evalEmission(5, 3, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 33 ) += c;
	}
	// row=34 l=5 m=4 --------------------------
	ctx.coeff_A( 34, vi+V3i(0, 0, 0), 23 ) += (0.426401432711*h_inv[0]);
	ctx.coeff_A( 34, vi+V3i(1, 0, 0), 23 ) += -(0.426401432711*h_inv[0]);
	ctx.coeff_A( 34, vi+V3i(0, 0, 0), 17 ) += -(0.426401432711*h_inv[1]);
	ctx.coeff_A( 34, vi+V3i(0, 1, 0), 17 ) += (0.426401432711*h_inv[1]);
	ctx.coeff_A( 34, vi+V3i(0, 0, -1), 16 ) += -(0.0753778361444*h_inv[2]);
	ctx.coeff_A( 34, vi+V3i(0, 1, -1), 16 ) += -(0.0753778361444*h_inv[2]);
	ctx.coeff_A( 34, vi+V3i(1, 0, -1), 16 ) += -(0.0753778361444*h_inv[2]);
	ctx.coeff_A( 34, vi+V3i(1, 1, -1), 16 ) += -(0.0753778361444*h_inv[2]);
	ctx.coeff_A( 34, vi+V3i(0, 0, 0), 16 ) += (0.0753778361444*h_inv[2]);
	ctx.coeff_A( 34, vi+V3i(0, 1, 0), 16 ) += (0.0753778361444*h_inv[2]);
	ctx.coeff_A( 34, vi+V3i(1, 0, 0), 16 ) += (0.0753778361444*h_inv[2]);
	ctx.coeff_A( 34, vi+V3i(1, 1, 0), 16 ) += (0.0753778361444*h_inv[2]);
	{
		double c = 0.0;
		c+=(0.5*ctx.evalExtinction(0, 0, -1)[color_channel]);
		c+=(0.5*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, -1)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, 0, 0, -1)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 34, vi+V3i(0, 0, 0), 34 ) += c;
	}
	{
		double c = 0.0;
		c+=(0.5*ctx.evalEmission(5, 4, 0, 0, -1)[color_channel]);
		c+=(0.5*ctx.evalEmission(5, 4, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 34 ) += c;
	}
	// row=35 l=5 m=5 --------------------------
	ctx.coeff_A( 35, vi+V3i(-1, 0, 0), 24 ) += (0.476731294623*h_inv[0]);
	ctx.coeff_A( 35, vi+V3i(0, 0, 0), 24 ) += -(0.476731294623*h_inv[0]);
	ctx.coeff_A( 35, vi+V3i(0, 0, 0), 16 ) += -(0.476731294623*h_inv[1]);
	ctx.coeff_A( 35, vi+V3i(0, 1, 0), 16 ) += (0.476731294623*h_inv[1]);
	{
		double c = 0.0;
		c+=(0.5*ctx.evalExtinction(-1, 0, 0)[color_channel]);
		c+=(0.5*ctx.evalExtinction(0, 0, 0)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(-1, 0, 0)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, -1, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		c+=-(0.267207471894*ctx.evalPhase(5, 0, 0, 0, 0)[color_channel]*ctx.evalScattering(0, 0, 0)[color_channel]);
		ctx.coeff_A( 35, vi+V3i(0, 0, 0), 35 ) += c;
	}
	{
		double c = 0.0;
		c+=(0.5*ctx.evalEmission(5, 5, -1, 0, 0)[color_channel]);
		c+=(0.5*ctx.evalEmission(5, 5, 0, 0, 0)[color_channel]);
		ctx.coeff_b( 35 ) += c;
	}
}
V3i stencil_p5_3d_sg_get_offset(int coeff)
{
	switch(coeff)
	{
		case 0:return V3i(1, 1, 1);break;
		case 1:return V3i(1, 0, 1);break;
		case 2:return V3i(1, 1, 0);break;
		case 3:return V3i(0, 1, 1);break;
		case 4:return V3i(0, 0, 1);break;
		case 5:return V3i(1, 0, 0);break;
		case 6:return V3i(1, 1, 1);break;
		case 7:return V3i(0, 1, 0);break;
		case 8:return V3i(1, 1, 1);break;
		case 9:return V3i(1, 0, 1);break;
		case 10:return V3i(0, 0, 0);break;
		case 11:return V3i(1, 0, 1);break;
		case 12:return V3i(1, 1, 0);break;
		case 13:return V3i(0, 1, 1);break;
		case 14:return V3i(1, 1, 0);break;
		case 15:return V3i(0, 1, 1);break;
		case 16:return V3i(0, 0, 1);break;
		case 17:return V3i(1, 0, 0);break;
		case 18:return V3i(0, 0, 1);break;
		case 19:return V3i(1, 0, 0);break;
		case 20:return V3i(1, 1, 1);break;
		case 21:return V3i(0, 1, 0);break;
		case 22:return V3i(1, 1, 1);break;
		case 23:return V3i(0, 1, 0);break;
		case 24:return V3i(1, 1, 1);break;
		case 25:return V3i(1, 0, 1);break;
		case 26:return V3i(0, 0, 0);break;
		case 27:return V3i(1, 0, 1);break;
		case 28:return V3i(0, 0, 0);break;
		case 29:return V3i(1, 0, 1);break;
		case 30:return V3i(1, 1, 0);break;
		case 31:return V3i(0, 1, 1);break;
		case 32:return V3i(1, 1, 0);break;
		case 33:return V3i(0, 1, 1);break;
		case 34:return V3i(1, 1, 0);break;
		case 35:return V3i(0, 1, 1);break;
		default:throw std::runtime_error("unexpected coefficient index");break;
	};
}
REGISTER_STENCIL(stencil_p5_3d_sg, 5, 36, 1)
