// This file was generated by stencil.py

#include <PNSystem.h>

void stencil_fopn_p3_cg(PNSystem::VoxelSystem& sys,
					PNSystem::Fields& fields)
{
	V2i vi = sys.getVoxel();
	V2d vd = sys.getVoxel().cast<double>();
	V2d h_inv( 1.0/(2*sys.getVoxelSize()[0]), 1.0/(2*sys.getVoxelSize()[1]) );

	Eigen::Matrix<std::complex<double>, 10, 10> S;
	S.coeffRef(0, 0) = std::complex<double>(1.0, 0.0);
	S.coeffRef(1, 1) = std::complex<double>(0.7071067811865475, 0.0);
	S.coeffRef(1, 2) = std::complex<double>(-0.7071067811865475, 0.0);
	S.coeffRef(2, 1) = std::complex<double>(-0.0, -0.7071067811865475);
	S.coeffRef(2, 2) = std::complex<double>(-0.0, -0.7071067811865475);
	S.coeffRef(3, 3) = std::complex<double>(0.7071067811865475, 0.0);
	S.coeffRef(3, 5) = std::complex<double>(0.7071067811865475, 0.0);
	S.coeffRef(4, 3) = std::complex<double>(-0.0, -0.7071067811865475);
	S.coeffRef(4, 5) = std::complex<double>(0.0, 0.7071067811865475);
	S.coeffRef(5, 4) = std::complex<double>(1.0, 0.0);
	S.coeffRef(6, 6) = std::complex<double>(0.7071067811865475, 0.0);
	S.coeffRef(6, 9) = std::complex<double>(-0.7071067811865475, 0.0);
	S.coeffRef(7, 6) = std::complex<double>(-0.0, -0.7071067811865475);
	S.coeffRef(7, 9) = std::complex<double>(-0.0, -0.7071067811865475);
	S.coeffRef(8, 7) = std::complex<double>(0.7071067811865475, 0.0);
	S.coeffRef(8, 8) = std::complex<double>(-0.7071067811865475, 0.0);
	S.coeffRef(9, 7) = std::complex<double>(-0.0, -0.7071067811865475);
	S.coeffRef(9, 8) = std::complex<double>(-0.0, -0.7071067811865475);
	Eigen::Matrix<std::complex<double>, 10, 10> SInv;
	SInv.coeffRef(0, 0) = std::complex<double>(1.0, 0.0);
	SInv.coeffRef(1, 1) = std::complex<double>(0.7071067811865476, 0.0);
	SInv.coeffRef(1, 2) = std::complex<double>(0.0, 0.7071067811865476);
	SInv.coeffRef(2, 1) = std::complex<double>(-0.7071067811865476, 0.0);
	SInv.coeffRef(2, 2) = std::complex<double>(-0.0, 0.7071067811865476);
	SInv.coeffRef(3, 3) = std::complex<double>(0.7071067811865476, 0.0);
	SInv.coeffRef(3, 4) = std::complex<double>(0.0, 0.7071067811865476);
	SInv.coeffRef(4, 5) = std::complex<double>(1.0, 0.0);
	SInv.coeffRef(5, 3) = std::complex<double>(0.7071067811865476, 0.0);
	SInv.coeffRef(5, 4) = std::complex<double>(0.0, -0.7071067811865476);
	SInv.coeffRef(6, 6) = std::complex<double>(0.7071067811865476, 0.0);
	SInv.coeffRef(6, 7) = std::complex<double>(0.0, 0.7071067811865476);
	SInv.coeffRef(7, 8) = std::complex<double>(0.7071067811865476, 0.0);
	SInv.coeffRef(7, 9) = std::complex<double>(0.0, 0.7071067811865476);
	SInv.coeffRef(8, 8) = std::complex<double>(-0.7071067811865476, 0.0);
	SInv.coeffRef(8, 9) = std::complex<double>(0.0, 0.7071067811865476);
	SInv.coeffRef(9, 6) = std::complex<double>(-0.7071067811865476, 0.0);
	SInv.coeffRef(9, 7) = std::complex<double>(0.0, 0.7071067811865476);

	//Producing complex-valued matrices =============
	//M_0dxL + M_1dyL + M_2dzL + M_3L = b

	//M_0 ---
	// is constant
	Eigen::Matrix<double, 10, 10> M_0_real;
	M_0_real(0, 0) = 0.0;
	M_0_real(0, 1) = 0.5773502691896258;
	M_0_real(0, 2) = 0.0;
	M_0_real(0, 3) = 0.0;
	M_0_real(0, 4) = 0.0;
	M_0_real(0, 5) = 0.0;
	M_0_real(0, 6) = 0.0;
	M_0_real(0, 7) = 0.0;
	M_0_real(0, 8) = 0.0;
	M_0_real(0, 9) = 0.0;
	M_0_real(1, 0) = 0.5773502691896257;
	M_0_real(1, 1) = 0.0;
	M_0_real(1, 2) = 0.0;
	M_0_real(1, 3) = 0.4472135954999579;
	M_0_real(1, 4) = 0.0;
	M_0_real(1, 5) = -0.2581988897471611;
	M_0_real(1, 6) = 0.0;
	M_0_real(1, 7) = 0.0;
	M_0_real(1, 8) = 0.0;
	M_0_real(1, 9) = 0.0;
	M_0_real(2, 0) = 0.0;
	M_0_real(2, 1) = 0.0;
	M_0_real(2, 2) = 0.0;
	M_0_real(2, 3) = 0.0;
	M_0_real(2, 4) = 0.4472135954999579;
	M_0_real(2, 5) = 0.0;
	M_0_real(2, 6) = 0.0;
	M_0_real(2, 7) = 0.0;
	M_0_real(2, 8) = 0.0;
	M_0_real(2, 9) = 0.0;
	M_0_real(3, 0) = 0.0;
	M_0_real(3, 1) = 0.4472135954999579;
	M_0_real(3, 2) = 0.0;
	M_0_real(3, 3) = 0.0;
	M_0_real(3, 4) = 0.0;
	M_0_real(3, 5) = 0.0;
	M_0_real(3, 6) = 0.4629100498862757;
	M_0_real(3, 7) = 0.0;
	M_0_real(3, 8) = -0.11952286093343936;
	M_0_real(3, 9) = 0.0;
	M_0_real(4, 0) = 0.0;
	M_0_real(4, 1) = 0.0;
	M_0_real(4, 2) = 0.4472135954999579;
	M_0_real(4, 3) = 0.0;
	M_0_real(4, 4) = 0.0;
	M_0_real(4, 5) = 0.0;
	M_0_real(4, 6) = 0.0;
	M_0_real(4, 7) = 0.4629100498862757;
	M_0_real(4, 8) = 0.0;
	M_0_real(4, 9) = -0.11952286093343936;
	M_0_real(5, 0) = 0.0;
	M_0_real(5, 1) = -0.2581988897471611;
	M_0_real(5, 2) = 0.0;
	M_0_real(5, 3) = 0.0;
	M_0_real(5, 4) = 0.0;
	M_0_real(5, 5) = 0.0;
	M_0_real(5, 6) = 0.0;
	M_0_real(5, 7) = 0.0;
	M_0_real(5, 8) = 0.41403933560541256;
	M_0_real(5, 9) = 0.0;
	M_0_real(6, 0) = 0.0;
	M_0_real(6, 1) = 0.0;
	M_0_real(6, 2) = 0.0;
	M_0_real(6, 3) = 0.4629100498862757;
	M_0_real(6, 4) = 0.0;
	M_0_real(6, 5) = 0.0;
	M_0_real(6, 6) = 0.0;
	M_0_real(6, 7) = 0.0;
	M_0_real(6, 8) = 0.0;
	M_0_real(6, 9) = 0.0;
	M_0_real(7, 0) = 0.0;
	M_0_real(7, 1) = 0.0;
	M_0_real(7, 2) = 0.0;
	M_0_real(7, 3) = 0.0;
	M_0_real(7, 4) = 0.4629100498862757;
	M_0_real(7, 5) = 0.0;
	M_0_real(7, 6) = 0.0;
	M_0_real(7, 7) = 0.0;
	M_0_real(7, 8) = 0.0;
	M_0_real(7, 9) = 0.0;
	M_0_real(8, 0) = 0.0;
	M_0_real(8, 1) = 0.0;
	M_0_real(8, 2) = 0.0;
	M_0_real(8, 3) = -0.11952286093343936;
	M_0_real(8, 4) = 0.0;
	M_0_real(8, 5) = 0.4140393356054125;
	M_0_real(8, 6) = 0.0;
	M_0_real(8, 7) = 0.0;
	M_0_real(8, 8) = 0.0;
	M_0_real(8, 9) = 0.0;
	M_0_real(9, 0) = 0.0;
	M_0_real(9, 1) = 0.0;
	M_0_real(9, 2) = 0.0;
	M_0_real(9, 3) = 0.0;
	M_0_real(9, 4) = -0.11952286093343936;
	M_0_real(9, 5) = 0.0;
	M_0_real(9, 6) = 0.0;
	M_0_real(9, 7) = 0.0;
	M_0_real(9, 8) = 0.0;
	M_0_real(9, 9) = 0.0;

	//M_1 ---
	// is constant
	Eigen::Matrix<double, 10, 10> M_1_real;
	M_1_real(0, 0) = 0.0;
	M_1_real(0, 1) = 0.0;
	M_1_real(0, 2) = 0.5773502691896258;
	M_1_real(0, 3) = 0.0;
	M_1_real(0, 4) = 0.0;
	M_1_real(0, 5) = 0.0;
	M_1_real(0, 6) = 0.0;
	M_1_real(0, 7) = 0.0;
	M_1_real(0, 8) = 0.0;
	M_1_real(0, 9) = 0.0;
	M_1_real(1, 0) = 0.0;
	M_1_real(1, 1) = 0.0;
	M_1_real(1, 2) = 0.0;
	M_1_real(1, 3) = 0.0;
	M_1_real(1, 4) = 0.4472135954999579;
	M_1_real(1, 5) = 0.0;
	M_1_real(1, 6) = 0.0;
	M_1_real(1, 7) = 0.0;
	M_1_real(1, 8) = 0.0;
	M_1_real(1, 9) = 0.0;
	M_1_real(2, 0) = 0.5773502691896257;
	M_1_real(2, 1) = 0.0;
	M_1_real(2, 2) = 0.0;
	M_1_real(2, 3) = -0.4472135954999579;
	M_1_real(2, 4) = 0.0;
	M_1_real(2, 5) = -0.2581988897471611;
	M_1_real(2, 6) = 0.0;
	M_1_real(2, 7) = 0.0;
	M_1_real(2, 8) = 0.0;
	M_1_real(2, 9) = 0.0;
	M_1_real(3, 0) = 0.0;
	M_1_real(3, 1) = 0.0;
	M_1_real(3, 2) = -0.4472135954999579;
	M_1_real(3, 3) = 0.0;
	M_1_real(3, 4) = 0.0;
	M_1_real(3, 5) = 0.0;
	M_1_real(3, 6) = 0.0;
	M_1_real(3, 7) = 0.4629100498862757;
	M_1_real(3, 8) = 0.0;
	M_1_real(3, 9) = 0.11952286093343936;
	M_1_real(4, 0) = 0.0;
	M_1_real(4, 1) = 0.4472135954999579;
	M_1_real(4, 2) = 0.0;
	M_1_real(4, 3) = 0.0;
	M_1_real(4, 4) = 0.0;
	M_1_real(4, 5) = 0.0;
	M_1_real(4, 6) = -0.4629100498862757;
	M_1_real(4, 7) = 0.0;
	M_1_real(4, 8) = -0.11952286093343936;
	M_1_real(4, 9) = 0.0;
	M_1_real(5, 0) = 0.0;
	M_1_real(5, 1) = 0.0;
	M_1_real(5, 2) = -0.2581988897471611;
	M_1_real(5, 3) = 0.0;
	M_1_real(5, 4) = 0.0;
	M_1_real(5, 5) = 0.0;
	M_1_real(5, 6) = 0.0;
	M_1_real(5, 7) = 0.0;
	M_1_real(5, 8) = 0.0;
	M_1_real(5, 9) = 0.41403933560541256;
	M_1_real(6, 0) = 0.0;
	M_1_real(6, 1) = 0.0;
	M_1_real(6, 2) = 0.0;
	M_1_real(6, 3) = 0.0;
	M_1_real(6, 4) = -0.4629100498862757;
	M_1_real(6, 5) = 0.0;
	M_1_real(6, 6) = 0.0;
	M_1_real(6, 7) = 0.0;
	M_1_real(6, 8) = 0.0;
	M_1_real(6, 9) = 0.0;
	M_1_real(7, 0) = 0.0;
	M_1_real(7, 1) = 0.0;
	M_1_real(7, 2) = 0.0;
	M_1_real(7, 3) = 0.4629100498862757;
	M_1_real(7, 4) = 0.0;
	M_1_real(7, 5) = 0.0;
	M_1_real(7, 6) = 0.0;
	M_1_real(7, 7) = 0.0;
	M_1_real(7, 8) = 0.0;
	M_1_real(7, 9) = 0.0;
	M_1_real(8, 0) = 0.0;
	M_1_real(8, 1) = 0.0;
	M_1_real(8, 2) = 0.0;
	M_1_real(8, 3) = 0.0;
	M_1_real(8, 4) = -0.11952286093343936;
	M_1_real(8, 5) = 0.0;
	M_1_real(8, 6) = 0.0;
	M_1_real(8, 7) = 0.0;
	M_1_real(8, 8) = 0.0;
	M_1_real(8, 9) = 0.0;
	M_1_real(9, 0) = 0.0;
	M_1_real(9, 1) = 0.0;
	M_1_real(9, 2) = 0.0;
	M_1_real(9, 3) = 0.11952286093343936;
	M_1_real(9, 4) = 0.0;
	M_1_real(9, 5) = 0.4140393356054125;
	M_1_real(9, 6) = 0.0;
	M_1_real(9, 7) = 0.0;
	M_1_real(9, 8) = 0.0;
	M_1_real(9, 9) = 0.0;

	//M_2 ---
	// all components vanish

	//M_3 ---
	Eigen::Matrix<std::complex<double>, 10, 10> M_3;
	M_3(0, 0) = (fields.sigma_t->eval(sys.voxelToWorld(vd+V2d(0.5, 0.5)))+
			-(fields.sigma_s->eval(sys.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(0, 0, sys.voxelToWorld(vd+V2d(0.5, 0.5)))));
	M_3(1, 1) = (fields.sigma_t->eval(sys.voxelToWorld(vd+V2d(0.5, 0.5)))+
			-(fields.sigma_s->eval(sys.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(1, 0, sys.voxelToWorld(vd+V2d(0.5, 0.5)))));
	M_3(2, 2) = (fields.sigma_t->eval(sys.voxelToWorld(vd+V2d(0.5, 0.5)))+
			-(fields.sigma_s->eval(sys.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(1, 0, sys.voxelToWorld(vd+V2d(0.5, 0.5)))));
	M_3(3, 3) = (fields.sigma_t->eval(sys.voxelToWorld(vd+V2d(0.5, 0.5)))+
			-(fields.sigma_s->eval(sys.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(2, 0, sys.voxelToWorld(vd+V2d(0.5, 0.5)))));
	M_3(4, 4) = (fields.sigma_t->eval(sys.voxelToWorld(vd+V2d(0.5, 0.5)))+
			-(fields.sigma_s->eval(sys.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(2, 0, sys.voxelToWorld(vd+V2d(0.5, 0.5)))));
	M_3(5, 5) = (fields.sigma_t->eval(sys.voxelToWorld(vd+V2d(0.5, 0.5)))+
			-(fields.sigma_s->eval(sys.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(2, 0, sys.voxelToWorld(vd+V2d(0.5, 0.5)))));
	M_3(6, 6) = (fields.sigma_t->eval(sys.voxelToWorld(vd+V2d(0.5, 0.5)))+
			-(fields.sigma_s->eval(sys.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(3, 0, sys.voxelToWorld(vd+V2d(0.5, 0.5)))));
	M_3(7, 7) = (fields.sigma_t->eval(sys.voxelToWorld(vd+V2d(0.5, 0.5)))+
			-(fields.sigma_s->eval(sys.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(3, 0, sys.voxelToWorld(vd+V2d(0.5, 0.5)))));
	M_3(8, 8) = (fields.sigma_t->eval(sys.voxelToWorld(vd+V2d(0.5, 0.5)))+
			-(fields.sigma_s->eval(sys.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(3, 0, sys.voxelToWorld(vd+V2d(0.5, 0.5)))));
	M_3(9, 9) = (fields.sigma_t->eval(sys.voxelToWorld(vd+V2d(0.5, 0.5)))+
			-(fields.sigma_s->eval(sys.voxelToWorld(vd+V2d(0.5, 0.5)))*fields.f_p->eval(3, 0, sys.voxelToWorld(vd+V2d(0.5, 0.5)))));
	Eigen::Matrix<double, 10, 10> M_3_real = (S*M_3*SInv).real();

	//b ---
	Eigen::Matrix<std::complex<double>, 10, 1> b;
	b(0, 0) = fields.q->eval(0, 0, sys.voxelToWorld(vd+V2d(0.5, 0.5)));
	b(1, 0) = fields.q->eval(1, -1, sys.voxelToWorld(vd+V2d(0.5, 0.5)));
	b(2, 0) = fields.q->eval(1, 1, sys.voxelToWorld(vd+V2d(0.5, 0.5)));
	b(3, 0) = fields.q->eval(2, -2, sys.voxelToWorld(vd+V2d(0.5, 0.5)));
	b(4, 0) = fields.q->eval(2, 0, sys.voxelToWorld(vd+V2d(0.5, 0.5)));
	b(5, 0) = fields.q->eval(2, 2, sys.voxelToWorld(vd+V2d(0.5, 0.5)));
	b(6, 0) = fields.q->eval(3, -3, sys.voxelToWorld(vd+V2d(0.5, 0.5)));
	b(7, 0) = fields.q->eval(3, -1, sys.voxelToWorld(vd+V2d(0.5, 0.5)));
	b(8, 0) = fields.q->eval(3, 1, sys.voxelToWorld(vd+V2d(0.5, 0.5)));
	b(9, 0) = fields.q->eval(3, 3, sys.voxelToWorld(vd+V2d(0.5, 0.5)));
	Eigen::Matrix<double, 10, 1> b_real = (S*b).real();

	// Assembling global system =============
	sys.coeff_A( 1, vi + V2i(-1,0), 0 ) += -(h_inv[0]*0.57735026919);
	sys.coeff_A( 1, vi + V2i(1,0), 0 ) += (h_inv[0]*0.57735026919);
	sys.coeff_A( 0, vi + V2i(-1,0), 1 ) += -(h_inv[0]*0.57735026919);
	sys.coeff_A( 0, vi + V2i(1,0), 1 ) += (h_inv[0]*0.57735026919);
	sys.coeff_A( 3, vi + V2i(-1,0), 1 ) += -(h_inv[0]*0.4472135955);
	sys.coeff_A( 3, vi + V2i(1,0), 1 ) += (h_inv[0]*0.4472135955);
	sys.coeff_A( 5, vi + V2i(-1,0), 1 ) += -(h_inv[0]*-0.258198889747);
	sys.coeff_A( 5, vi + V2i(1,0), 1 ) += (h_inv[0]*-0.258198889747);
	sys.coeff_A( 4, vi + V2i(-1,0), 2 ) += -(h_inv[0]*0.4472135955);
	sys.coeff_A( 4, vi + V2i(1,0), 2 ) += (h_inv[0]*0.4472135955);
	sys.coeff_A( 1, vi + V2i(-1,0), 3 ) += -(h_inv[0]*0.4472135955);
	sys.coeff_A( 1, vi + V2i(1,0), 3 ) += (h_inv[0]*0.4472135955);
	sys.coeff_A( 6, vi + V2i(-1,0), 3 ) += -(h_inv[0]*0.462910049886);
	sys.coeff_A( 6, vi + V2i(1,0), 3 ) += (h_inv[0]*0.462910049886);
	sys.coeff_A( 8, vi + V2i(-1,0), 3 ) += -(h_inv[0]*-0.119522860933);
	sys.coeff_A( 8, vi + V2i(1,0), 3 ) += (h_inv[0]*-0.119522860933);
	sys.coeff_A( 2, vi + V2i(-1,0), 4 ) += -(h_inv[0]*0.4472135955);
	sys.coeff_A( 2, vi + V2i(1,0), 4 ) += (h_inv[0]*0.4472135955);
	sys.coeff_A( 7, vi + V2i(-1,0), 4 ) += -(h_inv[0]*0.462910049886);
	sys.coeff_A( 7, vi + V2i(1,0), 4 ) += (h_inv[0]*0.462910049886);
	sys.coeff_A( 9, vi + V2i(-1,0), 4 ) += -(h_inv[0]*-0.119522860933);
	sys.coeff_A( 9, vi + V2i(1,0), 4 ) += (h_inv[0]*-0.119522860933);
	sys.coeff_A( 1, vi + V2i(-1,0), 5 ) += -(h_inv[0]*-0.258198889747);
	sys.coeff_A( 1, vi + V2i(1,0), 5 ) += (h_inv[0]*-0.258198889747);
	sys.coeff_A( 8, vi + V2i(-1,0), 5 ) += -(h_inv[0]*0.414039335605);
	sys.coeff_A( 8, vi + V2i(1,0), 5 ) += (h_inv[0]*0.414039335605);
	sys.coeff_A( 3, vi + V2i(-1,0), 6 ) += -(h_inv[0]*0.462910049886);
	sys.coeff_A( 3, vi + V2i(1,0), 6 ) += (h_inv[0]*0.462910049886);
	sys.coeff_A( 4, vi + V2i(-1,0), 7 ) += -(h_inv[0]*0.462910049886);
	sys.coeff_A( 4, vi + V2i(1,0), 7 ) += (h_inv[0]*0.462910049886);
	sys.coeff_A( 3, vi + V2i(-1,0), 8 ) += -(h_inv[0]*-0.119522860933);
	sys.coeff_A( 3, vi + V2i(1,0), 8 ) += (h_inv[0]*-0.119522860933);
	sys.coeff_A( 5, vi + V2i(-1,0), 8 ) += -(h_inv[0]*0.414039335605);
	sys.coeff_A( 5, vi + V2i(1,0), 8 ) += (h_inv[0]*0.414039335605);
	sys.coeff_A( 4, vi + V2i(-1,0), 9 ) += -(h_inv[0]*-0.119522860933);
	sys.coeff_A( 4, vi + V2i(1,0), 9 ) += (h_inv[0]*-0.119522860933);
	sys.coeff_A( 2, vi + V2i(0,-1), 0 ) += -(h_inv[1]*0.57735026919);
	sys.coeff_A( 2, vi + V2i(0,1), 0 ) += (h_inv[1]*0.57735026919);
	sys.coeff_A( 4, vi + V2i(0,-1), 1 ) += -(h_inv[1]*0.4472135955);
	sys.coeff_A( 4, vi + V2i(0,1), 1 ) += (h_inv[1]*0.4472135955);
	sys.coeff_A( 0, vi + V2i(0,-1), 2 ) += -(h_inv[1]*0.57735026919);
	sys.coeff_A( 0, vi + V2i(0,1), 2 ) += (h_inv[1]*0.57735026919);
	sys.coeff_A( 3, vi + V2i(0,-1), 2 ) += -(h_inv[1]*-0.4472135955);
	sys.coeff_A( 3, vi + V2i(0,1), 2 ) += (h_inv[1]*-0.4472135955);
	sys.coeff_A( 5, vi + V2i(0,-1), 2 ) += -(h_inv[1]*-0.258198889747);
	sys.coeff_A( 5, vi + V2i(0,1), 2 ) += (h_inv[1]*-0.258198889747);
	sys.coeff_A( 2, vi + V2i(0,-1), 3 ) += -(h_inv[1]*-0.4472135955);
	sys.coeff_A( 2, vi + V2i(0,1), 3 ) += (h_inv[1]*-0.4472135955);
	sys.coeff_A( 7, vi + V2i(0,-1), 3 ) += -(h_inv[1]*0.462910049886);
	sys.coeff_A( 7, vi + V2i(0,1), 3 ) += (h_inv[1]*0.462910049886);
	sys.coeff_A( 9, vi + V2i(0,-1), 3 ) += -(h_inv[1]*0.119522860933);
	sys.coeff_A( 9, vi + V2i(0,1), 3 ) += (h_inv[1]*0.119522860933);
	sys.coeff_A( 1, vi + V2i(0,-1), 4 ) += -(h_inv[1]*0.4472135955);
	sys.coeff_A( 1, vi + V2i(0,1), 4 ) += (h_inv[1]*0.4472135955);
	sys.coeff_A( 6, vi + V2i(0,-1), 4 ) += -(h_inv[1]*-0.462910049886);
	sys.coeff_A( 6, vi + V2i(0,1), 4 ) += (h_inv[1]*-0.462910049886);
	sys.coeff_A( 8, vi + V2i(0,-1), 4 ) += -(h_inv[1]*-0.119522860933);
	sys.coeff_A( 8, vi + V2i(0,1), 4 ) += (h_inv[1]*-0.119522860933);
	sys.coeff_A( 2, vi + V2i(0,-1), 5 ) += -(h_inv[1]*-0.258198889747);
	sys.coeff_A( 2, vi + V2i(0,1), 5 ) += (h_inv[1]*-0.258198889747);
	sys.coeff_A( 9, vi + V2i(0,-1), 5 ) += -(h_inv[1]*0.414039335605);
	sys.coeff_A( 9, vi + V2i(0,1), 5 ) += (h_inv[1]*0.414039335605);
	sys.coeff_A( 4, vi + V2i(0,-1), 6 ) += -(h_inv[1]*-0.462910049886);
	sys.coeff_A( 4, vi + V2i(0,1), 6 ) += (h_inv[1]*-0.462910049886);
	sys.coeff_A( 3, vi + V2i(0,-1), 7 ) += -(h_inv[1]*0.462910049886);
	sys.coeff_A( 3, vi + V2i(0,1), 7 ) += (h_inv[1]*0.462910049886);
	sys.coeff_A( 4, vi + V2i(0,-1), 8 ) += -(h_inv[1]*-0.119522860933);
	sys.coeff_A( 4, vi + V2i(0,1), 8 ) += (h_inv[1]*-0.119522860933);
	sys.coeff_A( 3, vi + V2i(0,-1), 9 ) += -(h_inv[1]*0.119522860933);
	sys.coeff_A( 3, vi + V2i(0,1), 9 ) += (h_inv[1]*0.119522860933);
	sys.coeff_A( 5, vi + V2i(0,-1), 9 ) += -(h_inv[1]*0.414039335605);
	sys.coeff_A( 5, vi + V2i(0,1), 9 ) += (h_inv[1]*0.414039335605);
	sys.coeff_A( 0, vi + V2i(0,0), 0 ) += M_3_real.coeffRef(0, 0);
	sys.coeff_A( 1, vi + V2i(0,0), 1 ) += M_3_real.coeffRef(1, 1);
	sys.coeff_A( 2, vi + V2i(0,0), 2 ) += M_3_real.coeffRef(2, 2);
	sys.coeff_A( 3, vi + V2i(0,0), 3 ) += M_3_real.coeffRef(3, 3);
	sys.coeff_A( 4, vi + V2i(0,0), 4 ) += M_3_real.coeffRef(4, 4);
	sys.coeff_A( 5, vi + V2i(0,0), 5 ) += M_3_real.coeffRef(5, 5);
	sys.coeff_A( 6, vi + V2i(0,0), 6 ) += M_3_real.coeffRef(6, 6);
	sys.coeff_A( 7, vi + V2i(0,0), 7 ) += M_3_real.coeffRef(7, 7);
	sys.coeff_A( 8, vi + V2i(0,0), 8 ) += M_3_real.coeffRef(8, 8);
	sys.coeff_A( 9, vi + V2i(0,0), 9 ) += M_3_real.coeffRef(9, 9);
	sys.coeff_b( 0 ) += b_real.coeffRef(0, 0);
	sys.coeff_b( 1 ) += b_real.coeffRef(1, 0);
	sys.coeff_b( 2 ) += b_real.coeffRef(2, 0);
	sys.coeff_b( 3 ) += b_real.coeffRef(3, 0);
	sys.coeff_b( 4 ) += b_real.coeffRef(4, 0);
	sys.coeff_b( 5 ) += b_real.coeffRef(5, 0);
	sys.coeff_b( 6 ) += b_real.coeffRef(6, 0);
	sys.coeff_b( 7 ) += b_real.coeffRef(7, 0);
	sys.coeff_b( 8 ) += b_real.coeffRef(8, 0);
	sys.coeff_b( 9 ) += b_real.coeffRef(9, 0);
}
REGISTER_STENCIL(stencil_fopn_p3_cg, 3, 1)
